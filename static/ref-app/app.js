webpackJsonp([0],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(3);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals window __webpack_hash__ */
	if(true) {
		var lastData;
		var upToDate = function upToDate() {
			return lastData.indexOf(__webpack_require__.h()) >= 0;
		};
		var check = function check() {
			module.hot.check(true, function(err, updatedModules) {
				if(err) {
					if(module.hot.status() in {
							abort: 1,
							fail: 1
						}) {
						console.warn("[HMR] Cannot apply update. Need to do a full reload!");
						console.warn("[HMR] " + err.stack || err.message);
						window.location.reload();
					} else {
						console.warn("[HMR] Update failed: " + err.stack || err.message);
					}
					return;
				}
	
				if(!updatedModules) {
					console.warn("[HMR] Cannot find update. Need to do a full reload!");
					console.warn("[HMR] (Probably because of restarting the webpack-dev-server)");
					window.location.reload();
					return;
				}
	
				if(!upToDate()) {
					check();
				}
	
				__webpack_require__(2)(updatedModules, updatedModules);
	
				if(upToDate()) {
					console.log("[HMR] App is up to date.");
				}
	
			});
		};
		var addEventListener = window.addEventListener ? function(eventName, listener) {
			window.addEventListener(eventName, listener, false);
		} : function(eventName, listener) {
			window.attachEvent("on" + eventName, listener);
		};
		addEventListener("message", function(event) {
			if(typeof event.data === "string" && event.data.indexOf("webpackHotUpdate") === 0) {
				lastData = event.data;
				if(!upToDate() && module.hot.status() === "idle") {
					console.log("[HMR] Checking for updates on the server...");
					check();
				}
			}
		});
		console.log("[HMR] Waiting for update signal from WDS...");
	} else {
		throw new Error("[HMR] Hot Module Replacement is disabled.");
	}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(updatedModules, renewedModules) {
		var unacceptedModules = updatedModules.filter(function(moduleId) {
			return renewedModules && renewedModules.indexOf(moduleId) < 0;
		});
	
		if(unacceptedModules.length > 0) {
			console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
			unacceptedModules.forEach(function(moduleId) {
				console.warn("[HMR]  - " + moduleId);
			});
		}
	
		if(!renewedModules || renewedModules.length === 0) {
			console.log("[HMR] Nothing hot updated.");
		} else {
			console.log("[HMR] Updated modules:");
			renewedModules.forEach(function(moduleId) {
				console.log("[HMR]  - " + moduleId);
			});
		}
	};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	
		'use strict';
	
		__webpack_require__(4)();
		__webpack_require__(75);
		__webpack_require__(87);
		__webpack_require__(90);
		__webpack_require__(93);
		__webpack_require__(96);
		__webpack_require__(97);
		__webpack_require__(100);
		__webpack_require__(101);
		__webpack_require__(104);
		__webpack_require__(107);
		__webpack_require__(108);
		__webpack_require__(109);
		__webpack_require__(112);
		__webpack_require__(113);
		__webpack_require__(116);
		__webpack_require__(117);
		__webpack_require__(120);
		__webpack_require__(121);
		__webpack_require__(124);
		__webpack_require__(125);
		__webpack_require__(126);
		__webpack_require__(129);
		__webpack_require__(130);
		__webpack_require__(133);
		__webpack_require__(134);
		__webpack_require__(137);
		__webpack_require__(138);
	
	
	
	
	
	
		module.exports = angular.module('console', [
				'ui.router',
				'ui.tree',
				'console.layout',
				'console.documentsList',
				'console.agentDashboardService',
				'console.agentDocumentsListService',
				'console.supervisorDocumentsListService',
				'console.documentsListServices',
				'console.newDashboard',
				'console.agentDashboard',
				'console.agentDocumentsList',
				'console.supervisorDashboard',
				'console.supervisorDocumentsList',
				'console.processDetails',
				'console.processDetailsServices',
				'console.documentReview',
				'console.documentReviewServices',
				'console.review',
				'console.reviewServices',
				'console.entityLinking',
				'console.entityLinkingServices',
				'console.extraction',
				'console.extractionServices',
				'console.imageCropDirective',
				'console.solution',
				'console.solutionServices',
				'console.newDashboardService',
				'console.httpPayload',
				'angularUtils.directives.dirPagination',
				'ngDialog',
				'rzModule',
				'ngMessages',
				'ngFileUpload',
				'angular-loading-bar',
				'jsonFormatter',
				'console.multiPage',
				'daterangepicker',
				'angular-jwt'
			])
	
			.run(function($http) {
				//console.log('inside run method');
	//		  localStorage.setItem('loginData',JSON.stringify({"msg": "user login successful", "sess_id": "FAKE_SESSION", "status": "success", "user": {"_id": 1, "email": "", "first_name": "", "last_name": "", "solution_id": "S2"}}));
	
			})
			.config(__webpack_require__(139))
			.config(function($interpolateProvider){
	            $interpolateProvider.startSymbol('{$');
	            $interpolateProvider.endSymbol('$}');
	
	        });
	
	})();

/***/ }),
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		__webpack_require__(76);
		__webpack_require__(79);
	    __webpack_require__(82);
	
	
		module.exports = angular.module('console.layout', [
	        'console.layout.header',
	        'console.layout.footer',
	        'console.layout.bodycontent'
		])
		.controller('layoutController', __webpack_require__(85))
			//.directive('aptLogin', require('./login.controller.js'));
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app', {
					url: '/app',
					views: {
						'pageContent@': {
							template: __webpack_require__(86),
							controller: 'layoutController',
							controllerAs: 'lyc'
						}
					}
					/*data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}*/
				});
			}]);
	
	})();

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('console.layout.header', ['ui.router'])
			.directive('header', __webpack_require__(77));
	
	})();

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = [function() {
			var headerController;
	
			headerController = function($scope, $state,$window) {
				var vm = this;
			    $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
			    $scope.solution_name = localStorage.getItem('solutionName');
	            $scope.logout =function(){
	                localStorage.clear();
	                window.location.href = "http://"+ location.host+"/logout";
	            };
	
	            $scope.goToDashboard = function(){
	               localStorage.removeItem('filterObj');
	               localStorage.removeItem('recentRecords');
	               $state.go('app.dashboard')
	            };
	
	            $scope.$on('userBroadcast', function(event, args) {
	                $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	            });
	
	            $scope.goToReview = function(){
	               localStorage.removeItem('filterObj');
	               localStorage.removeItem('recentRecords');
	               $state.go('app.documentReview')
	            };
	            $scope.navbarHeight = document.getElementsByClassName('navbar-CustomHeight').outerHeight;
	
	            $scope.goToDashboard = function(){
	                if($scope.loginData.role == "sv"){
	                    $state.go("app.supervisorDashboard");
	                }
	                else{
	                    $state.go("app.agentDashboard");
	                }
	            };
	
			};
	
	
			headerController.$inject = ['$scope', '$state','$window'];
	
			return {
				restrict: 'E',
				controller: headerController,
				controllerAs: 'hc',
				scope: {},
				bindToController: {
					menus: '='
				},
				template: __webpack_require__(78)
			};
	
		}];
	})();

/***/ }),
/* 78 */
/***/ (function(module, exports) {

	module.exports = "\n<nav class=\"navbar navbar-fixed-top\">\n  <div class=\"navbar-custom\">\n    <div class=\"navbar-header\" style=\"width:74%\">\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" ng-click=\"goToDashboard()\">\n        <div class=\"sample-image\"></div>\n        <!--<span>-->\n          <!--<img class=\"header-image\" src=\"/static/ref-app/app/images/logo.png\"/>-->\n        <!--</span><br>-->\n        <!--<span class=\"text-heading\">Powered by-->\n          <!--<img class=\"header-image2\" src=\"/static/ref-app/app/images/xpms_logo.png\"/>-->\n        <!--</span>-->\n      </a>\n\n      <a class=\"navbar-brand viewSolutions\" style=\"width: 70%;white-space: nowrap; overflow: hidden;text-overflow: ellipsis;\">\n        <div class=\"text\" style=\"font-weight:bold;cursor:auto;\" title=\"{$ solution_name $}\" alt=\"{$ solution_name $}\"> {$ solution_name $}</div>\n      </a>\n    </div>\n\n\n    <div class=\"collapse navbar-collapse\">\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li>\n          <a class=\"navbar-brand viewSolutions\" ui-sref=\"app.solution\" style=\"font-weight:bold;\">\n            View All Solutions\n          </a>\n        </li>\n        <li class=\"dropdown\">\n          <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              <img src=\"/static/ref-app/app/images/avatar.png\" alt=\"Avatar\" class=\"rounded-image\">\n          </a>\n          <ul class=\"dropdown-menu\">\n            <li>\n                <a>\n                  <img src=\"/static/ref-app/app/images/avatar.png\" alt=\"Avatar\" class=\"rounded-image\">\n                  {$ loginData.username $}\n                </a>\n              </li>\n            <li>\n              <a ng-click=\"logout()\">\n                <img src=\"/static/ref-app/app/images/logout.png\" class=\"logout-image\"/>\n                Logout\n              </a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n  <!--<div class=\"container-fluid-bottom\">-->\n      <!--<div class=\"navbar-collapse\" id=\"bs-example-navbar-collapse-1\">-->\n        <!--<ul class=\"nav navbar-nav\">-->\n          <!--<li class=\"header-items\" ng-class=\"{'bg-nav':$root.currentState==='documentsList'}\">-->\n            <!--<a ng-click=\"goToDashboard()\">Dashboard </a>-->\n          <!--</li>-->\n          <!--<li class=\"header-items\" ng-class=\"{'bg-nav':$root.currentState==='documentReview'}\">-->\n            <!--<a ng-click=\"goToReview()\" >Review Documents</a>-->\n          <!--</li>-->\n        <!--</ul>-->\n      <!--</div>-->\n  <!--</div>-->\n</nav>"

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('console.layout.footer', ['ui.router'])
			.directive('footer', __webpack_require__(80));
	
	})();

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = [function() {
			var footerController;
	
			footerController = function($scope, $state) {
				var vm = this;
	
			};
	
			footerController.$inject = ['$scope', '$state'];
	
			return {
				restrict: 'E',
				controller: footerController,
				controllerAs: 'fc',
				scope: {},
				bindToController: {
					menus: '='
				},
				template: __webpack_require__(81)
			};
	
		}];
	})();

/***/ }),
/* 81 */
/***/ (function(module, exports) {

	module.exports = "\n    <p class=\"text-muted\">\n      <span>&#x24B8;Exponential Machines - All rights reserved</span>\n    </p>\n\n"

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('console.layout.bodycontent', ['ui.router'])
			.directive('bodyContent', __webpack_require__(83));
	
	})();

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = [function() {
			var bodyContentController;
	
			bodyContentController = function($scope, $state) {
				var vm = this;
	
			};
	
			bodyContentController.$inject = ['$scope', '$state'];
	
			return {
				restrict: 'E',
				controller: bodyContentController,
				controllerAs: 'fc',
				scope: {},
				bindToController: {
					menus: '='
				},
				template: __webpack_require__(84)
			};
	
		}];
	})();

/***/ }),
/* 84 */
/***/ (function(module, exports) {

	module.exports = "<div class=\" main-content\">\n    <div ui-view=\"bodyContentContainer\">\n    </div>\n</div>\n"

/***/ }),
/* 85 */
/***/ (function(module, exports) {

	module.exports = ['$scope', '$state','$rootScope',function($scope,$state,$rootScope) {
		'use strict';
		var lc = this;
		lc.layoutMessage="layout page rendered............";
	    $scope.goToDashboard=function(){
	        $state.go("app.dashboard");
	        //$state.go('app.product.details',{id:'new'});
	    };
	
	
	}];

/***/ }),
/* 86 */
/***/ (function(module, exports) {

	module.exports = "<div>\n    <header></header>\n    <body-content></body-content>\n    <!--<footer></footer>-->\n</div>"

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	    //require('./services/module.js');
		//require('./dashboard/dashboard.module.js');
		//require('./entitygraph/entitygraph.module.js');
		//require('./solutionsetup/solutionsetup.module.js');
	
		module.exports = angular.module('console.documentsList', [
	        //'console.dashboard.entitygraph'
		    //'console.dashboard.solutionsetup'
		    //'console.layout.bodycontent.dashboard.services'
		])
	        .controller('documentsListController', __webpack_require__(88))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.documentsList', {
	                url: '/documentsList',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(89),
	                        controller: 'documentsListController',
	                        controllerAs: 'dlc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/";
	                                 }
	                              }
	
	//                              documentData: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                  var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                  var sess_id= loginData.sess_id;
	//                                  return dashboardService.getDocumentLevelData({'sess_id':sess_id,'days':'30d'});
	//                              }],
	//                              listDays: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                var sess_id= loginData.sess_id;
	//                                return dashboardService.getListDays({'sess_id':sess_id});
	//                              }],
	//                              fieldData: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                  var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                  var sess_id= loginData.sess_id;
	//                                  return dashboardService.getFieldLevelData({'sess_id':sess_id,'days':'30d'});
	//                              }],
	//                              getDocumentTypes: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                var sess_id= loginData.sess_id;
	//                                return dashboardService.getDocumentTypesList({'sess_id':sess_id});
	//                              }]
	                        }
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 88 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$compile','$rootScope','$sce','$location','documentsListService','newDashboardService', function($scope,$state,$compile,$rootScope,$sce,$location,documentsListService,newDashboardService) {
		  'use strict';
	
		  var vm = this;
	      var url = $location.path();
	      var arr = url.split("/");
	      window.scrollTo(0,0);
	      $rootScope.currentState = 'dashboard';
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	      $rootScope.inSolution = true;
	      $scope.showlist=true;
	      $scope.processListDataList = [];
	      $scope.filter_obj ={'page_no':1,'no_of_recs':8,'sort_by': 'ts', 'order_by': false,'totalRecords':0,'doc_state':'processed'};
	
	    $scope.date = {
	        startDate: moment().subtract(1, "days"),
	        endDate: moment()
	    };
	    $scope.date2 = {
	        startDate: moment().subtract(1, "days"),
	        endDate: moment()
	    };
	
	    vm.getDashboardData = function(){
	        var reqObj = {"chart_filter":"wtd","date_range":{"start_date":"","end_date":""},"charts":["tab_data"]}
	        newDashboardService.getChartData({'sess_id':vm.sess_id,data: reqObj}).then(function(data){
	               if(data.data.status=="success"){
	                     vm.tabData = data.data.data.tab_data;
	               }
	               else{
	                     $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'danger',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                     });
	               }
	        },function(err){
	           console.log(err)
	           $.UIkit.notify({
	                   message : "Internal server error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	           });
	        });
	    };
	    vm.getDashboardData();
	
	    $scope.opts = {
	        locale: {
	            applyClass: 'btn-green',
	            applyLabel: "Použít",
	            fromLabel: "Od",
	            toLabel: "Do",
	            cancelLabel: 'Zrušit',
	            customRangeLabel: 'Vlastní rozsah',
	            daysOfWeek: ['Ne', 'Po', 'Út', 'St', 'Čt', 'Pá', 'So'],
	            firstDay: 1,
	            monthNames: ['Leden', 'Únor', 'Březen', 'Duben', 'Květen', 'Červen', 'Červenec', 'Srpen', 'Září',
	                'Říjen', 'Listopad', 'Prosinec'
	            ]
	        },
	        ranges: {
	            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
	            'Last 30 Days': [moment().subtract(29, 'days'), moment()]
	        }
	    };
	    $scope.setStartDate = function () {
	        $scope.date.startDate = moment().subtract(4, "days");
	    };
	    $scope.setRange = function () {
	        $scope.date = {
	            startDate: moment().subtract(5, "days"),
	            endDate: moment()
	        };
	    };
	    //Watch for date changes
	    $scope.$watch('date', function(newDate) {
	        console.log('New date set: ', newDate);
	    }, false);
	
	      var filterObj = JSON.parse(localStorage.getItem('filterObj'));
	      var stateParam = localStorage.getItem('state');
	         if(filterObj == null || filterObj == undefined){
	            $scope.filter_obj = $scope.filter_obj;
	            $scope.filter_obj.doc_state = stateParam;
	            $scope.filter_obj.template_name = 'All Document Types';
	            $scope.filter_obj.search_string = '';
	         }else{
	           $scope.filter_obj = filterObj;
	           $scope.filter_obj.doc_state = stateParam;
	         }
	      $scope.getDocumentsList = function(){
	         var reqObj = angular.copy($scope.filter_obj);
	             delete reqObj.totalRecords;
	             if(reqObj.hasOwnProperty('current_record_no')){
	               delete reqObj.current_record_no;
	             }
	
	             if(reqObj.hasOwnProperty('template_name')){
	               if(reqObj.template_name == 'All Document Types')
	                 delete reqObj.template_name;
	             }
	             if(reqObj.hasOwnProperty('search_string')){
	               if(reqObj.search_string == '')
	                 delete reqObj.search_string;
	             }
	
	         documentsListService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':reqObj}}).then(function(data){
	                       if(data.data.status=="success"){
	                          $scope.processListData=data.data.data;
	                          $scope.processListDataList = $scope.processListData.data;
	                          $scope.filter_obj.totalRecords = data.data.data.total_count;
	                          $scope.recentRecords = [];
	                          angular.forEach($scope.processListDataList,function(value,key){
	                             var digital = false
	                            if(value.hasOwnProperty('is_digital'))
	                               digital = true;
	                            $scope.recentRecords.push({'doc_id':value.doc_id,'mime_type':value.mime_type,'is_digital':digital});
	                          });
	                          localStorage.setItem('recentRecords',JSON.stringify($scope.recentRecords))
	                          localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                       }
	         },function(err){
	            console.log(err)
	           $.UIkit.notify({
	                   message : "Internal server error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	           });
	         });
	      };
	
	      $scope.getDocumentsList();
	
	      $scope.getProcessListDetailsForEmail = function(obj,type,index,e){
	          e.stopPropagation();
	         //if((obj['Status'].value).toLowerCase() !='pending'){
	          $scope.filter_obj.current_record_no = index;
	          localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	          if(obj.hasOwnProperty("is_digital"))
	             var prop = "none";
	          else
	             var prop = "none"
	          if(type=='child')
	            $state.go("app.processDetails",{id:obj.doc_id, type:prop})
	          else{
	            if(obj.child_documents.length>0){
	              if(!obj.isExpanded){
	                  obj.spinner = true;
	                  documentsListService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':{'doc_id':obj.doc_id,'child_documents':true}}}).then(function(data){
	                       if(data.data.status=="success"){
	                          $scope.processListData=data.data.data;
	                          obj.child_documents = $scope.processListData.data;
	                          obj.isExpanded = !obj.isExpanded;
	                          obj.spinner = false;
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                       }
	                  },function(err){
	                    console.log(err)
	                   $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	                  });
	              }
	              else{
	                obj.isExpanded = !obj.isExpanded
	              }
	
	            }
	            else{
	             $state.go("app.processDetails",{id:obj.doc_id, type:prop})
	            }
	          }
	        //}
	      };
	
	      $scope.stateChange = function(obj,type,index){
	          $scope.filter_obj.current_record_no = index;
	          localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	          if(obj.hasOwnProperty("is_digital"))
	                var prop = "none";
	          else if(obj.mime_type == "email")
	                var prop = obj.mime_type;
	          else
	                var prop = "none";
	          if(type=='child')
	                $state.go("app.review",{id:obj.doc_id, type:prop})
	          else{
	                if(obj.child_documents.length>0 && obj.mime_type != "email"){
	                      if(!obj.isExpanded){
	                          obj.spinner = true;
	                          documentsListService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':{'doc_id':obj.doc_id,'child_documents':true}}}).then(function(data){
	                               if(data.data.status=="success"){
	                                  $scope.processListData=data.data.data;
	                                  obj.child_documents = $scope.processListData.data;
	                                  obj.isExpanded = !obj.isExpanded;
	                                  obj.spinner = false;
	                               }
	                               else{
	                                 $.UIkit.notify({
	                                           message : data.data.msg,
	                                           status  : 'danger',
	                                           timeout : 3000,
	                                           pos     : 'top-center'
	                                 });
	                               }
	                          },function(err){
	                            console.log(err)
	                            $.UIkit.notify({
	                                   message : "Internal server error",
	                                   status  : 'warning',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                            });
	                          });
	                      }
	                      else{
	                            obj.isExpanded = !obj.isExpanded
	                      }
	
	                }
	                else{
	                    $state.go("app.review",{id:obj.doc_id, type:prop})
	                }
	          }
	      };
	
	      $scope.getProcessListDetails =function(obj,type,index){
	            if($scope.filter_obj.doc_state == 'processing'){
	            }
	            else if($scope.filter_obj.doc_state == 'classified'){
	                $state.go("app.multiPage",{id:obj.doc_id})
	            }
	            else if($scope.filter_obj.doc_state == 'extracted'){
	                $state.go("app.extraction",{id:obj.doc_id,type:'none'})
	            }
	            else if($scope.filter_obj.doc_state == 'entity_linked'){
	                $state.go("app.entityLinking",{id:obj.doc_id,type:'none'})
	            }
	
	            else{
	                if(obj.extn != "email"){
	                    if(obj.is_failed==undefined)
	                       $scope.stateChange(obj,type,index);
	                    else{
	                       if(!obj.is_failed)
	                         $scope.stateChange(obj,type,index);
	                    }
	                }
	                else{
	                    $state.go("app.review",{id:obj.doc_id, type:"email"})
	                }
	            }
	
	      };
	
	      $scope.pageChanged = function(newPage) {
	        $scope.filter_obj.page_no = newPage;
	        $scope.getDocumentsList();
	      };
	
	    $scope.sort = {
	        column: 'updated_ts',
	        descending: false
	    };
	
	
	    $scope.selectedCls = function(column) {
	        return column == $scope.sort.column && 'sort-' + $scope.sort.descending;
	    };
	
	    $scope.changeSorting = function(column) {
	        var sort = $scope.sort;
	        if (sort.column == column) {
	            sort.descending = !sort.descending;
	        } else {
	            sort.column = column;
	            sort.descending = false;
	        }
	
	        $scope.filter_obj.sort_by = column;
	        $scope.filter_obj.order_by = sort.descending;
	        if(column == 'mime_type'){
	          $scope.filter_obj.sort_by = 'metadata.mime_type'
	        }
	        $scope.getDocumentsList();
	
	    };
	
	    $scope.changeDocState = function(type){
	        $scope.filter_obj.doc_state = type;
	        localStorage.setItem('state',type);
	        $scope.getDocumentsList();
	    };
	
	    $scope.getDocumentTypes = function () {
	        documentsListService.getDocumentTypesList({'sess_id':vm.sess_id}).then(function (data) {
	            if(data.data.status=='success'){
	                $scope.listOfDocumentTypes = data.data.doc_types;
	                $scope.listOfDocumentTypes.unshift({'template_name':'All Document Types'});
	            }
	            else{
	                $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                });
	            }
	        },function (err) {
	            $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	            });
	        })
	    };
	
	    $scope.getDocumentTypes();
	
	    $scope.keyEnter = function (event) {
	       if(event.which === 13) {
	           $scope.getDocumentsList();
	       }
	       if($scope.filter_obj.search_string == '')
	         $scope.getDocumentsList();
	    };
	
	    $scope.clearSearch = function () {
	        $scope.filter_obj.search_string = '';
	        $scope.getDocumentsList();
	    };
	    $scope.goToClassification = function (row) {
	        $state.go('app.multiPage',{id:row.doc_id});
	    };
	
	    var chart = c3.generate({
	        data: {
	        columns: [
	                    ['data1', 30, 200, 100, 400, 150, 250],
	                    ['data2', 50, 20, 10, 40, 15, 25]
	                ]
	            }
	    });
	    $scope.filter_obj.doc_state = localStorage.getItem('state');
	    vm.showReviewBtn = [];
	    vm.showReviewBtnChild = [];
	
	    $scope.highlightBtn = function(index){
	        vm.showReviewBtn = [];
	        vm.showReviewBtn[index] = true;
	    };
	
	    $scope.removeBtn = function(){
	        vm.showReviewBtn = [];
	    };
	
	    $scope.highlightBtnChild = function(index){
	        vm.showReviewBtnChild = [];
	        vm.showReviewBtnChild[index] = true;
	    };
	
	    $scope.removeBtnChild = function(){
	        vm.showReviewBtnChild = [];
	    };
	
	    $scope.monthShort = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
	
	    $scope.formatDateInList = function(ts){
	       var date = new Date();
	       var tsDate = new Date(ts);
	       var currentDate = date.getMonth() + "-" + date.getDate() + "-" + date.getYear();
	       var yestrdyDate = date.getMonth() + "-" + (date.getDate()-1) + "-" + date.getYear();
	       var updatedTs = tsDate.getMonth() + "-" + tsDate.getDate() + "-" + tsDate.getYear();
	       if(currentDate == updatedTs){
	           if(tsDate.getHours()<12){
	               return tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "AM";
	           }
	           else{
	               if(tsDate.getHours()==12)
	                   return tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "PM";
	               else
	                   return (tsDate.getHours()-12)+':'+tsDate.getMinutes()+" "+ "PM";
	           }
	       }
	       else if(yestrdyDate == updatedTs){
	           if(tsDate.getHours()<12)
	               return 'Yesterday @ '+tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "AM";
	           else{
	               if(tsDate.getHours()==12)
	                   return 'Yesterday @ '+tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "PM";
	               else
	                   return 'Yesterday @ '+(tsDate.getHours()-12)+':'+tsDate.getMinutes()+" "+ "PM";
	           }
	       }
	       else{
	           if(tsDate.getHours()<12)
	               return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+tsDate.getHours()+' '+'AM';
	           else{
	               if(tsDate.getHours()==12)
	                   return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+tsDate.getHours()+' '+'PM';
	               else
	                   return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+(tsDate.getHours()-12)+' '+'PM';
	           }
	       }
	    };
	
	}];

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	module.exports = "\n<!--<div class=\"custom-header\">-->\n    <!--<div class=\"row\">-->\n      <!--<div class=\"col-lg-8 col-sm-8 col-md-8\">-->\n        <!--<div class=\"btn-group\">-->\n          <!--&lt;!&ndash;<span class=\"documentsList-Text\">Type</span>&ndash;&gt;-->\n          <!--&lt;!&ndash;<select class=\"select-style form-control\" ng-model=\"selectedObj.val\"  ng-change=\"changeReview(selectedObj.val)\">&ndash;&gt;-->\n              <!--&lt;!&ndash;<option value=\"processed\" ng-selected=\"true\">All Documents</option>&ndash;&gt;-->\n\n            <!--&lt;!&ndash;</select>&ndash;&gt;-->\n            <!--<ul class=\"nav nav-tabs nav-reviewTabs\" style=\"padding-top:10px;\">-->\n                <!--<li ng-class=\"filter_obj.doc_state=='classified'?'active':''\"><a data-toggle=\"tab\" href=\".classified\" ng-click=\"changeDocState('classified')\">Need Classification</a></li>-->\n                <!--<li ng-class=\"filter_obj.doc_state=='processing'?'active':''\"><a data-toggle=\"tab\" href=\".processing\" ng-click=\"changeDocState('processing')\">Processing</a></li>-->\n                <!--<li ng-class=\"filter_obj.doc_state=='processed'?'active':''\"><a data-toggle=\"tab\" href=\".processed\" ng-click=\"changeDocState('processed')\">Processed</a></li>-->\n                <!--<li ng-class=\"filter_obj.doc_state=='reviewed'?'active':''\"><a data-toggle=\"tab\" href=\".reviewed\" ng-click=\"changeDocState('reviewed')\">Reviewed</a></li>-->\n\n              <!--</ul>-->\n        <!--</div>-->\n\n        <!--<div class=\"btn-group header-Style\">-->\n          <!--<p class=\"documentsList-Text\">Filter by</p>-->\n          <!--<select class=\"select-smallStyle form-control\" ng-model=\"filter_obj.template_name\" ng-change=\"getDocumentsList()\">-->\n            <!--<option ng-repeat=\"(key,value) in listOfDocumentTypes track by $index\" ng-selected=\"documentType.val == value.template_name\" value=\"{$  value.template_name $}\">{$  value.template_name $}</option>-->\n          <!--</select>-->\n        <!--</div>-->\n      <!--</div>-->\n      <!--<div class=\"col-lg-4 col&#45;&#45;sm-4 col-md-4\">-->\n        <!--<div class=\"input-group topSpace\">-->\n          <!--<input type=\"search\" ng-model=\"filter_obj.search_string\"  class=\"newcustom-form form-control\" placeholder=\"Search by\" ng-keyup=\"keyEnter($event)\">-->\n            <!--<span class=\"glyphicon glyphicon-remove-circle searchclear\" ng-click=\"clearSearch()\"></span>-->\n            <!--&lt;!&ndash;ng-keypress=\"keyEnter($event)\"&ndash;&gt;-->\n          <!--<span class=\"input-group-btn\">-->\n            <!--<button class=\"btn btn-newStyle\" ng-click=\"getDocumentsList()\" type=\"button\"><i class=\"fa fa-search\"></i></button>-->\n          <!--</span>-->\n        <!--</div>-->\n      <!--</div>-->\n    <!--</div>-->\n<!--</div>-->\n<!--<div class=\"tab-content\">-->\n        <!--<div class=\"tab-pane fade classified\" ng-class=\"filter_obj.doc_state=='classified'?'in active':''\">-->\n       <!--<div class=\"row\">-->\n    <!--<div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">-->\n        <!--<div class=\"table-scroll\" ng-show=\"showlist\" style=\"margin-top:15px;\">-->\n            <!--<table class=\"table table-responsive table-hovered\">-->\n                <!--<thead class=\"tableHeading\">-->\n                <!--<th ng-repeat=\"heading in processListData.config\" ng-click=\"changeSorting(heading.key)\">{$ heading.value $} <div class=\"alignSort\" ng-class=\"selectedCls(heading.key)\"></div></th>-->\n                <!--</thead>-->\n                <!--<tbody dir-paginate=\"row in processListDataList |itemsPerPage:filter_obj.no_of_recs\" total-items=\"filter_obj.totalRecords\" current-page=\"filter_obj.page_no\" pagination-id=\"branchPagination\"  style=\"cursor:pointer\">-->\n                    <!--<tr ng-click=\"goToClassification(row)\">-->\n                        <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                          <!--&lt;!&ndash;<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i ng-show=\"row.isExpanded\" class=\"fa fa-chevron-down\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                            <!--<i ng-show=\"!row.isExpanded\" class=\"fa fa-chevron-right\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                          <!--</span>&ndash;&gt;-->\n                            <!--<span>{$ row[heading.key] $}</span>-->\n                          <!--<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"row.spinner\"aria-hidden=\"true\"></i>-->\n\n                          <!--</span>-->\n                        <!--</td>-->\n                    <!--</tr>-->\n\n                        <!--<tr ng-repeat=\"dummy in row.child_documents\" ng-show=\"row.isExpanded && row.child_documents.length>0 \" ng-click=\"getProcessListDetails(dummy,'child',$parent.$index)\" style=\"    border: 1px solid black;-->\n    <!--background-color: #ebedef;\">-->\n                            <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                                <!--<span>{$ dummy[heading.key] $}</span>-->\n                            <!--</td>-->\n\n                        <!--</tr>-->\n\n                <!--</tbody>-->\n            <!--</table>-->\n            <!--<div class=\"right\">-->\n                <!--<dir-pagination-controls max-size=filter_obj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>-->\n            <!--</div>-->\n        <!--</div>-->\n    <!--</div>-->\n<!--</div>-->\n    <!--</div>-->\n    <!--<div class=\"tab-pane fade processing\" ng-class=\"filter_obj.doc_state=='processing'?'in active':''\">-->\n       <!--<div class=\"row\">-->\n    <!--<div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">-->\n        <!--<div class=\"table-scroll\" ng-show=\"showlist\" style=\"margin-top:15px;\">-->\n            <!--<table class=\"table table-responsive table-hovered\">-->\n                <!--<thead class=\"tableHeading\">-->\n                <!--<th ng-repeat=\"heading in processListData.config\" ng-click=\"changeSorting(heading.key)\">{$ heading.value $} <div class=\"alignSort\" ng-class=\"selectedCls(heading.key)\"></div></th>-->\n                <!--</thead>-->\n                <!--<tbody dir-paginate=\"row in processListDataList |itemsPerPage:filter_obj.no_of_recs\" total-items=\"filter_obj.totalRecords\" current-page=\"filter_obj.page_no\" pagination-id=\"branchPagination\"  style=\"cursor:pointer\">-->\n                    <!--<tr ng-click=\"getProcessListDetails(row,'parent',$index)\">-->\n                        <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                          <!--<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i ng-show=\"row.isExpanded\" class=\"fa fa-chevron-down\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                            <!--<i ng-show=\"!row.isExpanded\" class=\"fa fa-chevron-right\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                          <!--</span>-->\n                            <!--<span>{$ row[heading.key] $}</span>-->\n                          <!--<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"row.spinner\"aria-hidden=\"true\"></i>-->\n\n                          <!--</span>-->\n                        <!--</td>-->\n                    <!--</tr>-->\n\n                        <!--<tr ng-repeat=\"dummy in row.child_documents\" ng-show=\"row.isExpanded && row.child_documents.length>0 \" ng-click=\"getProcessListDetails(dummy,'child',$parent.$index)\" style=\"    border: 1px solid black;-->\n    <!--background-color: #ebedef;\">-->\n                            <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                                <!--<span>{$ dummy[heading.key] $}</span>-->\n                            <!--</td>-->\n\n                        <!--</tr>-->\n\n                <!--</tbody>-->\n            <!--</table>-->\n            <!--<div class=\"right\">-->\n                <!--<dir-pagination-controls max-size=filter_obj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>-->\n            <!--</div>-->\n        <!--</div>-->\n    <!--</div>-->\n<!--</div>-->\n    <!--</div>-->\n    <!--<div class=\"tab-pane fade  processed\" ng-class=\"filter_obj.doc_state=='processed'?'in active':''\">-->\n        <!--<div class=\"row\">-->\n    <!--<div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">-->\n        <!--<div class=\"table-scroll\" ng-show=\"showlist\" style=\"margin-top:15px;\">-->\n            <!--<table class=\"table table-responsive table-hovered\">-->\n                <!--<thead class=\"tableHeading\">-->\n                <!--<th ng-repeat=\"heading in processListData.config\" ng-click=\"changeSorting(heading.key)\">{$ heading.value $} <div class=\"alignSort\" ng-class=\"selectedCls(heading.key)\"></div></th>-->\n                <!--</thead>-->\n                <!--<tbody dir-paginate=\"row in processListDataList |itemsPerPage:filter_obj.no_of_recs | filter:searchValue\" total-items=\"filter_obj.totalRecords\" current-page=\"filter_obj.page_no\" pagination-id=\"branchPagination\"  style=\"cursor:pointer\">-->\n                    <!--<tr ng-click=\"getProcessListDetails(row,'parent',$index)\">-->\n                        <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                          <!--<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i ng-show=\"row.isExpanded\" class=\"fa fa-chevron-down\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                            <!--<i ng-show=\"!row.isExpanded\" class=\"fa fa-chevron-right\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                          <!--</span>-->\n                            <!--<span>{$ row[heading.key] $}</span>-->\n                          <!--<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"row.spinner\"aria-hidden=\"true\"></i>-->\n\n                          <!--</span>-->\n                        <!--</td>-->\n                    <!--</tr>-->\n\n                        <!--<tr ng-repeat=\"dummy in row.child_documents\" ng-show=\"row.isExpanded && row.child_documents.length>0 \" ng-click=\"getProcessListDetails(dummy,'child',$parent.$index)\" style=\"    border: 1px solid black;-->\n    <!--background-color: #ebedef;\">-->\n                            <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                                <!--<span>{$ dummy[heading.key] $}</span>-->\n                            <!--</td>-->\n\n                        <!--</tr>-->\n\n                <!--</tbody>-->\n            <!--</table>-->\n            <!--<div class=\"right\">-->\n                <!--<dir-pagination-controls max-size=filter_obj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>-->\n            <!--</div>-->\n        <!--</div>-->\n    <!--</div>-->\n<!--</div>-->\n    <!--</div>-->\n    <!--<div class=\"tab-pane fade reviewed\" ng-class=\"filter_obj.doc_state=='reviewed'?'in active':''\">-->\n         <!--<div class=\"row\">-->\n    <!--<div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">-->\n        <!--<div class=\"table-scroll\" ng-show=\"showlist\" style=\"margin-top:15px;\">-->\n            <!--<table class=\"table table-responsive table-hovered\">-->\n                <!--<thead class=\"tableHeading\">-->\n                <!--<th ng-repeat=\"heading in processListData.config\" ng-click=\"changeSorting(heading.key)\">{$ heading.value $} <div class=\"alignSort\" ng-class=\"selectedCls(heading.key)\"></div></th>-->\n                <!--</thead>-->\n                <!--<tbody dir-paginate=\"row in processListDataList |itemsPerPage:filter_obj.no_of_recs | filter:searchValue\" total-items=\"filter_obj.totalRecords\" current-page=\"filter_obj.page_no\" pagination-id=\"branchPagination\"  style=\"cursor:pointer\">-->\n                    <!--<tr ng-click=\"getProcessListDetails(row,'parent',$index)\">-->\n                        <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                          <!--<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i ng-show=\"row.isExpanded\" class=\"fa fa-chevron-down\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                            <!--<i ng-show=\"!row.isExpanded\" class=\"fa fa-chevron-right\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>-->\n                          <!--</span>-->\n                            <!--<span>{$ row[heading.key] $}</span>-->\n                          <!--<span ng-show=\"row.child_documents.length>0 && $index==0\">-->\n                            <!--<i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"row.spinner\"aria-hidden=\"true\"></i>-->\n\n                          <!--</span>-->\n                        <!--</td>-->\n                    <!--</tr>-->\n\n                        <!--<tr ng-repeat=\"dummy in row.child_documents\" ng-show=\"row.isExpanded && row.child_documents.length>0 \" ng-click=\"getProcessListDetails(dummy,'child',$parent.$index)\" style=\"    border: 1px solid black;-->\n    <!--background-color: #ebedef;\">-->\n                            <!--<td ng-repeat=\"heading in processListData.config\" >-->\n                                <!--<span>{$ dummy[heading.key] $}</span>-->\n                            <!--</td>-->\n\n                        <!--</tr>-->\n\n                <!--</tbody>-->\n            <!--</table>-->\n            <!--<div class=\"right\">-->\n                <!--<dir-pagination-controls max-size=filter_obj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>-->\n            <!--</div>-->\n        <!--</div>-->\n    <!--</div>-->\n<!--</div>-->\n    <!--</div>-->\n\n<!--</div>-->\n\n\n\n<section>\n\t\t<div class=\"container-fluid no-padding listPage\">\n\t\t\t<div class=\"row row-eq-height\">\n\t\t\t\t<div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 no-padding\" id=\"leftMenu\" style=\"background-color:white;\">\n\n                        <ul class=\"nav nav-pills nav-stacked nav-reviewTabs\">\n                            <li ng-repeat=\"list in dlc.tabData\" ng-class=\"filter_obj.doc_state==list.state?'active':''\"><a ng-click=\"changeDocState(list.state)\">{$ list.display $}</a></li>\n                        </ul>\n\n                        <!--<button class=\"tab btn btn-block\" data-target=\"#demo\" data-toggle=\"collapse\" id=\"tabLinks\">To be Classified</button><br>-->\n                        <!--<button class=\"tab btn btn-block\" id=\"tabLinks\">Processing</button><br>-->\n                        <!--<button class=\"tab btn btn-block\" id=\"tabLinks\">Extraction</button><br>-->\n                        <!--<button class=\"tab btn btn-block\" id=\"tabLinks\">post processing</button><br>-->\n                        <!--<button class=\"tab btn btn-block\" id=\"tabLinks\">Final QA</button><br>-->\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-lg-10 col-sm-10 col-md-10 col-xs-10 description no-padding\" id=\"rightData\">\n                    <div class=\"row\">\n                        <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\">\n                            <h4 ui-sref=\"app.newDashboard\" style=\"font-size: 14px;color: #7d7d7d;text-decoration: underline;\">Home</h4>\n                        </div>\n                        <div class=\"col-lg-3 col-sm-3 col-md-3 col-xs-3\">\n                            <div class=\"input-group topSpace\">\n                                <input type=\"search\" ng-model=\"filter_obj.search_string\"  class=\"form-control\" placeholder=\"Search by\" ng-keyup=\"keyEnter($event)\" style=\"border:none;\">\n                                <!--<span class=\"glyphicon glyphicon-remove-circle searchclear\" ng-click=\"clearSearch()\"></span>-->\n\n                                  <span class=\"input-group-btn\">\n                                    <button class=\"btn btn-newStyle\" ng-click=\"getDocumentsList()\" type=\"button\"><i class=\"fa fa-search\"></i></button>\n                                  </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"tab-content\">\n                        <div class=\"tab-pane fade in active processed\" >\n                            <div class=\"row\">\n                                <div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">\n                                    <div class=\"table-scroll\" ng-show=\"showlist\" style=\"margin-top:15px;\">\n                                        <table class=\"table table-responsive table-hovered\">\n                                            <thead class=\"tableHeading\">\n                                            <th ng-repeat=\"heading in processListData.config\" class=\"docListHeadStyle\" ng-click=\"changeSorting(heading.key)\">{$ heading.value $} <div class=\"alignSort\" ng-class=\"selectedCls(heading.key)\"></div></th>\n                                            </thead>\n                                            <tbody class=\"tableBody\" dir-paginate=\"row in processListDataList |itemsPerPage:filter_obj.no_of_recs | filter:searchValue\" total-items=\"filter_obj.totalRecords\" current-page=\"filter_obj.page_no\" pagination-id=\"branchPagination\"  style=\"cursor:pointer\">\n                                                <tr ng-click=\"getProcessListDetails(row,'parent',$index)\" ng-mouseover=\"highlightBtn($index)\" ng-mouseleave=\"removeBtn()\" ng-class=\"filter_obj.doc_state!='processing'?'processedRowHover':''\">\n                                                    <td ng-repeat=\"heading in processListData.config\" ng-class=\" processListData.config.length==$index+1?'emptyPadding':''\">\n                                                      <span ng-show=\"row.child_documents.length>0 && $index==0\">\n                                                        <i ng-show=\"row.isExpanded\" class=\"fa fa-chevron-down\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>\n                                                        <i ng-show=\"!row.isExpanded\" class=\"fa fa-chevron-right\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>\n                                                      </span>\n                                                        <span ng-if=\"heading.key == 'updated_ts'\">{$ formatDateInList(row[heading.key]) $}</span>\n                                                        <span ng-if=\"heading.key != 'review_text' && heading.key != 'updated_ts'\">\n                                                            <span ng-show=\"heading.key == 'file_name' && row.is_failed==undefined\">{$ row[heading.key] $}\n                                                            </span>\n                                                            <span ng-show=\"heading.key == 'file_name' && row.is_failed!=undefined\">\n                                                                <span ng-show=\"heading.key == 'file_name' && row.is_failed\" style=\"color:red\">\n                                                                {$ row[heading.key] $}\n                                                                </span>\n                                                                <span ng-show=\"heading.key == 'file_name' && !row.is_failed\" >{$ row[heading.key] $}\n                                                                </span>\n                                                            </span>\n                                                            <span ng-show=\"heading.key != 'file_name'\">{$ row[heading.key] $}</span>\n                                                        </span>\n\n                                                        <div ng-show=\"heading.key == 'review_text' && row.is_failed==undefined\"><button class=\"btn\" ng-if=\"heading.key == 'review_text' && dlc.showReviewBtn[$parent.$index] && row[heading.key]!='' && row.child_documents.length==0\"  style=\"background: white;border-radius: 17px;\">{$ row[heading.key] $}</button></div>\n                                                        <div ng-show=\"heading.key == 'review_text' && row.is_failed!=undefined\">\n\n                                                            <div ng-show=\"heading.key == 'review_text' && !row.is_failed\">\n\n                                                                <button class=\"btn\" ng-show=\"heading.key == 'review_text' && dlc.showReviewBtn[$parent.$index] && row[heading.key]!='' && row.child_documents.length==0\"  style=\"background: white;border-radius: 17px;\">{$ row[heading.key] $}</button>\n                                                            </div>\n                                                            <div ng-show=\"heading.key == 'review_text' && row.is_failed\">\n\n                                                                <span ng-show=\"heading.key == 'review_text' && dlc.showReviewBtn[$parent.$index] && row[heading.key]!='' && row.child_documents.length==0\" ><img src=\"./static/ref-app/app/images/triangle.png\"/> <span style=\"color:red;\">{$ row[heading.key] $}</span></span>\n                                                            </div>\n                                                        </div>\n                                                      <span ng-show=\"row.child_documents.length>0 && $index==0\">\n                                                        <i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"row.spinner\"aria-hidden=\"true\"></i>\n\n                                                      </span>\n                                                    </td>\n                                                </tr>\n\n\n                                                    <tr ng-repeat=\"dummy in row.child_documents\" ng-show=\"row.isExpanded && row.child_documents.length>0 \" ng-click=\"getProcessListDetails(dummy,'child',$parent.$index)\"  ng-mouseover=\"highlightBtnChild($index)\" ng-mouseleave=\"removeBtnChild()\" ng-class=\"filter_obj.doc_state!='processing'?'processedRowHover':''\" style=\"    border: 1px solid black;\n                                background-color: #ebedef;\">\n                                                        <td ng-repeat=\"heading in processListData.config\"  ng-class=\" processListData.config.length==$index+1?'emptyPadding':''\">\n                                                            <span ng-if=\"heading.key == 'updated_ts'\">{$ formatDateInList(dummy[heading.key]) $}</span>\n                                                            <span ng-if=\"heading.key != 'review_text' && heading.key != 'updated_ts'\"><span ng-show=\"heading.key == 'file_name' && dummy.is_failed==undefined\">{$ dummy[heading.key] $}</span>\n                                                            <span ng-show=\"heading.key == 'file_name' && dummy.is_failed!=undefined\">\n                                                                <span ng-show=\"heading.key == 'file_name' && dummy.is_failed\" style=\"color:red\">\n                                                                {$ dummy[heading.key] $}\n                                                                </span>\n                                                                <span ng-show=\"heading.key == 'file_name' && !dummy.is_failed\" >{$ dummy[heading.key] $}\n                                                                </span>\n\n                                                            </span>\n                                                                <span ng-show=\"heading.key != 'file_name'\">{$ dummy[heading.key] $}</span>\n                                                        </span>\n                                                            <div ng-show=\"heading.key == 'review_text' && dummy.is_failed==undefined\"><button class=\"btn\" ng-if=\"heading.key == 'review_text' && dlc.showReviewBtnChild[$parent.$index] && dummy[heading.key]!=''\" style=\"background: white;border-radius: 17px;\">{$ dummy[heading.key] $}</button></div>\n                                                            <div ng-show=\"heading.key == 'review_text' && dummy.is_failed!=undefined\">\n\n                                                            <div ng-show=\"heading.key == 'review_text' && !dummy.is_failed\">\n                                                                <button class=\"btn\" ng-if=\"heading.key == 'review_text' && dlc.showReviewBtnChild[$parent.$index] && dummy[heading.key]!=''\" style=\"background: white;border-radius: 17px;\">{$ dummy[heading.key] $}</button>\n\n                                                            </div>\n                                                            <div ng-show=\"heading.key == 'review_text' && dummy.is_failed\">\n                                                                <span ng-show=\"heading.key == 'review_text' && dlc.showReviewBtnChild[$parent.$index] && dummy[heading.key]!=''\" ><img src=\"./static/ref-app/app/images/triangle.png\"/> <span style=\"color:red\">{$ dummy[heading.key] $}</span></span>\n                                                            </div>\n                                                        </div>\n                                                        </td>\n\n                                                    </tr>\n\n                                            </tbody>\n                                        </table>\n                                        <div class=\"right\">\n                                            <dir-pagination-controls max-size=filter_obj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\t</section>"

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
	
		module.exports = angular.module('console.newDashboard', [
	
		])
	        .controller('newDashBoardController', __webpack_require__(91))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.newDashboard', {
	                url: '/dashboard',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(92),
	                        controller: 'newDashBoardController',
	                        controllerAs: 'ndbc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/";
	                                 }
	                              }
	
	//                              documentData: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                  var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                  var sess_id= loginData.sess_id;
	//                                  return dashboardService.getDocumentLevelData({'sess_id':sess_id,'days':'30d'});
	//                              }],
	//                              listDays: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                var sess_id= loginData.sess_id;
	//                                return dashboardService.getListDays({'sess_id':sess_id});
	//                              }],
	//                              fieldData: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                  var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                  var sess_id= loginData.sess_id;
	//                                  return dashboardService.getFieldLevelData({'sess_id':sess_id,'days':'30d'});
	//                              }],
	//                              getDocumentTypes: ['$stateParams', 'dashboardService', function($stateParams, dashboardService){
	//                                var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                var sess_id= loginData.sess_id;
	//                                return dashboardService.getDocumentTypesList({'sess_id':sess_id});
	//                              }]
	                        }
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$compile','$timeout', '$rootScope','$sce','$location','newDashboardService', function($scope,$state,$compile,$timeout,$rootScope,$sce,$location,newDashboardService) {
		  'use strict';
	
		  var vm = this;
	      var url = $location.path();
	      var arr = url.split("/");
	      window.scrollTo(0,0);
	      $rootScope.currentState = 'newDashboard';
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	      $scope.date = {
	       startDate: moment().subtract(1, "days"),
	       endDate: moment()
	     };
	     $scope.date1 = {
	       startDate: moment().subtract(1, "days"),
	       endDate: moment()
	     };
	     $scope.date2 = {
	       startDate: moment().subtract(1, "days"),
	       endDate: moment()
	     };
	
	     vm.cardLength = 4;
	     $('.carousel').carousel({
	        interval: false
	    });
	
	     var chart1 = c3.generate({
	        bindto: "#chart1",
	        data: {
	            columns: [
	                    ['data1', 30, 200, 100, 400, 150, 250],
	                    ['data2', 50, 20, 10, 40, 15, 25]
	            ]
	        }
	     });
	
	     var chart2 = c3.generate({
	        bindto: "#chart2",
	        data: {
	            columns: [
	                    ['data1', 30, 200, 100, 400, 150, 250],
	                    ['data2', 50, 20, 10, 40, 15, 25]
	            ]
	        }
	     });
	
	    vm.generateGraph = function(){
	        var chart = c3.generate({
	            bindto: "#chart",
	            data: {
	                x : 'x',
	                columns: vm.columnValues,
	                colors: vm.colorKeys
	            },
	            axis: {
	                x: {
	                    type: 'category',
	                    tick: {
	                        rotate: 90,
	                        multiline: false
	                    }
	                }
	            }
	        });
	    };
	
	
	    vm.callGenerateDocumentGraph = function(data){
	        vm.graphDataForStats = data.data.data.graph.document_summary.stats;
	        vm.graphValues = data.data.data.graph.document_summary.graph;
	        vm.columnValues = [];
	        vm.colorKeys = {};
	
	        angular.forEach(vm.graphValues,function(value,key){
	            if(key=="labels"){
	                value.unshift("x");
	                vm.columnValues.push(value);
	                console.log(value);
	            }
	            else{
	
	                if(key=="processed"){
	                    value.unshift('Post Processing');
	                    vm.colorKeys['Post Processing'] = "#94c856";
	                }
	                if(key=="processing"){
	                    value.unshift('Processing');
	                    vm.colorKeys['Processing'] = "#f7c36b";
	                }
	                if(key=="reviewed"){
	                    value.unshift('Reviewed');
	                    vm.colorKeys['Reviewed'] = "#53b3fc";
	                }
	                if(key=="failed"){
	                    value.unshift('Error');
	                    vm.colorKeys['Error'] = "#df5162";
	                }
	                vm.columnValues.push(value);
	            }
	        });
	        vm.generateGraph();
	    };
	
	    vm.getDashboardData = function(type){
	        newDashboardService.getChartData({'sess_id':vm.sess_id,data: vm.filterObj}).then(function(data){
	               if(data.data.status=="success"){
	                    if(type == "all"){
	                        vm.tabData = data.data.data.tab_data;
	                        vm.individualData = [];
	                        for(var i=0;i<vm.tabData.length/vm.cardLength;i++){
	                            vm.individualData[i] = [];
	                        };
	                        for(var i=0;i<vm.tabData.length;i++){
	                            for(var j=0;j<vm.individualData.length;j++){
	                               if(vm.individualData[j].length < vm.cardLength){
	                                     vm.individualData[j].push(vm.tabData[i]);
	                                     break;
	                               }
	                            }
	                        }
	                        console.log(vm.individualData);
	                        vm.callGenerateDocumentGraph(data);
	                    }
	                    else if(type == "documentChart"){
	                        vm.callGenerateDocumentGraph(data);
	                    }
	               }
	               else{
	                     $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'danger',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                     });
	               }
	        },function(err){
	           console.log(err)
	           $.UIkit.notify({
	                   message : "Internal server error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	           });
	        });
	    };
	    vm.filterObj = {"chart_filter":"wtd","date_range":{"start_date":"","end_date":""},"charts":["tab_data","document"]};
	    vm.getDashboardData("all");
	    $scope.activeDate = [];
	    $scope.activeDate[0] = "activeDateCss";
	
	    $scope.filterGraphWithDate = function(type,index){
	        $scope.activeDate = [];
	        $scope.activeDate[index] = "activeDateCss";
	        vm.filterObj = {"chart_filter":type,"charts":["document"]}
	        vm.getDashboardData("documentChart");
	    };
	
	     $scope.convertDate = function (date) {
	         var date = new Date(date);
	         var year = date.getFullYear();
	         var month = date.getMonth() + 1;
	         var day = date.getDate();
	         var hour = date.getHours();
	         var minute = date.getMinutes();
	         var sec = date.getSeconds();
	         if(month<10){
	           month = '0'+month;
	         }
	         if(day<10){
	           day = '0'+day;
	         }
	         var format = year+'-'+month+'-'+day;
	         return format;
	
	     };
	
	    $scope.filterWithDocumentDate = function(){
	//        $scope.date = {
	//           startDate: moment().subtract(1, "days"),
	//           endDate: moment()
	//        };
	
	        $scope.activeDate = [];
	        vm.filterObj = {"date_range":{"start_date":$scope.convertDate($scope.date.startDate),"end_date":$scope.convertDate($scope.date.endDate)},"charts":["document"],"chart_filter":"custom"};
	        vm.getDashboardData("documentChart");
	        console.log("data"+JSON.stringify($scope.date));
	    };
	
	    vm.documentDashboard = function(param){
	        localStorage.setItem('state',param);
	        $state.go("app.documentsList");
	    };
	
	    var initializing = true;
	
	    $scope.$watch('date', function(newDate) {
	        if (initializing) {
	            $timeout(function() { initializing = false; });
	        }
	        else{
	            console.log('New date set: ', newDate);
	            $scope.filterWithDocumentDate();
	        }
	    }, false);
	
	
	}];

/***/ }),
/* 92 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"dashboard-style\">\n    <div class=\"row customDashboardStyle\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3 customColumn\" ng-repeat=\"arr in ndbc.tabData\" ng-click=\"ndbc.documentDashboard(arr.state)\" ng-class=\"$index==0 ? 'Header-Style1 no-padding':'Header-Style'\" >\n           <div class=\"row\">\n               <div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">\n                   <h4>{$ arr.display $}</h4>\n                   <span>{$ arr.description $}</span>\n               </div>\n           </div>\n            <br>\n            <div class=\"row\">\n                <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                    <label class=\"labelHeading\">Accuracy</label>\n                    <img src=\"/static/ref-app/app/images/excellent.png\"/>\n                    <span class=\"accuracy\">Excellent</span>\n                    <span>{$ arr.Accuracy $}</span>\n                </div>\n                <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding text-center\">\n                    <label class=\"labelHeading\">Avg Time in Queue</label>\n                    <label style=\"font-size:20px;font-weight: 400;margin-top: 10px;color: #928282;\">{$ arr.time_in_queue $} min</label>\n                </div>\n                <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                    <label class=\"labelHeading\">Docs in Queue</label>\n                    <span style=\"font-size: 35px;color: #928282;\">{$ arr.queue $}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!--<div class=\"carousel slide imageCarousel\" data-ride=\"carousel\">-->\n        <!--<div class=\"carousel-inner\">-->\n           <!--<div class=\"item\" ng-repeat=\"data in ndbc.individualData\" ng-class=\"$index == 0 ? 'active': ''\">-->\n             <!--<div class=\"row\">-->\n               <!--<div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\" data-ng-repeat=\"arr in data\" ng-click=\"ndbc.documentDashboard(arr.state)\" ng-class=\"$index==0 ? 'Header-Style1 no-padding':'Header-Style'\" >-->\n                    <!--<div class=\"row\">-->\n                       <!--<div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">-->\n                           <!--<h4>{$ arr.display $}</h4>-->\n                           <!--<span>{$ arr.description $}</span>-->\n                       <!--</div>-->\n                    <!--</div>-->\n                    <!--<br>-->\n                    <!--<div class=\"row\">-->\n                        <!--<div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">-->\n                            <!--<label class=\"labelHeading\">Accuracy</label>-->\n                            <!--<img src=\"/static/ref-app/app/images/excellent.png\"/>-->\n                            <!--<span class=\"accuracy\">Excellent</span>-->\n                            <!--<span>{$ arr.Accuracy $}</span>-->\n                        <!--</div>-->\n                        <!--<div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding text-center\">-->\n                            <!--<label class=\"labelHeading\">Avg Time in Queue</label>-->\n                            <!--<label style=\"font-size:20px;font-weight: 400;margin-top: 10px;color: #928282;\">{$ arr.time_in_queue $} min</label>-->\n                        <!--</div>-->\n                        <!--<div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">-->\n                            <!--<label class=\"labelHeading\">Docs in Queue</label>-->\n                            <!--<span style=\"font-size: 35px;color: #928282;\">{$ arr.queue $}</span>-->\n                        <!--</div>-->\n                    <!--</div>-->\n               <!--</div>-->\n             <!--</div>-->\n           <!--</div>-->\n        <!--</div>-->\n        <!--<a class=\"left carousel-control\" href=\".imageCarousel\" role=\"button\" data-slide=\"prev\" >-->\n          <!--<span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>-->\n          <!--<span class=\"sr-only\">Previous</span>-->\n        <!--</a>-->\n        <!--<a class=\"right carousel-control\" href=\".imageCarousel\" role=\"button\" data-slide=\"next\">-->\n          <!--<span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>-->\n          <!--<span class=\"sr-only\">Next</span>-->\n        <!--</a>-->\n    <!--</div>-->\n</div>\n<br>\n<div class=\"dashboard-data row\">\n    <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-12\">\n        <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n                <div class=\"row\">\n                    <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                        <h5>Document Summary</h5>\n                    </div>\n                    <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8\">\n                      <div class=\"row\">\n                          <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                              <span ng-class=\"activeDate[0]\" ng-click=\"filterGraphWithDate('wtd',0)\">WTD</span>\n                          </div>\n                          <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                              <span ng-class=\"activeDate[1]\" ng-click=\"filterGraphWithDate('mtd',1)\">MTD</span>\n                          </div>\n                          <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                              <span ng-class=\"activeDate[2]\" ng-click=\"filterGraphWithDate('ytd',2)\">YTD</span>\n                          </div>\n                          <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\">\n                                <form name=\"dateForm\" class=\"form-horizontal\">\n                                    <div class=\"form-group\">\n                                        <input date-range-picker id=\"daterange1\" name=\"daterange1\" class=\"form-control date-picker\" type=\"text\"\n                                            ng-model=\"date\" required ng-change=\"SimplePickerChange();\"/>\n                                    </div>\n                                </form>\n                          </div>\n                      </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"panel-body\">\n                <div class=\"row\">\n                    <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-7\">\n                        <div id=\"chart\"></div>\n                    </div>\n                    <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-5\" style=\"margin-top:30px;\">\n                        <div class=\"row\">\n                            <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\" ng-repeat=\"data in ndbc.graphDataForStats\" style=\"padding-bottom:20px;\">\n                                <label class=\"adhocHeadings\" style=\"margin-bottom: 0px;\">{$ data.display $}</label>\n                                <p class=\"adhoc success\" style=\"color:{$ ndbc.colorKeys[data.display] $}\">{$ data.count $}</p>\n                                <span class=\"adhocfooter\">{$ data.percentage $}%</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\" style=\"padding:0px;\">\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">\n                        <div class=\"row\">\n                            <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-12\">\n                                <h5>Fields Reviewed & Corrected</h5>\n                            </div>\n                            <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-7\">\n                                <form name=\"dateForm\" class=\"form-horizontal\">\n                                    <div class=\"form-group\">\n                                        <input date-range-picker id=\"daterange2\" name=\"daterange1\" class=\"form-control date-picker\" type=\"text\"\n                                            ng-model=\"date1\" required ng-change=\"SimplePickerChange();\"/>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"row\">\n                            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                <div id=\"chart1\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\" style=\"padding: 0px 0px 0px 15px;\">\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading\">\n                        <div class=\"row\">\n                            <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-12\">\n                                <h5>Top 6 Fields Corrected</h5>\n                            </div>\n                            <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-7\">\n                                <form name=\"dateForm\" class=\"form-horizontal\">\n                                    <div class=\"form-group\">\n                                        <input date-range-picker id=\"daterange3\" name=\"daterange1\" class=\"form-control date-picker\" type=\"text\"\n                                            ng-model=\"date2\" required ng-change=\"SimplePickerChange();\"/>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"row\">\n                            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                <div id=\"chart2\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm-4 col-lg-4 col-md-4 col-xs-4\">\n        <div class=\"panel panel-default\">\n            <div class=\"panel-body\">\n                <div class=\"row\">\n                    <div class=\"col-sm-7 col-md-7 col-lg-7 col-xs-12\">\n                        <div style=\"text-align:center;padding: 30px 0px 0px 0px;\">\n                            <span>Avg Processing Time Per Case</span><br>\n                            <span style=\"font-size:18px;\">65 mins</span>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-5 col-lg-5 col-md-5 col-xs-12\">\n                        <div class=\"circle\">\n                          <div class=\"circle__inner\">\n                            <div class=\"circle__wrapper\">\n                              <div class=\"circle__content\">\n                                  <span>Your Rank</span><br>\n                                  <span style=\"font-size:30px;font-weight:bold\">2</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div>\n            <h4>Your Queue</h4>\n            <ul class=\"list-group\">\n                <li class=\"list-group-item customList\" >\n                    <div class=\"row\">\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            Document Name\n                        </div>\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            Received\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item customList\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <img src=\"/static/ref-app/app/images/pdf.png\" style=\"width:14px;\"/>\n                            <span style=\"font-weight: 600;margin-left: 3px;\">Stage_2.pdf</span>\n                        </div>\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <span>5:17 AM</span>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item customList\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <img src=\"/static/ref-app/app/images/pdf.png\" style=\"width:14px;\"/>\n                            <span style=\"font-weight: 600;margin-left: 3px;\">Stage_2.pdf</span>\n                        </div>\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <span>5:17 AM</span>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item customList\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <img src=\"/static/ref-app/app/images/pdf.png\" style=\"width:14px;\"/>\n                            <span style=\"font-weight: 600;margin-left: 3px;\">Stage_2.pdf</span>\n                        </div>\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <span>5:17 AM</span>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item customList\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <img src=\"/static/ref-app/app/images/pdf.png\" style=\"width:14px;\"/>\n                            <span style=\"font-weight: 600;margin-left: 3px;\">Stage_2.pdf</span>\n                        </div>\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <span>5:17 AM</span>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item customList\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <img src=\"/static/ref-app/app/images/pdf.png\" style=\"width:14px;\"/>\n                            <span style=\"font-weight: 600;margin-left: 3px;\">Stage_2.pdf</span>\n                        </div>\n                        <div class=\"col-sm-6 col-lg-6 col-md-6 col-xs-6\">\n                            <span>5:17 AM</span>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n"

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('console.agentDashboard', [
		])
	        .controller('agentDashboardController', __webpack_require__(94))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.agentDashboard', {
	                url: '/agentDashboard',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(95),
	                        controller: 'agentDashboardController',
	                        controllerAs: 'adbc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/logout";
	                                 }
	                                 else{
	                                   if(loginData.role=='sv'){
	                                      $state.go('app.supervisorDashboard')
	                                   }
	                                 }
	                              }
	                        }
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$compile','$timeout', '$rootScope','$sce','$location','agentDashboardService', function($scope,$state,$compile,$timeout,$rootScope,$sce,$location,agentDashboardService) {
		  'use strict';
	
		  var vm = this;
	      var url = $location.path();
	      window.scrollTo(0,0);
	      $rootScope.currentState = 'agentDashboard';
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	
	      vm.getSession = function(){
	         agentDashboardService.getSessionData().then(function(response){
	               if(response.data.logged_in){
	                if(response.data.role!='bu' && response.data.role!='sv'){
	                  window.location.href = "http://"+ location.host+"/";
	                }
	                else{
	                  if(response.data.user == undefined){
	                      response.data.user = {};
	                  }
	                  response.data.user.role = response.data.role;
	                  response.data.solutionName =  $scope.loginData.solutionName;
	                  response.data.solutionId =  $scope.loginData.solutionId;
	                  localStorage.setItem('userInfo',JSON.stringify(response.data));
	                  $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	                  vm.sess_id= $scope.loginData.sess_id;
	                  $rootScope.$broadcast('userBroadcast', { username: response.data.username });
	                  vm.getQueues();
	                }
	              }
	              else{
	                 localStorage.clear();
	              }
	         });
	      };
	      vm.getSession();
	
	      vm.getQueues = function(){
	          if($scope.loginData.username != undefined){
	              var reqObj = {'solution_id': $scope.loginData.solutionId,
	                  'data':{'user_id':$scope.loginData._id,
	                           'role': $scope.loginData.role,
	                              'user_name': $scope.loginData.username,
	                              'filter_obj': {"page_no":1,
	                             "no_of_recs":8,
	                             "sort_by":"updated_ts",
	                             "order_by":false
	                            }
	                     }
	              };
	              agentDashboardService.getDashboardQueues(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                       if(data.data.status.success){
	                            vm.allQueues = data.data.metadata.queues;
	                       }
	                       else{
	                             $.UIkit.notify({
	                                       message : data.data.status.msg,
	                                       status  : 'danger',
	                                       timeout : 3000,
	                                       pos     : 'top-center'
	                             });
	                       }
	                },function(err){
	                   $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	                });
	           }
	      };
	
	//      vm.getQueues();
	
	      vm.goToQueueCases = function(arr){
	          $rootScope.queueName = arr.name;
	          localStorage.setItem("queueName", $rootScope.queueName);
	          if(arr.user_groups != undefined){
	            localStorage.setItem("userGroups", JSON.stringify(arr));
	          }
	          $state.go("app.agentDocumentsList",{"id":arr.id});
	      };
	
	}];

/***/ }),
/* 95 */
/***/ (function(module, exports) {

	module.exports = "    <div class=\"agentDashboard-style\">\n    <div class=\"row\">\n        <div class=\"col-md-12 col-lg-12 col-sm-12 col-xs-12\">\n            <div data-toggle=\"collapse\" data-target=\".top-menu\" class=\"pull-right\" style=\"cursor:pointer;\">\n                <img src=\"/static/ref-app/app/images/compress.png\" ng-click=\"showImage = true\" ng-show=\"!showImage\">\n                <span ng-show=\"showImage\" ng-click=\"showImage = false\">\n                    <img src=\"/static/ref-app/app/images/fullExpand.png\"  >\n                    Expand Metrics\n                </span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row row-eq-height collapse in customDashboardStyle top-menu\">\n        <div class=\"col-lg-8 col-sm-8 col-md-8 col-xs-8 dashboard-border\">\n            <div class=\"row\">\n                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                    <label>Your Open Cases</label>\n                    <div class=\"dashboard-reports\">{$ adbc.dashboardStats.overall_new_count $}</div>\n                </div>\n                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                    <label>Avg Cases Processed/day</label>\n                    <div class=\"dashboard-reports\">-\n                        <img class=\"image-styles\" src=\"/static/ref-app/app/images/arrow_up.png\"/>\n                    </div>\n                </div>\n                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                    <label>Pages Processed/day</label>\n                    <div class=\"dashboard-reports\">- </div>\n                </div>\n                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                    <label>Case Past Due</label>\n                    <div class=\"dashboard-reports\">\n                        <img class=\"image-styles\"  src=\"/static/ref-app/app/images/exclamation_red.png\"/> -\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                <label>Cases Closed Today</label>\n                <div class=\"dashboard-reports\">{$ adbc.dashboardStats.overall_closed_count $}</div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                <label>Cases Closed Month</label>\n                <div class=\"dashboard-reports\">- </div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                <label>Closed This Year</label>\n                <div class=\"dashboard-reports\">-</div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                <label>Case At Risk</label>\n                <div class=\"dashboard-reports\">\n                    <img class=\"image-styles\"  src=\"/static/ref-app/app/images/exclamation_yellow.png\"/> -\n                </div>\n            </div>\n        </div>\n        <div class=\"col-lg-4 col-ms-4 col-md-4 col-xs-4\">\n            <div class=\"row\">\n                <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8  no-padding\">\n                    <label>Average Processing Time Per Case</label>\n                    <div class=\"dashboard-reports\">65 min</div>\n                </div>\n                <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding\">\n                    <div class=\"customBadge\">\n                        <div class=\"rank\">\n                            <div>Your Rank</div>\n                            <div class=\"rank2\">2</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"container agent-container\">\n    <div class=\"row row-eq-height\">\n        <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 no-padding\">\n            <h4 class=\"heading\">QUEUES</h4>\n        </div>\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4  no-padding text-right\">\n            <div class=\"row row-eq-height\">\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">\n                    <span class=\"filterStyle\">Filters</span>\n                </div>\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 no-padding\">\n                    <select class=\"form-control\">\n                        <options>All Queues</options>\n                    </select>\n                </div>\n            </div>\n        </div>\n    </div>\n    <br>\n    <div class=\"table-responsive\">\n        <table class=\"table table-bordered\">\n            <thead>\n                <tr>\n                    <td class=\"agent-table\">Queue Name</td>\n                    <td class=\"agent-table\">New Unassigned</td>\n                    <td class=\"agent-table\">Assign To Me</td>\n                    <td class=\"agent-table\">In-progress Assigned To Me</td>\n                    <td class=\"agent-table\">Case Past Due</td>\n                    <td class=\"agent-table\">Case At Risk</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat=\"list in adbc.allQueues\" ng-click=\"adbc.goToQueueCases(list)\">\n                    <td>{$ list.name $} <span ng-if=\"list.workflow_id !=undefined\">(</span><span>{$ list.workflow_id $}</span><span ng-if=\"list.workflow_id !=undefined\">)</span></td>\n                    <td>{$ list.unassigned_count $}</td>\n                    <td>{$ list.assigned_count $}</td>\n                    <td>{$ list.inprogress_count $}</td>\n                    <td></td>\n                    <td>\n                        <img src=\"/static/ref-app/app/images/exclamation_yellow.png\"/>\n                        <span>-</span>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>"

/***/ }),
/* 96 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.agentDashboardService', [])
			.service('agentDashboardService', function($state,$q, $http,httpPayload) {
	
	          var _getDashboardQueues = function(obj,sess_id,access) {
	            var payload = httpPayload.fetchPostHeader('api/case/queues',obj);
	            var deferred = $q.defer();
	
	            $http(payload).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getSessionData = function(sess_id) {
	            var payload = httpPayload.fetchGetHeader('user/status/');
	            var deferred = $q.defer();
	
	            $http(payload).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	
	
	          var agentDashboardService = {
	            getDashboardQueues:_getDashboardQueues,
	            getSessionData:_getSessionData
	          };
	
	          return agentDashboardService;
			});
	})();
	


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('console.agentDocumentsList', [
		])
	        .controller('agentDocumentsListController', __webpack_require__(98))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.agentDocumentsList', {
	                url: '/agentDocumentsList/:id',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(99),
	                        controller: 'agentDocumentsListController',
	                        controllerAs: 'adlc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/logout";
	                                 }
	                                 else{
	                                   if(loginData.role=='sv'){
	                                      $state.go('app.supervisorDashboard')
	                                   }
	                                 }
	                              }
	                        }
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$compile','$timeout', '$rootScope','$sce','$location','agentDocumentsListService','$stateParams','supervisorDocumentsListService', function($scope,$state,$compile,$timeout,$rootScope,$sce,$location,agentDocumentsListService,$stateParams,supervisorDocumentsListService) {
		  'use strict';
	
		  var vm = this;
	      var url = $location.path();
	      window.scrollTo(0,0);
	      $rootScope.currentState = 'agentDocumentsList';
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	      vm.queueType = $stateParams.id;
	      $scope.filterObj = {"page_no": 1,"no_of_recs":8};
	      $scope.searchText = "";
	      $scope.currentQueueName = localStorage.getItem("queueName");
	      $scope.caseDocSelection = [];
	      $scope.caseDocSelectionChild = [];
	      vm.reviewStates = [
	          {
	            "id": "classification_review",
	            "name":"Review Classification",
	            "screen_uri": "http://console.r46x.stack.qa.xpms.ai:8080/#/app/multiPage"
	          },
	          {
	            "id": "text_extraction_review",
	            "name":"Review Text Extraction",
	            "screen_uri": "http://console.r46x.stack.qa.xpms.ai:8080/#/app/extraction"
	          },
	          {
	            "id": "entity_extraction_review",
	            "name":"Review Entity Extraction",
	            "screen_uri": "http://console.r46x.stack.qa.xpms.ai:8080/#/app/entityLinking"
	          },
	          {
	            "id": "post_processed_review",
	            "name":"Review Post Processed",
	            "screen_uri": "http://console.r46x.stack.qa.xpms.ai:8080/#/app/post-processed"
	          }
	        ]
	
	//      vm.agentsList = [{'id': '123',
	//				    'name': 'arun'},{'id': '234',
	//				    'name': 'vijay'},{'id': '345',
	//				    'name': 'sandeep'}];
	
	      vm.getQueueCases = function(){
	          var reqObj = {
	              "solution_id": $scope.loginData.solutionId,
	              "data": {
	                "filter_by": {
	                  "search_by": $scope.searchText,
	                  "queue_id": $stateParams.id,
	                  "pagination": {
	                    "page_no": $scope.filterObj.page_no,
	                    "no_of_recs": $scope.filterObj.no_of_recs,
	                    "sort_by": "created_ts",
	                    "order_by": false
	                  }
	                }
	              }
	          };
	
	          agentDocumentsListService.getQueueDocuments(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	                       vm.caseDocumentsList = data.data.metadata.documents;
	//                       vm.agentsList = data.data.agents;
	//                       vm.stateOfDocument = data.data.state;
	                       if(data.data.metadata.total_documents != undefined)
	                           vm.documentsLength = data.data.metadata.total_documents;
	//                       vm.queueList = data.data.queue_name;
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	      };
	
	      setTimeout(function request() {
	            vm.getQueueCases();
	      }, 1500);
	
	      vm.getAgentsList = function(){
	           var userGroups = JSON.parse(localStorage.getItem("userGroups"));
	           if(userGroups != null && $stateParams.id != "Uncategorized"){
	               var reqObj = {
	                                'solution_id': $scope.loginData.solutionId,
	                                'data':{'roles': ['bu'],"user_groups": userGroups.user_groups,"queue_id":userGroups.id}
	                            };
	           }
	           else{
	               var reqObj = {
	                                'solution_id': $scope.loginData.solutionId,
	                                'data':{'roles': ['bu'],"user_groups":[],"queue_id": "Uncategorized"}
	                            };
	           }
	
	           agentDocumentsListService.getAgents(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	               if(data.data.status.success){
	                   vm.agentsList = data.data.metadata.agents;
	               }
	               else{
	                   $.UIkit.notify({
	                           message : data.data.status.msg,
	                           status  : 'danger',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	               }
	           },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	           });
	      };
	
	      vm.getAgentsList();
	
	      //setTimeout(vm.getQueueCases(), 2000);
	
	      vm.assignAgentFromDrop = function(obj){
	            var reqObj = angular.copy(obj);
	            reqObj.assignee = vm.agentSelected;
	            reqObj.queue_id = $stateParams.id;
	            var reqArray = [];
	            reqArray.push(reqObj);
	            vm.updateAgentDoc(reqArray);
	      };
	
	      vm.assignAgent = function(obj){
	            var reqObj = {
	              "data": {
	                "cases": [{
	                    "user_id": $scope.loginData._id,
	                    "case_id": obj.case_id,
	                    "user_name": $scope.loginData.username
	                }]
	              },
	              "solution_id": $scope.loginData.solutionId
	            }
	
	            vm.updateAgentDoc(reqObj);
	      };
	
	      vm.updateAgentDoc = function(reqObj){
	           supervisorDocumentsListService.assignAgent(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	//                       vm.getQueueCases();
	                       for(var i=0;i<reqObj.data.cases.length;i++){
	                           var indexVal = vm.caseDocumentsList.findIndex(x => x.case_id==reqObj.data.cases[i].case_id);
	                           vm.caseDocumentsList[indexVal].user_id = reqObj.data.cases[i].user_id;
	                           vm.caseDocumentsList[indexVal].user_name = reqObj.data.cases[i].user_name;
	                       };
	                       $scope.caseDocSelection = [];
	                       $scope.caseDocSelectionChild = [];
	                       vm.agentSelected = "";
	                       $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'success',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	      };
	
	      vm.getProcessListDetails =function(obj,type,index,parentfilename){
	           localStorage.setItem("parentfilename",parentfilename);
	            if(obj.child_cases.length>0)
	              return;
	            if(obj.assignee != null){
	                $rootScope.queueId = $stateParams.id;
	                if(obj.doc_state == 'processing'){
	                }
	                else if(obj.doc_state == 'classified'){
	                    $state.go("app.multiPage",{id:obj.doc_id,queue:$stateParams.id})
	                }
	                else if(obj.doc_state == 'extracted'){
	                    $state.go("app.extraction",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                }
	                else if(obj.doc_state == 'processed'){
	                    $state.go("app.entityLinking",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                }
	                else if(obj.doc_state == 'post_processed'){
	                    $state.go("app.review",{id:obj.doc_id, type:"none",queue:$stateParams.id,state: obj.doc_state})
	                }
	                else if(obj.doc_state == 'reviewed'){
	                    $state.go("app.review",{id:obj.doc_id, type:"none",queue:$stateParams.id,state: obj.doc_state})
	                }
	                else{
	                    if(obj.extn != "email"){
	                        if(obj.is_failed==undefined)
	                           $scope.stateChange(obj,type,index);
	                        else{
	                           if(!obj.is_failed)
	                             $scope.stateChange(obj,type,index);
	                        }
	                    }
	                    else{
	                        $state.go("app.review",{id:obj.doc_id, type:"email",queue:$stateParams.id,state: obj.doc_state})
	                    }
	                }
	            }
	            else{
	                $.UIkit.notify({
	                       message : "Please assign agent to review this document",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	                });
	            }
	
	      };
	
	      vm.navigateReview = function(obj,type,index,parentfilename){
	            localStorage.setItem("parentfilename",parentfilename);
	            if(obj.user_id != null){
	                $rootScope.queueId = $stateParams.id;
	                if(obj.review_id != undefined){
	                    if(obj.review_id != null){
	                        var arr = vm.reviewStates.filter(function(e){if(e.id==obj.review_id){return e}});
	                        if(arr[0].id=="classification_review"){
	                            $state.go("app.multiPage",{id:obj.doc_id,queue:$stateParams.id});
	                        }
	                        else if(arr[0].id=="text_extraction_review"){
	                            $state.go("app.extraction",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                        }
	                        else if(arr[0].id=="entity_extraction_review"){
	                            $state.go("app.entityLinking",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                        }
	                        else if(arr[0].id=="post_processed_review"){
	                            $state.go("app.review",{id:obj.doc_id, type:"none",queue:$stateParams.id,state: obj.state})
	                        }
	                    }
	                }
	            }
	            else{
	                $.UIkit.notify({
	                       message : "Please assign agent to review this document",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	                });
	            }
	      };
	
	      $scope.getChildDetails = function(obj,index){
	            if(obj.child_cases.length>0){
	              if(!obj.isExpanded){
	
	                  var reqObj = {'solution_id': $scope.loginData.solutionId,
	                      'data':{
	                            "parent_id": obj.case_id,
	                            'queue_id': $stateParams.id
	                         }
	                     }
	                  obj.spinner = true;
	                  agentDocumentsListService.childDocs(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                       if(data.data.status.success){
	                          //$scope.processListData=data.data.data;
	                          obj.child_cases = data.data.metadata.documents;
	                          obj.isExpanded = !obj.isExpanded;
	                          obj.spinner = false;
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                       }
	                  },function(err){
	                    console.log(err)
	                   $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	                  });
	              }
	              else{
	                obj.isExpanded = !obj.isExpanded
	                obj.spinner = false;
	              }
	
	            }
	
	      };
	
	      $scope.pageChanged = function(newPage) {
	        $scope.filterObj.page_no = newPage;
	        $scope.caseDocSelection = [];
	        $scope.caseDocSelectionChild = [];
	        vm.getQueueCases();
	      };
	
	
	      $scope.monthShort = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
	
	      $scope.formatDateInList = function(ts){
	           var date = new Date();
	           var tsDate = new Date(ts);
	           var currentDate = date.getMonth() + "-" + date.getDate() + "-" + date.getYear();
	           var yestrdyDate = date.getMonth() + "-" + (date.getDate()-1) + "-" + date.getYear();
	           var updatedTs = tsDate.getMonth() + "-" + tsDate.getDate() + "-" + tsDate.getYear();
	           if(currentDate == updatedTs){
	               if(tsDate.getHours()<12){
	                   return tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "AM";
	               }
	               else{
	                   if(tsDate.getHours()==12)
	                       return tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "PM";
	                   else
	                       return (tsDate.getHours()-12)+':'+tsDate.getMinutes()+" "+ "PM";
	               }
	           }
	           else if(yestrdyDate == updatedTs){
	               if(tsDate.getHours()<12)
	                   return 'Yesterday @ '+tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "AM";
	               else{
	                   if(tsDate.getHours()==12)
	                       return 'Yesterday @ '+tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "PM";
	                   else
	                       return 'Yesterday @ '+(tsDate.getHours()-12)+':'+tsDate.getMinutes()+" "+ "PM";
	               }
	           }
	           else{
	               if(tsDate.getHours()<12)
	                   return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+tsDate.getHours()+' '+'AM';
	               else{
	                   if(tsDate.getHours()==12)
	                       return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+tsDate.getHours()+' '+'PM';
	                   else
	                       return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+(tsDate.getHours()-12)+' '+'PM';
	               }
	           }
	     };
	
	     $scope.caseSelectFunct = function(){
	        var setFlag = false;
	        for(var i=0;i<$scope.caseDocSelection.length;i++){
	            if($scope.caseDocSelection[i]){
	                setFlag = true;
	            }
	        };
	        $scope.transferSelectionFlag = setFlag;
	     };
	
	     $scope.caseSelectFunctChild = function(){
	        var setFlag = false;
	        console.log($scope.caseDocSelectionChild);
	        for(var i=0;i<$scope.caseDocSelectionChild.length;i++){
	            angular.forEach($scope.caseDocSelectionChild[i],function(value,key){
	                if(value){
	                    setFlag = true;
	                }
	            });
	        };
	        $scope.transferSelectionFlagChild = setFlag;
	     };
	
	     $scope.showEditDropdown = function(index,e){
	        e.stopPropagation();
	        $scope.showAgentDrop = [];
	        $scope.showAgentDrop[index] = true;
	     };
	
	     vm.transferTo = function(){
	        var transferDocs = [];
	        var casesSelected = [];
	        for(var i=0;i<$scope.caseDocSelection.length;i++){
	            if($scope.caseDocSelection[i]){
	                transferDocs.push(vm.caseDocumentsList[i]);
	            }
	        };
	        for(var i=0;i<$scope.caseDocSelectionChild.length;i++){
	            angular.forEach($scope.caseDocSelectionChild[i],function(value,key){
	                if(value){
	                    transferDocs.push(vm.caseDocumentsList[i].child_cases[key]);
	                }
	            });
	        };
	        for(var i=0;i<transferDocs.length;i++){
	            casesSelected.push(transferDocs[i].case_id);
	        };
	
	        var casesList = [];
	        var selectedUser = vm.agentsList.filter(function(e){if(e.id==vm.agentSelected){return e}});
	
	        for(var i=0;i<casesSelected.length;i++){
	            casesList.push({"user_id": vm.agentSelected,"case_id":casesSelected[i],"user_name":selectedUser[0].name});
	        }
	
	        var reqObj = {
	          "data": {
	            "cases": casesList
	          },
	          "solution_id": $scope.loginData.solutionId
	        }
	        vm.updateAgentDoc(reqObj);
	     };
	
	     $scope.returnFilename = function(arr){
	        if("metadata_properties_filename" in  arr && arr["metadata_properties_filename"] != null){
	            return arr["metadata_properties_filename"];
	        } else  if("metadata.properties.filename" in  arr && arr["metadata.properties.filename"] != null){
	            return arr["metadata.properties.filename"];
	        } else if("source" in arr && arr["source"] != null) {
	            var filePath = arr.source.file_path;
	            var splitArr = filePath.split("/");
	            var fileName = splitArr[splitArr.length-1];
	            return fileName;
	        }
	        return "";
	     };
	
	     $scope.returnTemplatename = function(arr){
	        if("metadata_template_info_name" in  arr && arr["metadata_template_info_name"] != null){
	            return arr["metadata_template_info_name"];
	        } else  if("metadata.template_info.name" in  arr && arr["metadata.template_info.name"] != null){
	            return arr["metadata.template_info.name"];
	        }
	        return "";
	     };
	
	     $scope.checkForReview = function(state){
	        var arr = vm.reviewStates.filter(function(e){if(state == e.id){return e}});
	        if(arr.length > 0)
	            return true;
	        else
	            return false;
	     };
	
	     vm.checkErrDetail = function(list){
	        document.getElementById("errPanel").style.width = "40%";
	        if(list.error_details != undefined)
	            $scope.errDetail = JSON.parse(list.error_details.message);
	        else
	            $scope.errDetail = "";
	     };
	
	     $scope.cancelErr = function () {
	        document.getElementById("errPanel").style.width = "0%";
	     };
	
	     vm.reprocessState = function(obj){
	        agentDocumentsListService.reprocessDoc(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	                       $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'success',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                       });
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	     };
	
	     vm.proceedToNextState = function(obj){
	        agentDocumentsListService.proceedTo(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	                       $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'success',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                       });
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	     };
	
	
	}];

/***/ }),
/* 99 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"row overlay adaptContainer\" id=\"errPanel\">\n    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\"  style=\"margin-bottom:70px;\">\n        <h4 class=\"push-left\">\n          <span>Error Details</span>\n          <span class=\"pull-right closeRule closebtn\" ng-click=\"cancelErr()\" style=\"cursor:pointer\">&times;</span>\n        </h4>\n        <br>\n        <br>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n                <pre>\n                    {$ errDetail $}\n                </pre>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"container agentDocument-container\">\n    <div class=\"row\">\n        <div class=\"col-sm-9 col-xs-9 col-md-9 col-lg-9\">\n            <ol class=\"breadcrumb\">\n              <li><a ui-sref=\"app.agentDashboard\">Queues</a></li>\n              <li class=\"active\">{$ currentQueueName $}</li>\n            </ol>\n        </div>\n    </div>\n\n    <div class=\"row row-eq-height\">\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding\">\n            <form ng-submit=\"adlc.getQueueCases()\">\n                <div class=\"flexContainer\">\n                    <input type=\"text\" class=\"form-control inputField\" ng-model=\"searchText\" placeholder=\"Search\">\n                    <button type=\"submit\"><span class=\"glyphicon glyphicon-search\"></span></button>\n                </div>\n            </form>\n        </div>\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding text-right\">\n            <div class=\"row row-eq-height\" ng-show=\"transferSelectionFlag || transferSelectionFlagChild\">\n                <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-5\">\n                    <span class=\"filterStyle\">Transfer To</span>\n                </div>\n                <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-7 no-padding\">\n                    <form ng-submit=\"adlc.transferTo()\">\n                        <div class=\"select-box\">\n                            <select class=\"form-control\" ng-model=\"adlc.agentSelected\" style=\"border-radius:0\" required>\n                                <option value=\"\">select agent</option>\n                                <option ng-repeat=\"opt in adlc.agentsList\" value=\"{$ opt.id $}\">{$ opt.name $}</option>\n                            </select>\n                            <button type=\"submit\" style=\"padding: 0px;border: none;\">\n                               <i class=\"fa fa-arrow-right icon-right\" aria-hidden=\"true\"></i>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4  no-padding text-right\">\n            <div class=\"row row-eq-height\">\n                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                    <span class=\"filterStyle\">Filters</span>\n                </div>\n                <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9 no-padding\">\n                    <select class=\"form-control\">\n                        <options>All Queues</options>\n                    </select>\n                </div>\n            </div>\n        </div>\n    </div>\n    <br>\n    <div class=\"table-responsive\">\n        <table class=\"table table-bordered\">\n            <thead>\n                <tr>\n                    <td>Case ID</td>\n                    <td>File Name</td>\n                    <td>Template</td>\n                    <td>Task</td>\n                    <td>Status</td>\n                    <td>Recieved On</td>\n                    <td>Assigned To</td>\n                    <td ng-if=\"adlc.queueType=='uncategorized'\">Queue</td>\n                    <td></td>\n                </tr>\n            </thead>\n            <tbody dir-paginate=\"arr in adlc.caseDocumentsList | itemsPerPage:filterObj.no_of_recs\" total-items=\"adlc.documentsLength\" current-page=\"filterObj.page_no\" pagination-id=\"branchPagination\" class=\"hoverRow\">\n                <tr >\n                    <td>\n                        <input type=\"checkbox\" ng-model=\"caseDocSelection[$index]\" ng-change=\"caseSelectFunct()\" ng-disabled=\"arr.user_id == null\"/>\n                        <span ng-click=\"adlc.navigateReview(arr,'parent',$index,'')\">{$ arr.case_id $}</span>\n                    </td>\n                    <td class=\"ellipsis\">\n                        <div>\n                            <i class=\"fa fa-file-pdf-o dues\"></i>\n                            <span ng-show=\"arr.child_cases.length>0\" ng-click=\"getChildDetails(arr,$index);$event.stopPropagation();\">\n                                <i ng-show=\"arr.isExpanded\" class=\"fa fa-chevron-down\"></i>\n\n                                <i ng-show=\"!arr.isExpanded\" class=\"fa fa-chevron-right\"></i>\n                            </span>\n\n\n                                <span ng-bind=\"returnFilename(arr)\"></span>\n                            <span ng-show=\"arr.child_cases.length>0\">\n                                                            <i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"arr.spinner\"aria-hidden=\"true\"></i>\n\n                            </span>\n                        </div>\n                    </td>\n                    <td ng-bind=\"returnTemplatename(arr)\"></td>\n                    <td>{$ arr.state $}</td>\n                    <td>\n                        <span ng-if=\"arr.processing_state=='failed'\" class=\"errorTraingle\"><i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i></span><span>{$ arr.processing_state $}</span><span ng-if=\"arr.processing_state=='failed'\" class=\"infoIcon\" ng-click=\"adlc.checkErrDetail(arr)\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></span>\n                    </td>\n                    <td>{$ formatDateInList(arr.created_ts) $}</td>\n                    <td>\n                        <a ng-if=\"arr.user_id == null && !showAgentDrop[$index] && checkForReview(arr.review_id)\" ng-click=\"adlc.assignAgent(arr)\">Assign</a>\n                        <span ng-show=\"showAgentDrop[$index]\">\n                            <form ng-submit=\"adlc.assignAgentFromDrop(arr)\">\n                                <div class=\"select-box\">\n                                    <select class=\"form-control\" ng-model=\"adlc.agentSelected\" style=\"border-radius:0\" required>\n                                        <option value=\"\">select agent</option>\n                                        <option ng-repeat=\"opt in adlc.agentsList\" value=\"{$ opt.id $}\">{$ opt.name $}</option>\n                                    </select>\n                                    <button type=\"submit\" style=\"padding: 0px;border: none;\">\n                                       <i class=\"fa fa-arrow-right icon-right\" aria-hidden=\"true\"></i>\n                                    </button>\n                                </div>\n                            </form>\n                        </span>\n                        <span ng-if=\"arr.user_id != null && !showAgentDrop[$index]\">{$ arr.user_name $}</span>\n                        <!--<span ng-if=\"arr.assignee != null && !showAgentDrop[$index]\" ng-click=\"showEditDropdown($index,$event)\"><i class=\"fa fa-pencil\" style=\"padding-left:8px;\"></i></span>-->\n                    </td>\n                    <td ng-if=\"adlc.queueType=='uncategorized'\">\n                        <span ng-if=\"arr.queue_name == undefined\">Un Assigned</span>\n                        <span ng-if=\"arr.queue_name != undefined\">{$ arr.queue_name $}</span>\n                    </td>\n                    <td>\n                        <div class=\"dropdown\" ng-if=\"arr.processing_state=='failed'\">\n                            <i class=\"fa fa-ellipsis-v dropdown-toggle\" data-toggle=\"dropdown\"></i>\n                            <ul class=\"dropdown-menu-edit\">\n                              <li ng-click=\"adlc.reprocessState(arr)\"><a>Reprocess {$ arr.state $}</a></li>\n                              <li ng-click=\"adlc.proceedToNextState(arr)\"><a>Force Complete {$ arr.state $}</a></li>\n                              <li><a>Report Issue</a></li>\n                            </ul>\n                        </div>\n                    </td>\n                </tr>\n                <tr ng-repeat=\"data in arr.child_cases\" ng-show=\"arr.isExpanded && arr.child_cases.length>0 \" style=\"border-bottom:none !important;\" ng-class=\"!data.highlight?'row_fade_in':''\">\n                    <td>\n                        <input type=\"checkbox\" ng-model=\"caseDocSelectionChild[$parent.$index][$index]\" ng-change=\"caseSelectFunctChild()\" ng-disabled=\"data.user_id == null\"/>\n                        <span ng-click=\"adlc.navigateReview(data,'parent',$index,arr.name);$event.stopPropagation();\">{$ data.case_id $}</span>\n                    </td>\n                    <td ng-disabled=\"!data.highlight\">\n                        <i class=\"fa fa-file-pdf-o dues\"></i>\n\n\n                        <span ng-bind=\"returnFilename(data)\"></span>\n\n                    </td>\n                    <td ng-bind=\"returnTemplatename(data)\"></td>\n                    <td>{$ data.state $}</td>\n                    <td ng-disabled=\"!data.highlight\">\n                        <span ng-if=\"data.processing_state=='failed'\" class=\"errorTraingle\"><i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i></span><span>{$ data.processing_state $}</span><span ng-if=\"arr.processing_state=='failed'\" class=\"infoIcon\" ng-click=\"adlc.checkErrDetail(arr)\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></span>\n                    </td>\n                    <td>{$ formatDateInList(data.created_ts) $}</td>\n                    <td><a ng-if=\"data.user_id == null && checkForReview(data.review_id) \" ng-click=\"adlc.assignAgent(data)\">Assign</a><span ng-if=\"data.user_id != null\">{$ data.user_name $}</span></td>\n                    <td ng-if=\"adlc.queueType=='uncategorized'\">\n                        <span ng-if=\"data.queue_name == undefined\">Un Assigned</span>\n                        <span ng-if=\"data.queue_name != undefined\">{$ data.queue_name $}</span>\n                    </td>\n                </tr>\n                <!--<tr style=\"border-bottom:none !important;\">-->\n                    <!--<td></td>-->\n                    <!--<td>-->\n                        <!--<i class=\"fa fa-file-pdf-o dues\"></i>-->\n                        <!--ikxald.pdf-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--Inprogress-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--You-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--21 Jun 2017-->\n                    <!--</td>-->\n                <!--</tr>-->\n            </tbody>\n        </table>\n        <div class=\"right\">\n            <dir-pagination-controls max-size=filterObj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.agentDocumentsListService', [])
			.service('agentDocumentsListService', function($state,$q, $http, httpPayload) {
	
	          var _getQueueDocuments = function(obj,sess_id,access) {
	            var req = httpPayload.fetchPostHeader('api/case/queue/documents',obj);
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _childDocs = function(obj,sess_id,access) {
	            var req = httpPayload.fetchPostHeader('api/case/queue/documents',obj);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getAgents = function(reqObj,sessId,access) {
	           var req = httpPayload.fetchPostHeader('api/queue/agents/',reqObj);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	                deferred.resolve({
	                    data: data
	                });
	            }).error(function(){
	                deferred.reject({
	                    error: data
	                });
	            });
	
	            return deferred.promise;
	          }
	
	          var _reprocessDoc = function(reqObj,sessId,access) {
	            var req = httpPayload.fetchPostHeader('',reqObj);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	                deferred.resolve({
	                    data: data
	                });
	            }).error(function(){
	                deferred.reject({
	                    error: data
	                });
	            });
	
	            return deferred.promise;
	          }
	
	          var _proceedTo = function(reqObj,sessId,access) {
	            var req = httpPayload.fetchPostHeader('',reqObj);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	                deferred.resolve({
	                    data: data
	                });
	            }).error(function(){
	                deferred.reject({
	                    error: data
	                });
	            });
	
	            return deferred.promise;
	          }
	
	          var agentDocumentsListService = {
	            getQueueDocuments: _getQueueDocuments,
	            childDocs: _childDocs,
	            getAgents: _getAgents,
	            reprocessDoc:_reprocessDoc,
	            proceedTo:_proceedTo
	          };
	
	          return agentDocumentsListService;
			});
	})();

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('console.supervisorDashboard', [
		])
	        .controller('supervisorDashboardController', __webpack_require__(102))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.supervisorDashboard', {
	                url: '/supervisorDashboard',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(103),
	                        controller: 'supervisorDashboardController',
	                        controllerAs: 'sdbc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/logout";
	                                 }
	                                 else{
	                                   if(loginData.role=='bu'){
	                                      $state.go('app.agentDashboard')
	                                   }
	                                 }
	                              }
	                        }
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$compile','$timeout', '$rootScope','$sce','$location','agentDashboardService', function($scope,$state,$compile,$timeout,$rootScope,$sce,$location,agentDashboardService) {
		  'use strict';
	
		  var vm = this;
	      var url = $location.path();
	      window.scrollTo(0,0);
	      $rootScope.currentState = 'supervisorDashboard';
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	
	      vm.getSession = function(){
	         agentDashboardService.getSessionData().then(function(response){
	               if(response.data.logged_in){
	                if(response.data.role!='bu' && response.data.role!='sv'){
	                  window.location.href = "http://"+ location.host+"/";
	                }
	                else{
	                  if(response.data.user == undefined){
	                      response.data.user = {};
	                  }
	                  response.data.user.role = response.data.role;
	                  response.data.solutionName =  $scope.loginData.solutionName;
	                  response.data.solutionId =  $scope.loginData.solutionId;
	                  localStorage.setItem('userInfo',JSON.stringify(response.data));
	                  $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	                  $rootScope.$broadcast('userBroadcast', { username: response.data.username });
	                  vm.sess_id= $scope.loginData.sess_id;
	                  vm.getQueues();
	                }
	              }
	              else{
	                 localStorage.clear();
	              }
	         });
	      };
	      vm.getSession();
	
	      vm.getQueues = function(){
	          if($scope.loginData.username != undefined){
	              var reqObj = {'solution_id': $scope.loginData.solutionId,
	                  'data':{'user_id':$scope.loginData._id,
	                           'role': $scope.loginData.role,
	                              'user_name': $scope.loginData.username,
	                              'filter_obj': {"page_no":1,
	                             "no_of_recs":8,
	                             "sort_by":"updated_ts",
	                             "order_by":false
	                            }
	                     }
	              };
	              agentDashboardService.getDashboardQueues(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                       if(data.data.status.success){
	                            vm.allQueues = data.data.metadata.queues;
	                            vm.dashboardStats = data.data.stats;
	                       }
	                       else{
	                             $.UIkit.notify({
	                                       message : data.data.status.msg,
	                                       status  : 'danger',
	                                       timeout : 3000,
	                                       pos     : 'top-center'
	                             });
	                       }
	                },function(err){
	                   $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	                });
	           }
	      };
	
	      vm.getQueues();
	
	      vm.goToQueueCases = function(arr){
	          $rootScope.queueName = arr.name;
	          localStorage.setItem("queueName", $rootScope.queueName);
	          if(arr.user_groups != undefined){
	            localStorage.setItem("userGroups", JSON.stringify(arr));
	          }
	          $state.go("app.supervisorDocumentsList",{"id":arr.id});
	      };
	
	}];

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"supervisorDashboard-style\">\n    <div class=\"container\">\n        <div class=\"row row-eq-height customDashboardStyle top-menu\">\n            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding\">\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                    <label>New Cases</label>\n                    <div class=\"dashboard-reports\">{$ sdbc.dashboardStats.overall_new_count $}</div>\n                </div>\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                    <label>In-progress Cases</label>\n                    <div class=\"dashboard-reports\">{$ sdbc.dashboardStats.overall_inprogress_count $} </div>\n                </div>\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                    <label>Closed Cases</label>\n                    <div class=\"dashboard-reports\">{$ sdbc.dashboardStats.overall_closed_count $}</div>\n                </div>\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                    <label>Unassigned Cases</label>\n                    <div class=\"dashboard-reports\">{$ sdbc.dashboardStats.overall_unassigned_count $}</div>\n                </div>\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                    <label>Cases Past Due</label>\n                    <div class=\"dashboard-reports dues\">\n                        <img src=\"/static/ref-app/app/images/exclamation_red.png\"/>-</div>\n                </div>\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                    <label>Cases At Risk</label>\n                    <div class=\"dashboard-reports risk\">\n                        <img src=\"/static/ref-app/app/images/exclamation_yellow.png\"/>-</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"container supervisor-container2\">\n    <div class=\"row\">\n        <div class=\"col-sm-9 col-md-9 col-lg-9 col-xs-9\">\n            <h4 class=\"heading\">QUEUES </h4>\n        </div>\n    </div>\n    <div class=\"row row-eq-height\">\n        <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 no-padding\">\n            <div class=\"form-group has-feedback has-search\">\n                <span class=\"glyphicon glyphicon-search form-control-feedback\"></span>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\n            </div>\n        </div>\n        <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6  no-padding text-right\">\n            <div class=\"row row-eq-height\">\n                <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\">\n                    <span class=\"filterStyle\">Filters</span>\n                </div>\n                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3 no-padding\">\n                    <select class=\"form-control\">\n                        <options>All Queues</options>\n                    </select>\n                </div>\n            </div>\n        </div>\n    </div>\n    <br>\n    <div class=\"table-responsive\">\n        <table class=\"table table-bordered\">\n            <thead>\n                <tr>\n                    <td>Queue Name</td>\n                    <td class=\"text-center\">New Cases</td>\n                    <td class=\"text-center\">In-progress Cases</td>\n                    <td class=\"text-center\">Closed Cases</td>\n                    <td class=\"text-center\">Unassigned Cases</td>\n                    <td class=\"text-center\">Case Past Due</td>\n                    <td class=\"text-center\">Case At Risk</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat=\"list in sdbc.allQueues\" ng-click=\"sdbc.goToQueueCases(list)\">\n                    <td>{$ list.name $} <span ng-if=\"list.workflow_id !=undefined\">(</span><span>{$ list.workflow_id $}</span><span ng-if=\"list.workflow_id !=undefined\">)</span></td>\n                    <td class=\"text-center\">{$ list.new $}</td>\n                    <td class=\"text-center\">{$ list.inprogress_count $}</td>\n                    <td class=\"text-center\">{$ list.closed $}</td>\n                    <td class=\"text-center\">{$ list.unassigned_count $}</td>\n                    <td class=\"text-center\">\n                        <img src=\"/static/ref-app/app/images/exclamation_red.png\"/>\n                        <span class=\"dues\"></span>\n                    </td>\n                    <td class=\"text-center\">\n                        <img src=\"/static/ref-app/app/images/exclamation_yellow.png\"/>\n                        <span class=\"risk\"></span>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>"

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('console.supervisorDocumentsList', [
		])
	        .controller('supervisorDocumentsListController', __webpack_require__(105))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.supervisorDocumentsList', {
	                url: '/supervisorDocumentsList/:id',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(106),
	                        controller: 'supervisorDocumentsListController',
	                        controllerAs: 'sdlc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/logout";
	                                 }
	                                 else{
	                                   if(loginData.role=='bu'){
	                                      $state.go('app.agentDashboard')
	                                   }
	                                 }
	                              }
	                        }
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$compile','$timeout', '$rootScope','$sce','$location','agentDocumentsListService','$stateParams','supervisorDocumentsListService', function($scope,$state,$compile,$timeout,$rootScope,$sce,$location,agentDocumentsListService,$stateParams,supervisorDocumentsListService) {
		  'use strict';
	
		  var vm = this;
	      var url = $location.path();
	      window.scrollTo(0,0);
	      $rootScope.currentState = 'supervisorDocumentsList';
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	      vm.queueType = $stateParams.id;
	      $scope.filterObj = {"page_no": 1,"no_of_recs":8};
	      $scope.searchText = "";
	      $scope.currentQueueName = localStorage.getItem("queueName");
	      $scope.caseDocSelection = [];
	      $scope.caseDocSelectionChild = [];
	
	//      vm.agentsList = [{'id': '123',
	//				    'name': 'arun'},{'id': '234',
	//				    'name': 'vijay'},{'id': '345',
	//				    'name': 'sandeep'}];
	
		  vm.reviewStates = [
	          {
	            "id": "classification_review",
	            "name":"Review Classification",
	            "screen_uri": ""
	          },
	          {
	            "id": "text_extraction_review",
	            "name":"Review Text Extraction",
	            "screen_uri": ""
	          },
	          {
	            "id": "entity_extraction_review",
	            "name":"Review Entity Extraction",
	            "screen_uri": ""
	          },
	          {
	            "id": "post_processed_review",
	            "name":"Review Post Processed",
	            "screen_uri": ""
	          }
	        ];
	
	      vm.getQueueCases = function(){
	           var reqObj = {
	              "solution_id": $scope.loginData.solutionId,
	              "data": {
	                "filter_by": {
	                  "search_by": $scope.searchText,
	                  "queue_id": $stateParams.id,
	                  "pagination": {
	                    "page_no": $scope.filterObj.page_no,
	                    "no_of_recs": $scope.filterObj.no_of_recs,
	                    "sort_by": "created_ts",
	                    "order_by": false
	                  }
	                }
	              }
	          }
	
	          agentDocumentsListService.getQueueDocuments(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	                       vm.caseDocumentsList = data.data.metadata.documents;
	//                       vm.agentsList = data.data.agents;
	//                       vm.stateOfDocument = data.data.state;
	                       if(data.data.metadata.total_documents != undefined)
	                           vm.documentsLength = data.data.metadata.total_documents;
	//                       vm.queueList = data.data.queue_name;
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	      };
	
	      setTimeout(function request() {
	            vm.getQueueCases()
	      }, 1500);
	
	      vm.getAgentsList = function(){
	           var userGroups = JSON.parse(localStorage.getItem("userGroups"));
	           if(userGroups != null && $stateParams.id != "Uncategorized"){
	               var reqObj = {
	                                'solution_id': $scope.loginData.solutionId,
	                                'data':{'roles': ['bu', 'sv'],"user_groups": userGroups.user_groups,"queue_id":userGroups.id}
	                            };
	           }
	           else{
	               var reqObj = {
	                                'solution_id': $scope.loginData.solutionId,
	                                'data':{'roles': ['bu', 'sv'],"user_groups":[],"queue_id": "Uncategorized"}
	                            };
	           }
	
	           agentDocumentsListService.getAgents(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	               if(data.data.status.success){
	                   vm.agentsList = data.data.metadata.agents;
	               }
	               else{
	                   $.UIkit.notify({
	                           message : data.data.status.msg,
	                           status  : 'danger',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	               }
	           },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	           });
	      };
	
	      vm.getAgentsList();
	
	      vm.showDropdown = function(index,e){
	            e.stopPropagation();
	            $scope.showAgentDrop = [];
	            $scope.showAgentDrop[index] = true;
	      };
	
	      vm.showChildDropdown = function(arr,index,e){
	            e.stopPropagation();
	            $scope.showAgentChildDrop = [];
	            $scope.showAgentChildDrop[index] = true;
	      };
	
	      vm.showQueDropdown = function(index,e){
	            e.stopPropagation();
	            $scope.showQueueDrop = [];
	            $scope.showQueueDrop[index] = true;
	      };
	
	      vm.showQueChildDropdown = function(index,e){
	            e.stopPropagation();
	            $scope.showChildQueueDrop = [];
	            $scope.showChildQueueDrop[index] = true;
	      }
	
	      vm.assignAgent = function(obj){
	            var casesList = [];
	            var selectedUser = vm.agentsList.filter(function(e){if(e.id==vm.agentSelected){return e}});
	
	            var reqObj = {
	              "data": {
	                "cases": [{
	                    "user_id": vm.agentSelected,
	                    "case_id": obj.case_id,
	                    "user_name": selectedUser[0].name
	                }]
	              },
	              "solution_id": $scope.loginData.solutionId
	            }
	
	            $scope.updateCase(reqObj);
	      };
	
	      vm.assignQueue = function(obj){
	            var reqObj = angular.copy(obj);
	            var parsed = JSON.parse(vm.queueSelected);
	            reqObj.queue_id = parsed.queue_id;
	            var reqArray = [];
	            reqArray.push(reqObj);
	//            $scope.updateCase(reqArray);
	      };
	
	      $scope.updateCase = function(reqObj){
	            supervisorDocumentsListService.assignAgent(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	                       $scope.showAgentDrop = [];
	                       $scope.showQueueDrop = [];
	                       $scope.caseDocSelection = [];
	                       $scope.caseDocSelectionChild = [];
	                       for(var i=0;i<reqObj.data.cases.length;i++){
	                           var indexVal = vm.caseDocumentsList.findIndex(x => x.case_id==reqObj.data.cases[i].case_id);
	                           vm.caseDocumentsList[indexVal].user_id = reqObj.data.cases[i].user_id;
	                           vm.caseDocumentsList[indexVal].user_name = reqObj.data.cases[i].user_name;
	                       };
	                       vm.agentSelected = "";
	//                       vm.getQueueCases();
	                       $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'success',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	      };
	
	      vm.getProcessListDetails =function(obj,type,index){
	            if(obj.child_cases.length>0)
	              return;
	            if(obj.assignee != null){
	                $rootScope.queueId = $stateParams.id;
	                if(obj.doc_state == 'processing'){
	                }
	                else if(obj.doc_state == 'classified'){
	                    $state.go("app.multiPage",{id:obj.doc_id,queue:$stateParams.id})
	                }
	                else if(obj.doc_state == 'extracted'){
	                    $state.go("app.extraction",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                }
	                else if(obj.doc_state == 'processed'){
	                    $state.go("app.entityLinking",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                }
	                else if(obj.doc_state == 'post_processed'){
	                   $state.go("app.review",{id:obj.doc_id, type:"none",queue:$stateParams.id,state: obj.doc_state})
	                }
	                else if(obj.doc_state == 'reviewed'){
	                    $state.go("app.review",{id:obj.doc_id, type:"none",queue:$stateParams.id,state: obj.doc_state})
	                }
	                else{
	                    if(obj.extn != "email"){
	                        if(obj.is_failed==undefined)
	                           $scope.stateChange(obj,type,index);
	                        else{
	                           if(!obj.is_failed)
	                             $scope.stateChange(obj,type,index);
	                        }
	                    }
	                    else{
	                        $state.go("app.review",{id:obj.doc_id, type:"email",queue:$stateParams.id,state: obj.doc_state})
	                    }
	                }
	            }
	            else{
	                $.UIkit.notify({
	                       message : "Please assign agent to review this document",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	                });
	            }
	      };
	
	      vm.navigateReview = function(obj){
	            if(obj.user_id != null){
	                $rootScope.queueId = $stateParams.id;
	                if(obj.review_id != undefined){
	                    if(obj.review_id != null){
	                        var arr = vm.reviewStates.filter(function(e){if(e.id==obj.review_id){return e}});
	                        if(arr[0].id=="classification_review"){
	                            $state.go("app.multiPage",{id:obj.doc_id,queue:$stateParams.id});
	                        }
	                        else if(arr[0].id=="text_extraction_review"){
	                            $state.go("app.extraction",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                        }
	                        else if(arr[0].id=="entity_extraction_review"){
	                            $state.go("app.entityLinking",{id:obj.doc_id,type:'none',queue:$stateParams.id})
	                        }
	                        else if(arr[0].id=="post_processed_review"){
	                            $state.go("app.review",{id:obj.doc_id, type:"none",queue:$stateParams.id,state: obj.state})
	                        }
	                    }
	                }
	            }
	            else{
	                $.UIkit.notify({
	                       message : "Please assign agent to review this document",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	                });
	            }
	      };
	
	      $scope.getChildDetails = function(obj,index){
	            if(obj.child_cases.length>0){
	              if(!obj.isExpanded){
	                  var reqObj = {'solution_id': $scope.loginData.solutionId,
	                      'data':{
	                            "parent_id": obj.case_id,
	                            'queue_id': $stateParams.id
	                         }
	                     }
	                  obj.spinner = true;
	                  agentDocumentsListService.childDocs(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                       if(data.data.status.success){
	                          //$scope.processListData=data.data.data;
	                          obj.child_cases = data.data.metadata.documents;
	                          obj.isExpanded = !obj.isExpanded;
	                          obj.spinner = false;
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                       }
	                  },function(err){
	                    console.log(err)
	                   $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	                  });
	              }
	              else{
	                obj.isExpanded = !obj.isExpanded
	                obj.spinner = false;
	              }
	
	            }
	
	      };
	
	      $scope.pageChanged = function(newPage) {
	        $scope.filterObj.page_no = newPage;
	        $scope.caseDocSelection = [];
	        $scope.caseDocSelectionChild = [];
	        vm.getQueueCases();
	      };
	
	      $scope.monthShort = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
	
	      $scope.formatDateInList = function(ts){
	           var date = new Date();
	           var tsDate = new Date(ts);
	           var currentDate = date.getMonth() + "-" + date.getDate() + "-" + date.getYear();
	           var yestrdyDate = date.getMonth() + "-" + (date.getDate()-1) + "-" + date.getYear();
	           var updatedTs = tsDate.getMonth() + "-" + tsDate.getDate() + "-" + tsDate.getYear();
	           if(currentDate == updatedTs){
	               if(tsDate.getHours()<12){
	                   return tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "AM";
	               }
	               else{
	                   if(tsDate.getHours()==12)
	                       return tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "PM";
	                   else
	                       return (tsDate.getHours()-12)+':'+tsDate.getMinutes()+" "+ "PM";
	               }
	           }
	           else if(yestrdyDate == updatedTs){
	               if(tsDate.getHours()<12)
	                   return 'Yesterday @ '+tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "AM";
	               else{
	                   if(tsDate.getHours()==12)
	                       return 'Yesterday @ '+tsDate.getHours()+':'+tsDate.getMinutes()+" "+ "PM";
	                   else
	                       return 'Yesterday @ '+(tsDate.getHours()-12)+':'+tsDate.getMinutes()+" "+ "PM";
	               }
	           }
	           else{
	               if(tsDate.getHours()<12)
	                   return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+tsDate.getHours()+' '+'AM';
	               else{
	                   if(tsDate.getHours()==12)
	                       return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+tsDate.getHours()+' '+'PM';
	                   else
	                       return tsDate.getDate()+' '+$scope.monthShort[tsDate.getMonth()]+', '+(tsDate.getHours()-12)+' '+'PM';
	               }
	           }
	     };
	
	     $scope.caseSelectFunct = function(){
	        var setFlag = false;
	        for(var i=0;i<$scope.caseDocSelection.length;i++){
	            if($scope.caseDocSelection[i]){
	                setFlag = true;
	            }
	        };
	        $scope.transferSelectionFlag = setFlag;
	     };
	
	     $scope.caseSelectFunctChild = function(){
	        var setFlag = false;
	
	        for(var i=0;i<$scope.caseDocSelectionChild.length;i++){
	            angular.forEach($scope.caseDocSelectionChild[i],function(value,key){
	                if(value){
	                    setFlag = true;
	                }
	            });
	        };
	        $scope.transferSelectionFlagChild = setFlag;
	     };
	
	     vm.transferTo = function(){
	        var transferDocs = [];
	        var casesSelected = [];
	        for(var i=0;i<$scope.caseDocSelection.length;i++){
	            if($scope.caseDocSelection[i]){
	                transferDocs.push(vm.caseDocumentsList[i]);
	            }
	        };
	        for(var i=0;i<$scope.caseDocSelectionChild.length;i++){
	            angular.forEach($scope.caseDocSelectionChild[i],function(value,key){
	                if(value){
	                    transferDocs.push(vm.caseDocumentsList[i].child_cases[key]);
	                }
	            });
	        };
	        for(var i=0;i<transferDocs.length;i++){
	            casesSelected.push(transferDocs[i].case_id);
	        };
	
	        var casesList = [];
	        var selectedUser = vm.agentsList.filter(function(e){if(e.id==vm.agentSelected){return e}});
	
	        for(var i=0;i<casesSelected.length;i++){
	            casesList.push({"user_id": vm.agentSelected,"case_id":casesSelected[i],"user_name":selectedUser[0].name});
	        }
	
	        var reqObj = {
	          "data": {
	            "cases": casesList
	          },
	          "solution_id": $scope.loginData.solutionId
	        }
	
	        $scope.updateCase(reqObj);
	     };
	
	     $scope.returnFilename = function(arr){
	        if("metadata_properties_filename" in  arr && arr["metadata_properties_filename"] != null){
	            return arr["metadata_properties_filename"];
	        } else  if("metadata.properties.filename" in  arr && arr["metadata.properties.filename"] != null){
	            return arr["metadata.properties.filename"];
	        } else if("source" in arr && arr["source"] != null) {
	            var filePath = arr.source.file_path;
	            var splitArr = filePath.split("/");
	            var fileName = splitArr[splitArr.length-1];
	            return fileName;
	        }
	        return "";
	     };
	
	     $scope.returnTemplatename = function(arr){
	        if("metadata_template_info_name" in  arr && arr["metadata_template_info_name"] != null){
	            return arr["metadata_template_info_name"];
	        } else  if("metadata.template_info.name" in  arr && arr["metadata.template_info.name"] != null){
	            return arr["metadata.template_info.name"];
	        }
	        return "";
	     };
	
	     $scope.checkForReview = function(state){
	        var arr = vm.reviewStates.filter(function(e){if(state == e.id){return e}});
	        if(arr.length > 0)
	            return true;
	        else
	            return false;
	     };
	
	     vm.checkErrDetail = function(list){
	        document.getElementById("errPanel").style.width = "40%";
	        if(list.error_details != undefined)
	            $scope.errDetail = JSON.parse(list.error_details.message);
	        else
	            $scope.errDetail = "";
	     };
	
	     $scope.cancelErr = function () {
	        document.getElementById("errPanel").style.width = "0%";
	     };
	
	     vm.reprocessState = function(obj){
	        agentDocumentsListService.reprocessDoc(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	                       $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'success',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                       });
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	     };
	
	     vm.proceedToNextState = function(obj){
	        agentDocumentsListService.proceedTo(reqObj,vm.sess_id,$scope.loginData.accesstoken).then(function(data){
	                   if(data.data.status.success){
	                       $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'success',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                       });
	                   }
	                   else{
	                         $.UIkit.notify({
	                                   message : data.data.status.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                   }
	            },function(err){
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	            });
	     };
	
	
	
	}];

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"row overlay adaptContainer\" id=\"errPanel\">\n    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\"  style=\"margin-bottom:70px;\">\n        <h4 class=\"push-left\">\n          <span>Error Details</span>\n          <span class=\"pull-right closeRule closebtn\" ng-click=\"cancelErr()\" style=\"cursor:pointer\">&times;</span>\n        </h4>\n        <br>\n        <br>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n                <pre>\n                    {$ errDetail $}\n                </pre>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"container supervisor-container\">\n    <div class=\"row\">\n        <div class=\"col-sm-9 col-xs-9 col-md-9 col-lg-9\">\n            <ol class=\"breadcrumb\">\n              <li><a ui-sref=\"app.supervisorDashboard\">Queues</a></li>\n              <li class=\"active\">{$ currentQueueName $}</li>\n            </ol>\n        </div>\n\n    </div>\n    <div class=\"row row-eq-height\">\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding\">\n            <form ng-submit=\"sdlc.getQueueCases()\">\n                <div class=\"flexContainer\">\n                    <input type=\"text\" class=\"form-control inputField\" ng-model=\"searchText\" placeholder=\"Search\">\n                    <button type=\"submit\"><span class=\"glyphicon glyphicon-search\"></span></button>\n                </div>\n            </form>\n        </div>\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding text-right\">\n            <div class=\"row row-eq-height\" ng-show=\"transferSelectionFlag || transferSelectionFlagChild\">\n                <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-5\">\n                    <span class=\"filterStyle\">Transfer To</span>\n                </div>\n                <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-7 no-padding\">\n                    <form ng-submit=\"sdlc.transferTo()\">\n                        <div class=\"select-box\">\n                            <select class=\"form-control\" ng-model=\"sdlc.agentSelected\" style=\"border-radius:0\" required>\n                                <option value=\"\">select agent</option>\n                                <option ng-repeat=\"opt in sdlc.agentsList\" value=\"{$ opt.id $}\">{$ opt.name $}</option>\n                            </select>\n                            <button type=\"submit\" style=\"padding: 0px;border: none;\">\n                               <i class=\"fa fa-arrow-right icon-right\" aria-hidden=\"true\"></i>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4  no-padding text-right\">\n            <div class=\"row row-eq-height\">\n                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                    <span class=\"filterStyle\">Filters</span>\n                </div>\n                <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9 no-padding\">\n                    <select class=\"form-control\">\n                        <options>All Queues</options>\n                    </select>\n                </div>\n            </div>\n        </div>\n    </div>\n    <br>\n    <div class=\"table-responsive\">\n        <table class=\"table table-bordered\">\n            <thead>\n                <tr>\n                    <td>Case ID</td>\n                    <td>File Name</td>\n                    <td>Template</td>\n                    <td>Task</td>\n                    <td>Status</td>\n                    <td>Recieved On</td>\n                    <td>Assigned To</td>\n                    <td ng-if=\"sdlc.queueType=='uncategorized'\">Queue</td>\n                    <td></td>\n                </tr>\n            </thead>\n            <tbody dir-paginate=\"arr in sdlc.caseDocumentsList | itemsPerPage:filterObj.no_of_recs\" total-items=\"sdlc.documentsLength\" current-page=\"filterObj.page_no\" pagination-id=\"branchPagination\" class=\"hoverRow\">\n                <tr>\n                    <td>\n                        <input type=\"checkbox\" ng-model=\"caseDocSelection[$index]\" ng-change=\"caseSelectFunct()\" ng-disabled=\"arr.user_id == null\"/>\n                        <label ng-click=\"sdlc.navigateReview(arr,'parent',$index)\">{$ arr.case_id $}</label>\n                    </td>\n                    <td class=\"ellipsis\">\n                        <div>\n                        <i class=\"fa fa-file-pdf-o dues\"></i>\n                        <span ng-show=\"arr.child_cases.length>0\" ng-click=\"getChildDetails(arr,$index);$event.stopPropagation();\">\n                            <i ng-show=\"arr.isExpanded\" class=\"fa fa-chevron-down\"></i>\n\n                            <i ng-show=\"!arr.isExpanded\" class=\"fa fa-chevron-right\"></i>\n                        </span>\n                        <span ng-bind=\"returnFilename(arr)\"></span>\n                        <span ng-show=\"arr.child_cases.length>0\">\n                                                        <i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"arr.spinner\"aria-hidden=\"true\"></i>\n\n                        </span>\n                            </div>\n                    </td>\n                    <td ng-bind=\"returnTemplatename(arr)\"></td>\n                    <td>{$ arr.state $}</td>\n                    <td>\n                        <span ng-if=\"arr.processing_state=='failed'\" class=\"errorTraingle\"><i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i></span><span>{$ arr.processing_state $}</span><span ng-if=\"arr.processing_state=='failed'\" class=\"infoIcon\" ng-click=\"sdlc.checkErrDetail(arr)\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></span>\n                    </td>\n                    <td>{$ formatDateInList(arr.created_ts) $}</td>\n                    <td>\n                        <a ng-if=\"arr.user_id == null && !showAgentDrop[$index] && checkForReview(arr.review_id)\" ng-click=\"sdlc.showDropdown($index,$event)\">Un Assigned</a>\n                        <span ng-show=\"showAgentDrop[$index]\">\n                            <form ng-submit=\"sdlc.assignAgent(arr)\">\n                                <div class=\"select-box\">\n                                    <select class=\"form-control\" ng-model=\"sdlc.agentSelected\" style=\"border-radius:0\" required>\n                                        <option value=\"\">select agent</option>\n                                        <option ng-repeat=\"opt in sdlc.agentsList\" value=\"{$ opt.id $}\">{$ opt.name $}</option>\n                                    </select>\n                                    <button type=\"submit\" style=\"padding: 0px;border: none;\">\n                                       <i class=\"fa fa-arrow-right icon-right\" aria-hidden=\"true\"></i>\n                                    </button>\n                                </div>\n                            </form>\n                        </span>\n                        <span ng-if=\"arr.user_id != null && !showAgentDrop[$index]\">{$ arr.user_name $}</span>\n                        <!--<span ng-if=\"arr.assignee != null && !showAgentDrop[$index]\" ng-click=\"sdlc.showDropdown($index,$event)\"><i class=\"fa fa-pencil\" style=\"padding-left:8px;\"></i></span>-->\n                    </td>\n                    <td ng-if=\"sdlc.queueType=='uncategorized'\">\n                        <a ng-if=\"arr.queue_name == undefined && !showQueueDrop[$index]\" ng-click=\"sdlc.showQueDropdown($index,$event)\">Un Assigned</a>\n                        <span ng-show=\"arr.queue_name == undefined && showQueueDrop[$index]\">\n                            <form ng-submit=\"sdlc.assignQueue(arr)\">\n                                <div class=\"select-box\">\n                                    <select class=\"form-control\" ng-model=\"sdlc.queueSelected\" style=\"border-radius:0\" required>\n                                        <option value=\"\">Select Queue</option>\n                                        <option ng-repeat=\"opt in sdlc.queueList\" value=\"{$ opt $}\">{$ opt.queue_name $}</option>\n                                    </select>\n                                    <button type=\"submit\" style=\"padding: 0px;border: none;\">\n                                       <i class=\"fa fa-arrow-right icon-right\" aria-hidden=\"true\"></i>\n                                    </button>\n                                </div>\n                            </form>\n                        </span>\n                        <span ng-if=\"arr.queue_name != undefined\">{$ arr.queue_name $}</span>\n                    </td>\n                    <td>\n                        <div class=\"dropdown\" ng-if=\"arr.processing_state=='failed'\">\n                            <i class=\"fa fa-ellipsis-v dropdown-toggle\" data-toggle=\"dropdown\"></i>\n                            <ul class=\"dropdown-menu-edit\">\n                              <li ng-click=\"sdlc.reprocessState(arr)\"><a>Reprocess {$ arr.state $}</a></li>\n                              <li ng-click=\"sdlc.proceedToNextState(arr)\"><a>Force Complete {$ arr.state $}</a></li>\n                              <li><a>Report Issue</a></li>\n                            </ul>\n                        </div>\n                    </td>\n                </tr>\n                <tr ng-repeat=\"data in arr.child_cases\" ng-show=\"arr.isExpanded && arr.child_cases.length>0 \" style=\"border-bottom:none !important;\" ng-class=\"!data.highlight?'row_fade_in':''\">\n                    <td>\n                        <input type=\"checkbox\" ng-model=\"caseDocSelectionChild[$parent.$index][$index]\" ng-change=\"caseSelectFunctChild()\" ng-disabled=\"data.user_id == null\"/>\n                        <label ng-click=\"sdlc.navigateReview(data,'parent',$index);$event.stopPropagation();\">{$ data.case_id $}</label>\n                    </td>\n                    <td ng-disabled=\"!data.highlight\">\n                        <i class=\"fa fa-file-pdf-o dues\"></i>\n\n\n                        <span ng-bind=\"returnFilename(data)\"></span>\n\n                    </td>\n                    <td ng-disabled=\"!data.highlight\" ng-bind=\"returnTemplatename(data)\"></td>\n                    <td ng-disabled=\"!data.highlight\">{$ data.state $}</td>\n                    <td ng-disabled=\"!data.highlight\">\n                        <span ng-if=\"data.processing_state=='failed'\" class=\"errorTraingle\"><i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i></span><span>{$ data.processing_state $}</span><span ng-if=\"arr.processing_state=='failed'\" class=\"infoIcon\" ng-click=\"sdlc.checkErrDetail(arr)\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></span>\n                    </td>\n                    <td>{$ formatDateInList(data.created_ts) $}</td>\n                    <td>\n                        <a ng-if=\"data.user_id == null && !showAgentChildDrop[$index] && checkForReview(data.review_id)\" ng-click=\"sdlc.showChildDropdown(arr,$index,$event)\">Un Assigned</a>\n                        <span ng-show=\"data.user_id == null && showAgentChildDrop[$index]\">\n                            <form ng-submit=\"sdlc.assignAgent(data)\">\n                                <div class=\"select-box\">\n                                    <select class=\"form-control\" ng-model=\"sdlc.agentSelected\" style=\"border-radius:0\" required>\n                                        <option value=\"\">select agent</option>\n                                        <option ng-repeat=\"opt in sdlc.agentsList\" value=\"{$ opt.id $}\">{$ opt.name $}</option>\n                                    </select>\n                                    <button type=\"submit\" style=\"padding: 0px;border: none;\">\n                                       <i class=\"fa fa-arrow-right icon-right\" aria-hidden=\"true\"></i>\n                                    </button>\n                                </div>\n                            </form>\n                        </span>\n                        <span ng-if=\"data.user_id != null\">{$ data.user_name $}</span>\n                    </td>\n                    <td ng-if=\"sdlc.queueType=='uncategorized'\">\n                        <a ng-if=\"data.queue_name == undefined && !showChildQueueDrop[$index]\" ng-click=\"sdlc.showQueChildDropdown($index,$event)\">Un Assigned</a>\n                        <span ng-show=\"data.queue_name == undefined && showChildQueueDrop[$index]\">\n                            <form ng-submit=\"sdlc.assignQueue(data)\">\n                                <div class=\"select-box\">\n                                    <select class=\"form-control\" ng-model=\"sdlc.queueSelected\" style=\"border-radius:0\" required>\n                                        <option value=\"\">Select Queue</option>\n                                        <option ng-repeat=\"opt in sdlc.queueList\" value=\"{$ opt $}\">{$ opt.queue_name $}</option>\n                                    </select>\n                                    <button type=\"submit\" style=\"padding: 0px;border: none;\">\n                                       <i class=\"fa fa-arrow-right icon-right\" aria-hidden=\"true\"></i>\n                                    </button>\n                                </div>\n                            </form>\n                        </span>\n                        <span ng-if=\"data.queue_name != undefined\">{$ data.queue_name $}</span>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"right\">\n            <dir-pagination-controls max-size=filterObj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>\n        </div>\n    </div>\n\n    <!-- Un Categorized Queue tables -->\n\n    <!--<div class=\"table-responsive\">-->\n        <!--<table class=\"table table-bordered\">-->\n            <!--<thead>-->\n                <!--<tr>-->\n                    <!--<td>Case ID</td>-->\n                    <!--<td>File Name</td>-->\n                    <!--<td>Status</td>-->\n                    <!--<td>Assigned To</td>-->\n                    <!--<td>Template</td>-->\n                    <!--<td>Solution</td>-->\n                    <!--<td>State</td>-->\n                    <!--<td>Queue</td>-->\n                <!--</tr>-->\n            <!--</thead>-->\n            <!--<tbody>-->\n                <!--<tr>-->\n                    <!--<td>-->\n                       <!--<input class=\"styled-checkbox\" id=\"checkbox-1\" type=\"checkbox\" value=\"value2\">-->\n                        <!--<label for=\"checkbox-1\">12743</label>-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--<i class=\"fa fa-file-pdf-o dues\"></i>-->\n                        <!--file name-->\n                    <!--</td>-->\n                    <!--<td>New</td>-->\n                    <!--<td>-->\n                        <!--<a>Un Assigned</a>-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--Template Name-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--Solution Name-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--Extraction-->\n                    <!--</td>-->\n                    <!--<td>-->\n                        <!--<span class=\"queueName\">Queue Name</span>-->\n                        <!--<span class=\"queueSelect\">-->\n                            <!--<select class=\"form-control\">-->\n                                <!--<option>Queue 1</option>-->\n                                <!--<option>Queue 2</option>-->\n                                <!--<option>Queue 3</option>-->\n\n                            <!--</select>-->\n                        <!--</span>-->\n                    <!--</td>-->\n\n                <!--</tr>-->\n            <!--</tbody>-->\n        <!--</table>-->\n    </div>\n\n</div>"

/***/ }),
/* 107 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.supervisorDocumentsListService', [])
			.service('supervisorDocumentsListService', function($state,$q, $http,httpPayload) {
	
	          var _assignAgent = function(obj,sess_id,access) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/case/assign',
	                  headers: httpPayload.getHeader(),
	                  data:obj
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var supervisorDocumentsListService = {
	            assignAgent:_assignAgent
	          };
	
	          return supervisorDocumentsListService;
			});
	})();

/***/ }),
/* 108 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.documentsListServices', [])
			.service('documentsListService', function($state,$q, $http,httpPayload) {
	
	
	           var _getProcessList = function(data) {
	                var req = httpPayload.fetchPostHeader('api/getInsights/',data.data);
	                var deferred = $q.defer();
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	          };
	
	          var _postProcessList = function(recId,days,sess_id,text,docType,searchKey) {
	            var req = httpPayload.fetchGetHeader('api/getRecord/'+days+"/"+docType+"/"+recId+"/"+text+"/"+searchKey);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getFieldLevelData = function(obj) {
	            var req = httpPayload.fetchGetHeader('api/chart/one/'+obj.days);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getDocumentLevelData = function(obj) {
	            var req = httpPayload.fetchGetHeader('api/chart/two/'+obj.days);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getListDays = function(obj) {
	            var req = httpPayload.fetchGetHeader('api/selectors/one/');
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	
	          var _getDocumentTypesList = function(data) {
	            var req = httpPayload.fetchGetHeader('api/get/template/allpublished/');
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getClassificationInfo = function(data) {
	            var req = httpPayload.fetchGetHeader('api/grouping/review/'+data.id+'/');
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	          var _reviewedClassification = function(data) {
	            var req = httpPayload.fetchPostHeader('api/grouping/review/'+data.id+'/',data.data);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getDomainObjectsList = function(data) {
	                var req = httpPayload.fetchGetHeader('api/solnConfig/domainobject/');
	                var deferred = $q.defer();
	                $http(req).success(function(data) {
	                    deferred.resolve({
	                        data: data
	                    });
	                }).error(function(data) {
	                    deferred.reject({
	                        error: data
	                    });
	                });
	                return deferred.promise;
	          };
	
	          var dashboardService = {
	            getProcessList:_getProcessList,
	            postProcessList:_postProcessList,
	            getFieldLevelData:_getFieldLevelData,
	            getDocumentLevelData:_getDocumentLevelData,
	            getListDays:_getListDays,
	            getDocumentTypesList:_getDocumentTypesList,
	            getClassificationInfo:_getClassificationInfo,
	            reviewedClassification:_reviewedClassification,
	            getDomainObjectsList:_getDomainObjectsList
	          };
	
	          return dashboardService;
			});
	})();

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	    //require('./services/module.js');
		//require('./dashboard/dashboard.module.js');
		//require('./entitygraph/entitygraph.module.js');
		//require('./solutionsetup/solutionsetup.module.js');
	
		module.exports = angular.module('console.documentReview', [
	        //'console.dashboard.entitygraph'
		    //'console.dashboard.solutionsetup'
		    //'console.layout.bodycontent.dashboard.services'
		])
	        .controller('documentReviewController', __webpack_require__(110))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.documentReview', {
	               url: '/documentReview',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(111),
	                        controller: 'documentReviewController',
	                        controllerAs: 'drc',
	                        cache :false,
	                        resolve: {
	
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                        window.location.href = "http://"+ location.host+"/";
	                                 }
	                              }
	//                              getDocumentTypes: ['$stateParams', 'documentReviewService', function($stateParams, documentReviewService){
	//                                var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                var sess_id= loginData.sess_id;
	//                                return documentReviewService.getDocumentTypesList({'sess_id':sess_id});
	//                              }]
	                        }
	
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 110 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$compile','$rootScope','$location','$sce','documentReviewService','dashboardService',function($scope,$state,$compile,$rootScope,$location,$sce,documentReviewService,dashboardService) {
		'use strict';
	      var vm = this;
	      var url = $location.path();
	      var arr = url.split("/");
	      window.scrollTo(0,0);
	      $scope.selectedObj={};
	      $scope.selectedObj.val='processed'
	      $rootScope.currentState = 'documentReview';
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	      $rootScope.inSolution = true;
	      $scope.showlist=true;
	      $scope.processListDataList = [];
	      $scope.filter_obj ={'page_no':1,'no_of_recs':8,'sort_by': 'ts', 'order_by': false,'totalRecords':0};
	
	      var filterObj = JSON.parse(localStorage.getItem('filterObj'));
	         if(filterObj == null || filterObj == undefined){
	            $scope.filter_obj = $scope.filter_obj;
	            $scope.filter_obj.doc_state = 'processed';
	            $scope.filter_obj.template_name = 'All Document Types';
	            $scope.filter_obj.search_string = '';
	         }else{
	           $scope.filter_obj = filterObj;
	         }
	      $scope.getDocumentsList = function(){
	         var reqObj = angular.copy($scope.filter_obj);
	             delete reqObj.totalRecords;
	             if(reqObj.hasOwnProperty('current_record_no')){
	               delete reqObj.current_record_no;
	             }
	             if(reqObj.hasOwnProperty('template_name')){
	               if(reqObj.template_name == 'All Document Types')
	                 delete reqObj.template_name;
	             }
	             if(reqObj.hasOwnProperty('search_string')){
	               if(reqObj.search_string == '')
	                 delete reqObj.search_string;
	             }
	
	         dashboardService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':reqObj}}).then(function(data){
	                       if(data.data.status=="success"){
	                          $scope.processListData=data.data.data;
	                          $scope.processListDataList = $scope.processListData.data;
	                          $scope.filter_obj.totalRecords = data.data.data.total_count;
	                          $scope.recentRecords = [];
	                          angular.forEach($scope.processListDataList,function(value,key){
	                             var digital = false
	                            if(value.hasOwnProperty('is_digital'))
	                               digital = true;
	                            $scope.recentRecords.push({'doc_id':value.doc_id,'mime_type':value.mime_type,'is_digital':digital});
	                          });
	                          localStorage.setItem('recentRecords',JSON.stringify($scope.recentRecords))
	                          localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                       }
	         },function(err){
	            console.log(err)
	           $.UIkit.notify({
	                   message : "Internal server error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	           });
	         });
	      };
	
	      $scope.getDocumentsList();
	
	
	      $scope.getProcessListDetails =function(obj,type,index){
	        //if((obj['Status'].value).toLowerCase() !='pending'){
	          $scope.filter_obj.current_record_no = index;
	          localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	          if(obj.hasOwnProperty("is_digital"))
	             var prop = "none";
	          else
	             var prop = "none"
	          if(type=='child')
	            $state.go("app.review",{id:obj.doc_id, type:prop})
	          else{
	            if(obj.child_documents.length>0 && obj.mime_type != "email"){
	              if(!obj.isExpanded){
	                  obj.spinner = true;
	                  dashboardService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':{'doc_id':obj.doc_id,'child_documents':true}}}).then(function(data){
	                       if(data.data.status=="success"){
	                          $scope.processListData=data.data.data;
	                          obj.child_documents = $scope.processListData.data;
	                          obj.isExpanded = !obj.isExpanded;
	                          obj.spinner = false;
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                       }
	                  },function(err){
	                    console.log(err)
	                   $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	                  });
	              }
	              else{
	                obj.isExpanded = !obj.isExpanded
	              }
	
	            }
	            else{
	             $state.go("app.review",{id:obj.doc_id, type:prop})
	            }
	          }
	        //}
	
	      };
	
	      $scope.getProcessListDetailsForEmail = function(obj,type,index,e){
	          e.stopPropagation();
	         //if((obj['Status'].value).toLowerCase() !='pending'){
	          $scope.filter_obj.current_record_no = index;
	          localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	          if(obj.hasOwnProperty("is_digital"))
	             var prop = "none";
	          else
	             var prop = "none"
	          if(type=='child')
	            $state.go("app.review",{id:obj.doc_id, type:prop})
	          else{
	            if(obj.child_documents.length>0){
	              if(!obj.isExpanded){
	                  obj.spinner = true;
	                  dashboardService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':{'doc_id':obj.doc_id,'child_documents':true}}}).then(function(data){
	                       if(data.data.status=="success"){
	                          $scope.processListData=data.data.data;
	                          obj.child_documents = $scope.processListData.data;
	                          obj.isExpanded = !obj.isExpanded;
	                          obj.spinner = false;
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	                       }
	                  },function(err){
	                    console.log(err)
	                   $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                   });
	                  });
	              }
	              else{
	                obj.isExpanded = !obj.isExpanded
	              }
	
	            }
	            else{
	             $state.go("app.review",{id:obj.doc_id, type:prop})
	            }
	          }
	        //}
	      };
	
	      $scope.pageChanged = function(newPage) {
	        $scope.filter_obj.page_no = newPage;
	        $scope.getDocumentsList();
	      };
	
	       $scope.sort = {
	        column: 'ts',
	        descending: false
	    };
	
	
	    $scope.selectedCls = function(column) {
	        return column == $scope.sort.column && 'sort-' + $scope.sort.descending;
	    };
	
	    $scope.changeSorting = function(column) {
	        var sort = $scope.sort;
	        if (sort.column == column) {
	            sort.descending = !sort.descending;
	        } else {
	            sort.column = column;
	            sort.descending = false;
	        }
	
	        $scope.filter_obj.sort_by = column;
	        $scope.filter_obj.order_by = sort.descending;
	        if(column == 'mime_type'){
	          $scope.filter_obj.sort_by = 'metadata.mime_type'
	        }
	        $scope.getDocumentsList();
	
	    };
	    $scope.changeDocState = function(type){
	        $scope.filter_obj.doc_state = type;
	        $scope.getDocumentsList();
	    };
	
	    $scope.getDocumentTypes = function () {
	        dashboardService.getDocumentTypesList({'sess_id':vm.sess_id}).then(function (data) {
	            if(data.data.status=='success'){
	                $scope.listOfDocumentTypes = data.data.doc_types;
	                $scope.listOfDocumentTypes.unshift({'template_name':'All Document Types'});
	            }
	            else{
	                $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                });
	            }
	        },function (err) {
	            $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	            });
	        })
	    };
	
	    $scope.getDocumentTypes();
	
	    $scope.keyEnter = function (event) {
	       if(event.which === 13) {
	           $scope.getDocumentsList();
	       }
	       if($scope.filter_obj.search_string == '')
	          $scope.getDocumentsList();
	
	    };
	
	    $scope.clearSearch = function () {
	        $scope.filter_obj.search_string = '';
	        $scope.getDocumentsList();
	    };
	
	}];

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	module.exports = "\n<div class=\"custom-header\">\n    <div class=\"row\">\n      <div class=\"col-lg-8 col-sm-8 col-md-8\">\n        <div class=\"btn-group\">\n          <!--<span class=\"documentsList-Text\">Type</span>-->\n          <!--<select class=\"select-style form-control\" ng-model=\"selectedObj.val\"  ng-change=\"changeReview(selectedObj.val)\">-->\n              <!--<option value=\"processed\" ng-selected=\"true\">All Documents</option>-->\n\n            <!--</select>-->\n            <ul class=\"nav nav-tabs nav-reviewTabs\" style=\"padding-top:10px;\">\n                <li ng-class=\"filter_obj.doc_state=='processed'?'active':''\"><a data-toggle=\"tab\" href=\".processed\" ng-click=\"changeDocState('processed')\">Processed</a></li>\n                <li ng-class=\"filter_obj.doc_state=='reviewed'?'active':''\"><a data-toggle=\"tab\" href=\".reviewed\" ng-click=\"changeDocState('reviewed')\">Reviewed</a></li>\n\n              </ul>\n        </div>\n\n        <div class=\"btn-group header-Style\">\n          <p class=\"dashboard-Text\">Filter by</p>\n           <select class=\"select-smallStyle form-control\" ng-model=\"filter_obj.template_name\" ng-change=\"getDocumentsList()\">\n            <option ng-repeat=\"(key,value) in listOfDocumentTypes track by $index\" ng-selected=\"documentType.val == value.template_name\" value=\"{$  value.template_name $}\">{$  value.template_name $}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"col-lg-4 col--sm-4 col-md-4\">\n        <div class=\"input-group topSpace\">\n          <input type=\"search\" ng-model=\"filter_obj.search_string\"  class=\"newcustom-form form-control\" placeholder=\"Search by\" ng-keyup=\"keyEnter($event)\">\n            <span class=\"glyphicon glyphicon-remove-circle searchclear\" ng-click=\"clearSearch()\"></span>\n            <!--ng-keypress=\"keyEnter($event)\"-->\n          <span class=\"input-group-btn\">\n            <button class=\"btn btn-newStyle\" ng-click=\"getDocumentsList()\" type=\"button\"><i class=\"fa fa-search\"></i></button>\n          </span>\n        </div>\n      </div>\n    </div>\n</div>\n<div class=\"tab-content\">\n    <div class=\"tab-pane fade  processed\" ng-class=\"filter_obj.doc_state=='processed'?'in active':''\">\n        <div class=\"row\">\n    <div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">\n        <div class=\"table-scroll\" ng-show=\"showlist\" style=\"margin-top:15px;\">\n            <table class=\"table table-responsive table-hovered\">\n                <thead class=\"tableHeading\">\n                <th ng-repeat=\"heading in processListData.config\" ng-click=\"changeSorting(heading.key)\">{$ heading.value $} <div class=\"alignSort\" ng-class=\"selectedCls(heading.key)\"></div></th>\n                </thead>\n                <tbody dir-paginate=\"row in processListDataList |itemsPerPage:filter_obj.no_of_recs \" total-items=\"filter_obj.totalRecords\" current-page=\"filter_obj.page_no\" pagination-id=\"branchPagination\"  style=\"cursor:pointer\">\n                    <tr ng-click=\"getProcessListDetails(row,'parent',$index)\">\n                        <td ng-repeat=\"heading in processListData.config\" >\n                          <span ng-show=\"row.child_documents.length>0 && $index==0\">\n                            <i ng-show=\"row.isExpanded\" class=\"fa fa-chevron-down\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>\n                            <i ng-show=\"!row.isExpanded\" class=\"fa fa-chevron-right\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>\n                          </span>\n                            <span>{$ row[heading.key] $}</span>\n                          <span ng-show=\"row.child_documents.length>0 && $index==0\">\n                            <i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"row.spinner\"aria-hidden=\"true\"></i>\n\n                          </span>\n                        </td>\n                    </tr>\n\n                        <tr ng-repeat=\"dummy in row.child_documents\" ng-show=\"row.isExpanded && row.child_documents.length>0 \" ng-click=\"getProcessListDetails(dummy,'child',$parent.$index)\" style=\"    border: 1px solid black;\n    background-color: #ebedef;\">\n                            <td ng-repeat=\"heading in processListData.config\" >\n                                <span>{$ dummy[heading.key] $}</span>\n                            </td>\n\n                        </tr>\n\n                </tbody>\n            </table>\n            <div class=\"right\">\n                <dir-pagination-controls max-size=filter_obj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>\n            </div>\n        </div>\n    </div>\n</div>\n    </div>\n    <div class=\"tab-pane fade reviewed\" ng-class=\"filter_obj.doc_state=='reviewed'?'in active':''\">\n         <div class=\"row\">\n    <div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\">\n        <div class=\"table-scroll\" ng-show=\"showlist\" style=\"margin-top:15px;\">\n            <table class=\"table table-responsive table-hovered\">\n                <thead class=\"tableHeading\">\n                <th ng-repeat=\"heading in processListData.config\" ng-click=\"changeSorting(heading.key)\">{$ heading.value $} <div class=\"alignSort\" ng-class=\"selectedCls(heading.key)\"></div></th>\n                </thead>\n                <tbody dir-paginate=\"row in processListDataList |itemsPerPage:filter_obj.no_of_recs | filter:searchValue\" total-items=\"filter_obj.totalRecords\" current-page=\"filter_obj.page_no\" pagination-id=\"branchPagination\"  style=\"cursor:pointer\">\n                    <tr ng-click=\"getProcessListDetails(row,'parent',$index)\">\n                        <td ng-repeat=\"heading in processListData.config\" >\n                          <span ng-show=\"row.child_documents.length>0 && $index==0\">\n                            <i ng-show=\"row.isExpanded\" class=\"fa fa-chevron-down\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>\n                            <i ng-show=\"!row.isExpanded\" class=\"fa fa-chevron-right\" ng-click=\"getProcessListDetailsForEmail(row,'parent',$index,$event)\"></i>\n                          </span>\n                            <span>{$ row[heading.key] $}</span>\n                          <span ng-show=\"row.child_documents.length>0 && $index==0\">\n                            <i class=\"fa fa-cog fa-spin  fa-fw margin-bottom\" ng-show=\"row.spinner\"aria-hidden=\"true\"></i>\n\n                          </span>\n                        </td>\n                    </tr>\n\n                        <tr ng-repeat=\"dummy in row.child_documents\" ng-show=\"row.isExpanded && row.child_documents.length>0 \" ng-click=\"getProcessListDetails(dummy,'child',$parent.$index)\" style=\"    border: 1px solid black;\n    background-color: #ebedef;\">\n                            <td ng-repeat=\"heading in processListData.config\" >\n                                <span>{$ dummy[heading.key] $}</span>\n                            </td>\n\n                        </tr>\n\n                </tbody>\n            </table>\n            <div class=\"right\">\n                <dir-pagination-controls max-size=filter_obj.no_of_recs direction-links=\"true\" pagination-id=\"branchPagination\" boundary-links=\"true\" on-page-change=\"pageChanged(newPageNumber)\"></dir-pagination-controls>\n            </div>\n        </div>\n    </div>\n</div>\n    </div>\n\n</div>\n"

/***/ }),
/* 112 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.documentReviewServices', [])
			.service('documentReviewService', function($state,$q, $http, httpPayload) {
	
	            var _getData = function(data) {
	            var req = httpPayload.fetchGetHeader('api/getReview/'+data.status+"/"+data.docType+"/"+data.id+'/'+data.page+'/'+data.search);
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _reviewsList = function(data) {
	            var req = httpPayload.fetchGetHeader('api/getReviewList/'+data.default+'/'+data.documentType+'/'+data.searchKey);
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _postData = function(data) {
	            var req = httpPayload.fetchPostHeader('api/postReview/'+data.id+'/',data.data);
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getDocumentTypesList = function(data) {
	            var req = httpPayload.fetchGetHeader('api/documentTypes/');
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	           var _resendNLP = function(data) {
	            var req = httpPayload.fetchGetHeader('api/intent/'+data.id+'/');
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	
	
	          var documentReviewService = {
	            getData:_getData,
	            postData:_postData,
	            reviewsList:_reviewsList,
	            resendNLP:_resendNLP,
	            getDocumentTypesList:_getDocumentTypesList
	
	          };
	
	          return documentReviewService;
			});
	})();

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	    //require('./services/module.js');
		//require('./dashboard/dashboard.module.js');
		//require('./entitygraph/entitygraph.module.js');
		//require('./solutionsetup/solutionsetup.module.js');
	
		module.exports = angular.module('console.review', [
	        //'console.dashboard.entitygraph'
		    //'console.dashboard.solutionsetup'
		    //'console.layout.bodycontent.dashboard.services'
		])
	        .controller('reviewController', __webpack_require__(114))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.review', {
	               url: '/post-processed/:id/:type/:queue/:state',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(115),
	                        controller: 'reviewController',
	                        controllerAs: 'rc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/logout";
	                                 }
	                              }
	                        }
	
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 114 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$rootScope','ngDialog','$state','$stateParams','$location','$anchorScroll','reviewService','processDetailsServices','documentsListService','$window','$sce','entityLinkingService', function($scope,$rootScope,ngDialog,$state,$stateParams,$location,$anchorScroll,reviewService,processDetailsServices,documentsListService,$window,$sce,entityLinkingService) {
		'use strict';
	
	 var vm = this;
	     window.scrollTo(0,0);
	     $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	     vm.sess_id= $scope.loginData.sess_id;
	     vm.loginDataObj = $scope.loginData;
	     $scope.showDomainTab = false;
	     $scope.height = $window.innerHeight-96;
	     $scope.pdfHeight = $window.innerHeight - 130;
	     $scope.rightPanelHeight  =$window.innerHeight-150;
	     $scope.elementHeight = $window.innerHeight-240;
	     $scope.url = $location.protocol() + '://'+ $location.host() +':'+  $location.port();
	     $scope.getDemo = false;
	     $rootScope.inSolution = true;
	     $scope.showNavigation = false;
	     $scope.entitiesData=[];
	     $scope.rowHighlight = [];
	     $scope.rowHighlightAttr = [];
	     $scope.currentDocId = $stateParams.id;
	     $scope.newNode = '';
	     $scope.coordinatesDisplay=[];
	     $scope.checkObj = {};
	     $scope.checkObj.accept = true;
	     $scope.checkObj.correct = true;
	     $scope.checkObj.review = true;
	     vm.showPopup = {};
	     vm.showPopup.popup = false;
	     vm.showPopupConfirm = false;
	     vm.annotatinclickfromjs = false;
	     $scope.listOfNewAttributes = [];
	     $scope.displayNewEntity = false;
	     $scope.displayNewAttribute = false;
	     $scope.documentState = $stateParams.state;
	     $scope.currentQueueName = localStorage.getItem("queueName");
	     $scope.parentfilename = localStorage.getItem("parentfilename");
	    
	     /*  extraction code starts */
	
	    var pdfjsLib = window['PDFAnnotate'];
	    const { UI } = pdfjsLib;
	    var documentId = '';
	    vm.pdfSrc = "";
	    var PAGE_HEIGHT;
	    var RENDER_OPTIONS = {
	        documentId,
	        pdfDocument: null,
	        scale: parseFloat(localStorage.getItem(`${documentId}/scale`), 10) || 0.25,
	        rotate: parseInt(localStorage.getItem(`${documentId}/rotate`), 10) || 0
	    };
	    //var anno = document.getElementById("annotationdiv");
	    //anno.innerHTML = '';
	    $scope.annotations = [];
	
	    //pdfjsLib.setStoreAdapter(new pdfjsLib.LocalStoreAdapter());
	    function getAnnotations(documentId) {
	        return $scope.annotations;
	    }
	
	
	    function findAnnotation(documentId, annotationId) {
	        var index = -1;
	        var annotations = getAnnotations(documentId);
	        for (var i = 0, l = annotations.length; i < l; i++) {
	            if (annotations[i].uuid === annotationId) {
	                index = i;
	                break;
	            }
	        }
	        return index;
	    }
	
	    $scope.MyStoreAdapter = new pdfjsLib.StoreAdapter({
	        getAnnotations(documentId, pageNumber) {
	            return new Promise((resolve, reject) => {
	                var annotations = getAnnotations(documentId).filter((i) => {
	                    return i.page === pageNumber && i.class === 'Annotation';
	                });
	
	                resolve({
	                    documentId,
	                    pageNumber,
	                    annotations
	                });
	            });
	        },
	
	        getAnnotation(documentId, annotationId) {
	            var annotation;
	            for (var i = 0, l = $scope.annotations.length; i < l; i++) {
	                if ($scope.annotations[i].uuid === annotationId) {
	                    annotation = $scope.annotations[i];
	                    break;
	                }
	            }
	
	            return Promise.resolve(annotation);
	            //return  Promise.resolve(getAnnotations(documentId)[findAnnotation(documentId, annotationId)]);
	        },
	
	
	        // getAnnotation(documentId, annotationId) {
	        //     console.log("getannotation");
	        //     var anno;
	        //     for (var i = 0; i < $scope.annotations.length; i++) {
	        //         if ($scope.annotations[i].uuid == annotationId)
	        //             anno = $scope.annotations[i];
	        //     }
	        //     return Promise.resolve(anno);
	        // },
	
	        addAnnotation(documentId, pageNumber, annotation) {
	            annotation.class = 'Annotation';
	            annotation.uuid = $scope.uniqueIdGenerator();
	            annotation.page = pageNumber;
	
	            // var annotations = getAnnotations(documentId);
	            //$scope.annotations.push(annotation);
	            // updateAnnotations(documentId, annotations);
	            let existingnode = {};
	            if ($scope.updatewithnewannotationNode == true) {
	                existingnode = $scope.updannotation;
	                existingnode.x = annotation.x;
	                existingnode.y = annotation.y;
	                existingnode.width = annotation.width;
	                existingnode.height = annotation.height;
	                existingnode.page_no = annotation.page;
	                existingnode.page = annotation.page;
	
	                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + existingnode.uuid + "']")
	                allrect.forEach(function (rect) {
	                    //rect.setAttribute("stroke", "yellow");
	                    rect.remove();
	                });
	
	
	                UI.disableEdit();
	                vm.updateNode(existingnode, existingnode.typeoffield);
	
	            } else if (vm.newcell) {
	                console.log(vm.newcelldata);
	                annotation.uuid = vm.newcelldata.temp_id;
	                existingnode = annotation;
	                vm.adddatatoTable(existingnode);
	                $scope.annotations.push(existingnode);
	            }
	            else {
	                vm.addnewAnnotation(annotation);
	                existingnode = annotation;
	            }
	            return new Promise((resolve, reject) => {
	
	                resolve(existingnode);
	            });
	
	
	        },
	
	        editAnnotation(documentId, pageNumber, annotation) {
	            console.log("for first staart", Date.now());
	            vm.selectedNode = annotation;
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == annotation.uuid) {
	                    $scope.annotations[i] = annotation;
	                    break;
	                }
	            }
	            console.log("for first done", Date.now());
	            let p = document.getElementById("pdf-annotate-edit-overlay");
	            if (p) {
	                p.remove();
	            }
	            vm.updateNode(annotation, annotation.typeoffield);
	
	            return new Promise((resolve) => {
	                resolve(true);
	            })
	
	            // return new Promise((resolve) => {
	            //     console.log("for resolve start", Date.now());
	            //     resolve(annotation);
	            //     //UI.disableEdit();
	
	            //     console.log("for resolve done", Date.now());
	            // });
	
	
	
	
	        },
	
	        deleteAnnotation(documentId, annotationId) {
	
	
	            // for (var i = 0; i < $scope.annotations.length; i++) {
	            //     if ($scope.annotations[i].uuid == annotationId) {
	            //         vm.editablenode($scope.annotations[i]);
	            //         break;
	            //     }
	            // }
	            // enableDrawRect("area");
	            // return false;
	
	            var index = -1;
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == annotationId) {
	                    index = i;
	                    enableDrawRect("area");
	                    vm.editablenode($scope.annotations[i]);
	                    break;
	                }
	            }
	            if (index > -1) {
	                $scope.annotations.splice(index, 1);
	            }
	
	            return new Promise((resolve, reject) => {
	                resolve(true);
	            });
	
	
	
	        },
	
	        addComment(documentId, annotationId, content) {
	
	        },
	
	        deleteComment(documentId, commentId) {
	
	        },
	        getComments(documentId, annotationId) {
	            var comments = [];
	            return new Promise((resolve) => {
	                resolve(comments);
	            })
	        }
	    });
	
	    pdfjsLib.setStoreAdapter($scope.MyStoreAdapter);
	
	
	    PDFJS.workerSrc = '/static/ref-app/app/sharedPDFJS/pdf.worker.js';
	
	
	    // Render stuff
	    var NUM_PAGES = 0;
	
	    function handleannotationrightclick(e, node) {
	        vm.selectedNode = node;
	        var uuid = e.uuid; //(e.toElement.innerHTML).split("__")[0];
	        var pageNum = e.page; //(e.toElement.innerHTML).split("__")[1];
	        var target = document.querySelector("[data-pdf-annotate-id='" + uuid + "']");
	        $scope.existtarget = target;
	        let scalerender = RENDER_OPTIONS.scale * 100;
	        let scaleheight = ((scalerender * e.y) / 100);
	        let scalewidth = ((scalerender * e.x)/100);
	        $scope.current_page = pageNum;
	        document.getElementById('content-wrapper').scrollTop = ((parseInt(pageNum) - 1) * PAGE_HEIGHT) + scaleheight ;
	        document.getElementById('content-wrapper').scrollLeft = scalewidth ;
	
	
	        UI.enableEdit();
	        vm.annotatinclickfromjs = true;
	        UI.fireEvent('annotation:click', target);
	        setTimeout(function(){
	         vm.annotatinclickfromjs = false;
	        },2000);
	    }
	     vm.render = function() {
	        document.getElementById('loadingpdf').style.display = 'block';
	        PDFJS.getDocument(RENDER_OPTIONS.documentId).then((pdf) => {
	
	            RENDER_OPTIONS.pdfDocument = pdf;
	
	            var viewer = document.getElementById('viewer');
	            viewer.innerHTML = '';
	            NUM_PAGES = pdf.pdfInfo.numPages;
	            $scope.no_of_pages = NUM_PAGES;
	            $scope.$apply();
	            for (var i = 0; i < NUM_PAGES; i++) {
	                var page = UI.createPage(i + 1);
	                viewer.appendChild(page);
	                UI.renderPage(i + 1, RENDER_OPTIONS).then(([pdfPage, annotations]) => {
	                    var viewport = pdfPage.getViewport(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate);
	                    PAGE_HEIGHT = viewport.height;
	                });
	            }
	
	
	            document.getElementById('loadingpdf').style.display = 'none';
	            UI.disableEdit();
	            // UI.renderPage(1, RENDER_OPTIONS).then(([pdfPage, annotations]) => {
	            //     let viewport = pdfPage.getViewport(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate);
	            //     PAGE_HEIGHT = viewport.height;
	            // });
	
	//            if (vm.selectedNode != null) {
	//                setTimeout(function () {
	//                    setrectColor("transparent");
	//                    setHeilight(vm.selectedNode.value_coordinates_list[0].uuid);
	//                    handleannotationrightclick(vm.selectedNode.value_coordinates_list[0], vm.selectedNode);
	//                }, 300)
	//
	//            }
	
	        });
	    }
	
	    function enableDrawRect(type) {
	        switch (type) {
	            case 'cursor':
	                UI.enableEdit();
	                break;
	            case 'draw':
	                UI.enablePen();
	                break;
	            case 'text':
	                UI.enableText();
	                break;
	            case 'point':
	                UI.enablePoint();
	                break;
	            case 'area':
	            case 'highlight':
	            case 'strikeout':
	                UI.enableRect(type);
	                break;
	        }
	    };
	
	    function disableDrawRect(tooltype) {
	        switch (tooltype) {
	            case 'cursor':
	                UI.disableEdit();
	                break;
	            case 'draw':
	                UI.disablePen();
	                break;
	            case 'text':
	                UI.disableText();
	                break;
	            case 'point':
	                UI.disablePoint();
	                break;
	            case 'area':
	            case 'highlight':
	            case 'strikeout':
	                UI.disableRect();
	                break;
	        }
	    };
	
	    function setrectColor(colortype) {
	        var allrect = document.querySelectorAll("rect");
	        allrect.forEach(function (rect) {
	            if (colortype == "transparent") {
	                //rect.setAttribute("stroke", colortype);
	                rect.style.display = "none";
	            }
	            else {
	                rect.style.display = "block";
	            }
	        });
	    }
	
	    function setHeilight(annotationid) {
	        var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + annotationid + "']")
	        var firstrect = false;
	        allrect.forEach(function (rect) {
	            if (firstrect == false) {
	                rect.style.display = "block";
	                firstrect = true;
	
	                var stroke = rect.getAttribute("stroke");
	                if (stroke) {
	                    //rect.setAttribute("fill", stroke);
	                    rect.setAttribute("stroke-width", '16px');
	                    //rect.style.opacity = 0.2;
	                }
	            } else {
	                rect.remove();
	            }
	        });
	    }
	
	    function setbackground() {
	        var allrect = document.querySelectorAll("rect");
	        allrect.forEach(function (rect) {
	            var stroke = rect.getAttribute("stroke");
	            if (stroke) {
	                rect.setAttribute("fill", stroke);
	                rect.style.opacity = 0.6;
	            }
	        });
	    }
	    function filterRect(type, isshow) {
	        var allrect = document.querySelectorAll("rect[status='" + type + "']")
	        allrect.forEach(function (rect) {
	            //rect.setAttribute("stroke", "transparent");
	            if (isshow) {
	                rect.style.display = "block";
	            } else {
	                rect.style.display = "none";
	            }
	        });
	    }
	
	    function handleZoom(scale) {
	        scale = parseFloat(scale, 10);
	        let rotate = 0;
	
	        if (RENDER_OPTIONS.scale !== scale || RENDER_OPTIONS.rotate !== rotate) {
	            RENDER_OPTIONS.scale = scale;
	            RENDER_OPTIONS.rotate = rotate;
	
	            localStorage.setItem(`${RENDER_OPTIONS.documentId}/scale`, RENDER_OPTIONS.scale);
	            localStorage.setItem(`${RENDER_OPTIONS.documentId}/rotate`, RENDER_OPTIONS.rotate % 360);
	
	            vm.render();
	        }
	    }
	
	    vm.pdfinit = function(){
	
	    // Text stuff
	    (function () {
	        var textSize;
	        var textColor;
	
	        // function initText() {
	        //   var size = document.querySelector('.toolbar .text-size');
	        //   [8, 9, 10, 11, 12, 14, 18, 24, 30, 36, 48, 60, 72, 96].forEach((s) => {
	        //     size.appendChild(new Option(s, s));
	        //   });
	
	        //   setText(
	        //     localStorage.getItem(`${RENDER_OPTIONS.documentId}/text/size`) || 10,
	        //     localStorage.getItem(`${RENDER_OPTIONS.documentId}/text/color`) || '#000000'
	        //   );
	
	        //   initColorPicker(document.querySelector('.text-color'), textColor, function (value) {
	        //     setText(textSize, value);
	        //   });
	        // }
	
	        function setText(size, color) {
	            var modified = false;
	
	            if (textSize !== size) {
	                modified = true;
	                textSize = size;
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/text/size`, textSize);
	                document.querySelector('.toolbar .text-size').value = textSize;
	            }
	
	            if (textColor !== color) {
	                modified = true;
	                textColor = color;
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/text/color`, textColor);
	
	                var selected = document.querySelector('.toolbar .text-color.color-selected');
	                if (selected) {
	                    selected.classList.remove('color-selected');
	                    selected.removeAttribute('aria-selected');
	                }
	
	                selected = document.querySelector(`.toolbar .text-color[data-color="${color}"]`);
	                if (selected) {
	                    selected.classList.add('color-selected');
	                    selected.setAttribute('aria-selected', true);
	                }
	
	            }
	
	            if (modified) {
	                UI.setText(textSize, textColor);
	            }
	        }
	
	        function handleTextSizeChange(e) {
	            setText(e.target.value, textColor);
	        }
	
	        document.querySelector('.toolbar .text-size').addEventListener('change', handleTextSizeChange);
	
	        // initText();
	    })();
	
	    // Pen stuff
	    (function () {
	        var penSize;
	        var penColor;
	
	        function initPen() {
	            var size = document.querySelector('.toolbar .pen-size');
	            for (var i = 0; i < 20; i++) {
	                size.appendChild(new Option(i + 1, i + 1));
	            }
	
	            setPen(
	                1,
	                '#000000'
	            );
	
	            // initColorPicker(document.querySelector('.pen-color'), penColor, function (value) {
	            //   setPen(penSize, value);
	            // });
	        }
	
	        function setPen(size, color) {
	            var modified = false;
	
	            if (penSize !== size) {
	                modified = true;
	                penSize = size;
	                document.querySelector('.toolbar .pen-size').value = penSize;
	            }
	
	            if (penColor !== color) {
	                modified = true;
	                penColor = color;
	
	                var selected = document.querySelector('.toolbar .pen-color.color-selected');
	                if (selected) {
	                    selected.classList.remove('color-selected');
	                    selected.removeAttribute('aria-selected');
	                }
	
	                selected = document.querySelector(`.toolbar .pen-color[data-color="${color}"]`);
	                if (selected) {
	                    selected.classList.add('color-selected');
	                    selected.setAttribute('aria-selected', true);
	                }
	            }
	
	            if (modified) {
	                UI.setPen(penSize, penColor);
	            }
	        }
	
	        function handlePenSizeChange(e) {
	            setPen(e.target.value, penColor);
	        }
	
	        document.querySelector('.toolbar .pen-size').addEventListener('change', handlePenSizeChange);
	
	        initPen();
	    })();
	
	    // Toolbar buttons
	    (function () {
	        var tooltype = localStorage.getItem(`${RENDER_OPTIONS.documentId}/tooltype`) || 'cursor';
	        if (tooltype) {
	            setActiveToolbarItem(tooltype, document.querySelector(`.toolbar button[data-tooltype=${tooltype}]`));
	        }
	
	        function setActiveToolbarItem(type, button) {
	            var active = document.querySelector('.toolbar button.active');
	            if (active) {
	                active.classList.remove('active');
	
	                switch (tooltype) {
	                    case 'cursor':
	                        UI.disableEdit();
	                        break;
	                    case 'draw':
	                        UI.disablePen();
	                        break;
	                    case 'text':
	                        UI.disableText();
	                        break;
	                    case 'point':
	                        UI.disablePoint();
	                        break;
	                    case 'area':
	                    case 'highlight':
	                    case 'strikeout':
	                        UI.disableRect();
	                        break;
	                }
	            }
	
	            if (button) {
	                button.classList.add('active');
	            }
	            if (tooltype !== type) {
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/tooltype`, type);
	            }
	            tooltype = type;
	
	            switch (type) {
	                case 'cursor':
	                    UI.enableEdit();
	                    break;
	                case 'draw':
	                    UI.enablePen();
	                    break;
	                case 'text':
	                    UI.enableText();
	                    break;
	                case 'point':
	                    UI.enablePoint();
	                    break;
	                case 'area':
	                case 'highlight':
	                case 'strikeout':
	                    UI.enableRect(type);
	                    break;
	            }
	        }
	
	        function handleToolbarClick(e) {
	            if (e.target.nodeName === 'BUTTON') {
	                setActiveToolbarItem(e.target.getAttribute('data-tooltype'), e.target);
	            }
	        }
	
	        document.querySelector('.toolbar').addEventListener('click', handleToolbarClick);
	    })();
	
	    // Scale/rotate
	    (function () {
	        function setScaleRotate(scale, rotate) {
	            scale = parseFloat(scale, 10);
	            rotate = parseInt(rotate, 10);
	
	            if (RENDER_OPTIONS.scale !== scale || RENDER_OPTIONS.rotate !== rotate) {
	                RENDER_OPTIONS.scale = scale;
	                RENDER_OPTIONS.rotate = rotate;
	
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/scale`, RENDER_OPTIONS.scale);
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/rotate`, RENDER_OPTIONS.rotate % 360);
	
	                vm.render();
	            }
	        }
	
	        function handleScaleChange(e) {
	            setScaleRotate(e.target.value, RENDER_OPTIONS.rotate);
	        }
	
	        function handleRotateCWClick() {
	            setScaleRotate(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate + 90);
	        }
	
	        function handleRotateCCWClick() {
	            setScaleRotate(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate - 90);
	        }
	
	        document.querySelector('.toolbar select.scale').value = RENDER_OPTIONS.scale;
	        document.querySelector('.toolbar select.scale').addEventListener('change', handleScaleChange);
	        document.querySelector('.toolbar .rotate-ccw').addEventListener('click', handleRotateCCWClick);
	        document.querySelector('.toolbar .rotate-cw').addEventListener('click', handleRotateCWClick);
	    })();
	
	    // Clear toolbar button
	    (function () {
	        function handleClearClick(e) {
	            if (confirm('Are you sure you want to clear annotations?')) {
	                for (var i = 0; i < NUM_PAGES; i++) {
	                    document.querySelector(`div#pageContainer${i + 1} svg.annotationLayer`).innerHTML = '';
	                }
	
	                localStorage.removeItem(`${RENDER_OPTIONS.documentId}/annotations`);
	            }
	        }
	        document.querySelector('a.clear').addEventListener('click', handleClearClick);
	    })();
	
	    }
	
	
	
	    function handleAnnotationClick(target) {
	
	        if(vm.selectedElementFlag){
	             setbackground();
	             vm.selectedElementId = target.dataset.pdfAnnotateId;
	             target.setAttribute("fill","#3792c2");
	             target.setAttribute("fill-opactiy","0.4");
	             disableEdition();
	
	        }else{
	            $scope.rowHighlight = [];
	            if(!vm.annotatinclickfromjs && document.getElementsByClassName(target.dataset.pdfAnnotateId) && document.getElementsByClassName(target.dataset.pdfAnnotateId)[0]){
	                document.getElementsByClassName(target.dataset.pdfAnnotateId)[0].scrollIntoView();
	                var p = document.getElementsByClassName(target.dataset.pdfAnnotateId)[0];
	                if(!p.closest("ol").classList.contains("in")){
	                    var s = p.closest("ol").closest("li");
	                    s.querySelector(".nodetoggle").click();
	                };
	                $scope.rowHighlight[target.dataset.pdfAnnotateId] = 'highlightClass';
	                UI.disableEdit();
	            }
	            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	                    $scope.$apply();
	            }
	            disableDrawRect("area");
	
	        }
	    }
	
	    UI.addEventListener('annotation:click', handleAnnotationClick);
	
	    /* extractioncode ends */
	    function setOrderForAnnotations(){
	        var svgs = document.querySelectorAll("svg");
	        for(var k=0;k<svgs.length;k++){
	            var allrects = svgs[k].querySelectorAll("rect");
	            var tmpRects = [];
	             for(var i=0; i < allrects.length;i++){
	                  tmpRects.push(allrects[i]);
	             };
	             var sortedRects = tmpRects.sort(function(rect1,rect2){
	                return rect1.getAttribute("y") - rect2.getAttribute("y")
	             });
	
	             svgs[k].querySelectorAll("rect").forEach(function(rect){
	                rect.remove();
	             });
	
	             for(var i=sortedRects.length-1;i>=0;i--){
	                svgs[k].appendChild(sortedRects[i]);
	             };
	         }
	         document.getElementById('loadingpdf').style.display = 'none';
	
	
	    };
	
	    function setOrderForSpecificTime(){
	            setTimeout(function(){
	                document.getElementById('loadingpdf').style.display = 'block';
	                setOrderForAnnotations();
	            },3000);
	    };
	
	     vm.navigatePage = function(type){
	
	        if(type == 'next'){
	           $scope.nextClass = 'nextCursor';
	           var rec_num = $scope.filter_obj.current_record_no+1;
	           if(rec_num < $scope.recentRecords.length){
	              var prop = 'none';
	              if($scope.recentRecords[rec_num].is_digital){
	                    prop = 'digital';
	              }
	              $scope.filter_obj.current_record_no = rec_num;
	              localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	              $state.go("app.review",{id:$scope.recentRecords[rec_num].doc_id, type:prop,queue:$stateParams.queue},{reload:true})
	           }
	           else{
	              $scope.filter_obj.page_no = $scope.filter_obj.page_no+1;
	              $scope.filter_obj.current_record_no = -1;
	              $scope.getDocumentsListData(type);
	
	           }
	        }
	        else if(type == 'prev'){
	          $scope.prevClass = 'prevCursor';
	          var rec_num = $scope.filter_obj.current_record_no-1;
	          if(rec_num >= 0){
	              var prop = 'none';
	              if($scope.recentRecords[rec_num].is_digital){
	                    prop = 'digital';
	              }
	              $scope.filter_obj.current_record_no = rec_num;
	              localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	              $state.go("app.review",{id:$scope.recentRecords[rec_num].doc_id, type:prop,queue:$stateParams.queue},{reload:true})
	          }
	          else{
	              $scope.filter_obj.page_no = $scope.filter_obj.page_no-1;
	              $scope.filter_obj.current_record_no = $scope.recentRecords.length;
	              $scope.getDocumentsListData(type);
	
	          }
	        }
	     };
	
	     $scope.updateFilterObj = function(type){
	          $scope.filter_obj = JSON.parse(localStorage.getItem('filterObj'));
	          if($scope.filter_obj == null || $scope.filter_obj == undefined){
	            $scope.showNavigation = false;
	          }
	          else{
	            if($scope.filter_obj.hasOwnProperty('current_record_no')){
	                $scope.showNavigation = true;
	                $scope.recentRecords = JSON.parse(localStorage.getItem('recentRecords'));
	                if( $scope.recentRecords == null ||  $scope.recentRecords == undefined){
	                }else{
	                  $scope.total_records =  $scope.filter_obj.totalRecords;
	                  //vm.documentType = $scope.recentRecords[$scope.filter_obj.current_record_no].mime_type;
	                  $scope.no_of_records =  (($scope.filter_obj.page_no-1) *$scope.filter_obj.no_of_recs) + $scope.filter_obj.current_record_no+1;
	                }
	            }
	            else{
	              $scope.showNavigation = false;
	            }
	
	          }
	
	          vm.navigatePage(type);
	     };
	
	     $scope.updateFilterObj('none');
	
	     if($stateParams.type.toLowerCase() != "digital"){
	
	
	
	
	
	
	
	
	
	         $scope.rect = {
	                data_color: '#337ab7',
	                marker_color: '#00ad2d',
	                section_color:'#FF0000',
	                stroke: 5
	         };
	
	         $scope.colorCodes = {
	           'orange_border':'#fb9019',
	           'green_border':'#26ce3f',
	           'blue_border':'#4a90e2'
	         }
	
	        vm.updateDrawer = function(type,item){
	           if(item.is_accept == undefined && item.is_corrected == undefined && item.need_review == undefined){
	                item.need_review = true;
	                item.is_accept = false;
	                item.is_corrected = false;
	           }
	
	           if(item.regions!=undefined){
	                for(var i =0;i<item.regions.length;i++){
	                    var obj = angular.copy(item);
	                    obj.x = obj.regions[i].x1;
	                    obj.width = obj.regions[i].x2 - obj.regions[i].x1;
	                    obj.y = obj.regions[i].y1;
	                    obj.height = obj.regions[i].y2 - obj.regions[i].y1;
	                    obj.is_display = true;
	                    obj.stroke = $scope.rect.stroke;
	                    obj.color = $scope.colorCodes.orange_border;
	                    obj.bgColor = $scope.colorCodes.orange_border;
	                    if(obj.temp_id!=undefined){
	                        obj.slice_id = angular.copy(obj.temp_id+i);
	                        obj.slice_id = angular.copy(obj.slice_id.replace(/~/gi, "-"));
	                        item.regions[i].slice_id = angular.copy(obj.temp_id+i);
	                        item.regions[i].slice_id = angular.copy(item.regions[i].slice_id.replace(/~/gi, "-"));
	                    }
	                    if (obj.temp_id == undefined) {
	                      obj.temp_id = $scope.uniqueIdGenerator();
	                    }
	                    item.temp_id = obj.temp_id;
	                    obj.class = "Annotation";
	                    obj.page = obj.regions[i].page_number;
	                    obj.typeoffield = angular.copy(obj.type);
	                    obj.type = "area";
	                    obj.uuid = obj.temp_id;
	                    obj.documentId = vm.pdfSrc;
	                    obj.status = "review";
	                    if(obj.is_accept){
	                        obj.color = $scope.colorCodes.green_border;
	                        obj.bgColor = $scope.colorCodes.green_border;
	                        obj.status = "accept";
	                    }
	                    if(obj.is_corrected){
	                        obj.color = $scope.colorCodes.blue_border;
	                        obj.bgColor = $scope.colorCodes.blue_border;
	                        obj.status = "correct";
	                    }
	                    obj.borderStyle='solid';
	                    if(item.type=='domain'){
	                      obj.is_display = false;
	                      obj.borderStyle='dashed';
	                    }
	
	                    obj.page_number = obj.regions[i].page_number;
	                    $scope.annotations.push(obj);
	
	//                    obj.index = $scope.drawer[obj.regions[i].page_number].length;
	//                    item.drawerIndexObj['value'+i] = obj.index;
	//                    $scope.drawer[obj.regions[i].page_number].push(obj);
	                }
	           }
	
	         };
	
	        vm.getAttributeByHierarchy = function(data,type){
	                if(type == 'attribute'){
	                    for(var j=0;j<data.attributes.length;j++){
	                        for(var k=0;k<data.attributes[j].values.length;k++){
	                            if(data.attributes[j].values[k].regions!=undefined){
	                                    data.attributes[j].values[k].drawerIndexObj = {};
	                                    vm.updateDrawer('value',data.attributes[j].values[k]);
	                            }
	                        }
	                   }
	                }
	                else if(type == 'grouped_entity'){
	                    for(var i=0;i<data.groups.length;i++){
	                       if(data.groups[i].type == 'attribute'){
	                           for(var j=0;j<data.groups[i].attributes.length;j++){
	                                if(data.groups[i].attributes[j].values!=undefined && data.groups[i].attributes[j].values.length>0){
	                                    for(var k=0;k<data.groups[i].attributes[j].values.length;k++){
	                                        if(data.groups[i].attributes[j].values[k].regions!=undefined){
	                                                data.groups[i].attributes[j].values[k].drawerIndexObj = {};
	                                                vm.updateDrawer('value',data.groups[i].attributes[j].values[k]);
	                                        }
	                                    }
	                                }
	                           }
	                       }
	                    }
	                }
	        };
	
	         vm.hideElement = function(node){
	
	            if(node.is_delete){
	              return true;
	            }
	            if(node.is_accept && !$scope.checkObj.accept){
	                return true
	            }
	            if(node.is_corrected && !$scope.checkObj.correct){
	                return true
	            }
	            if(node.need_review && !$scope.checkObj.review){
	                return true
	            }
	            return false
	         };
	
	         vm.changeIntaraction = function(type,value){
	             filterRect(type, value);
	
	         };
	
	
	         vm.initialiseDrawer = function(){
	            $scope.drawer = [];
	
	            for(var i=0;i<$scope.no_of_pages;i++){
	                $scope.drawer[i+1] = [];
	
	            }
	         };
	         vm.initialiseSelector = function(){
	
	            $scope.selector=[];
	            for(var i=0;i<$scope.no_of_pages;i++){
	                $scope.selector[i+1] = {};
	                $scope.selector[i+1].enabled=false;
	                $scope.selector[i+1].id=i+1;
	            }
	         };
	
	         vm.recursiveByHierarchy = function(data){
	                for(var i=0;i<data.length;i++){
	                   if(data[i].type=='grouped_entity' || data[i].type == 'attribute'){
	                      vm.getAttributeByHierarchy(data[i],data[i].type);
	
	                   }
	                   else if(data[i].type=='entity'){
	                        vm.recursiveByHierarchy(data[i].attributes);
	                   }
	                   else {
	                        vm.recursiveByHierarchy(data[i].attributes);
	                   }
	
	                }
	         };
	
	         vm.getresultByHierarchy = function(){
	                vm.recursiveByHierarchy($scope.extractOutput);
	         };
	
	         vm.enableSelectorInEdit = function(item,coordinates,node){
	
	            vm.selectedObj.type = 'panel';
	            vm.selectedObj.key1 = item;
	            vm.selectedObj.key2 = coordinates;
	            vm.selectedObj.key3 = node;
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=false;
	            }
	            var size = Object.keys(node.drawerIndexObj).length;
	            for(var j=0;j<size;j++){
	                $rootScope.selectedIndex.push(node.drawerIndexObj['value'+j]);
	            };
	            for(var k =0;k<coordinates.length;++k){
	                $rootScope.selectedPage.push(coordinates[k].page_no);
	                vm.doSetTimeout(k,coordinates,node);
	            }
	            $rootScope.imageBlur='';
	         };
	
	         vm.doSetTimeout = function(k,coordinates,data){
	            if(!vm.selectedObj.selectType){
	                vm.selectedObj.selectType = true;
	                $scope.actualDivWidth = $("#actual").width();
	                $scope.actualImageWidth = $("#calImage").width();
	                $scope.actualSliceWidth = $('#'+coordinates[k].slice_id).width();
	                $scope.ratio = $scope.actualSliceWidth/$scope.actualImageWidth;
	                $scope.unwantedValue = $scope.actualDivWidth/$scope.ratio;
	                $scope.zoomLevel = $scope.unwantedValue/$scope.actualImageWidth;
	                if($scope.zoomLevel>=1){
	                    vm.zoomValue = 1;
	                }
	                else{
	                   vm.zoomValue  = $scope.zoomLevel;
	                }
	                $(".zoomSize").css("zoom",vm.zoomValue);
	            }
	            var heightOfImage = (coordinates[k].page_no-1)*document.getElementById("calImage").style.height.replace("px","");
	            setTimeout(function(){
	//                    var topPos = document.getElementById('page_'+coordinates[k].page_no).offsetTop;
	//                    var scrollingElement = angular.copy(topPos+coordinates[k].y1-200);
	//                    var scrollingElementLeft = angular.copy(coordinates[k].x1);
	//                    document.getElementById('scrollImage').scrollTop = scrollingElement;
	//                    document.getElementById('scrollImage').scrollLeft = scrollingElementLeft;
	
	                    document.getElementById('scrollImage').scrollTop = vm.zoomValue*heightOfImage+coordinates[k].y1*vm.zoomValue-200;
	                    document.getElementById('scrollImage').scrollLeft = coordinates[k].x1*vm.zoomValue-100;
	
	
	            },200);
	         };
	
	         vm.enableSelectorInImageClick = function(page_no,coordinates,data){
	            $scope.rowHighlight = [];
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=false;
	            }
	            $scope.zoomDisplay = 'zoomSize1';
	            for(var k =0;k<coordinates.length;++k){
	                $rootScope.selectedIndex.push(data.index);
	                $rootScope.selectedPage.push(coordinates[k].page_no);
	                vm.doSetTimeout(k,coordinates);
	
	            }
	            $rootScope.imageBlur='';
	         };
	
	
	
	
	
	
	         vm.getCurrentValue = function(node){
	            $scope.rowHighlight = [];
	            $scope.rowHighlight[node.temp_id] = 'highlightClass';
	            setrectColor("transparent");
	            setHeilight(node.temp_id);
	            let p = document.getElementById("pdf-annotate-edit-overlay");
	            if (p) {
	                p.remove();
	            }
	            UI.disableEdit();
	
	            var pageNum = 1;
	            $scope.current_page = 1;
	            if (node.value_coordinates_list) {
	                pageNum = node.value_coordinates_list[0].page_no;
	                $scope.current_page = node.value_coordinates_list[0].page_no;
	                var scalerender = RENDER_OPTIONS.scale * 100;
	                var scaleheight = ((scalerender * node.value_coordinates_list[0].y1) / 100);
	                var scalewidth = ((scalerender *  node.value_coordinates_list[0].x1)/100);
	                document.getElementById('content-wrapper').scrollTop = ((parseInt(pageNum) - 1) * PAGE_HEIGHT) + scaleheight;
	                document.getElementById('content-wrapper').scrollLeft = scalewidth ;
	            }
	
	
	            return;
	
	         };
	
	         vm.getGroups = function (type) {
	                  entityLinkingService.getPostProcessData($stateParams.id, vm.sess_id).then(function (data) {
	                       //data.data.data.data.template_type='unknown'
	                       if (data.data.status == "success") {
	                            $scope.extractedData = data.data.data;
	                            $scope.elementsList = [];
	                            if($scope.extractedData.data.elements!=undefined){
	                                     $scope.elementsList = $scope.extractedData.data.elements;
	                            }
	                            $scope.entitiesData = $scope.extractedData.data.entity;
	
	                            $scope.copyData = angular.copy($scope.entitiesData);
	                            $scope.deepCopyOfSectionsData = { 'data': $scope.copyData };
	                            $scope.volume = $scope.extractedData.volume;
	                            $scope.recordData = $scope.extractedData.data.metadata;
	                            $scope.reviewStatesList = $scope.extractedData.review_state;
	                            $scope.doc_id = $scope.extractedData.data.doc_id;
	                            $scope.root_id = $scope.extractedData.data.root_id;
	                            $scope.showUnknown = false;
	                            if ($scope.recordData.properties.extension != "email") {
	                                if ($scope.extractedData.data.template_type != undefined) {
	                                    if ($scope.extractedData.data.template_type == 'unknown' || $scope.extractedData.data.template_type == 'known') {
	                                        $scope.current_page = 1;
	                                        if ($scope.extractedData.data.doc_type == undefined || $scope.extractedData.data.doc_type == 'image') {
	                                            $scope.showUnknown = true;
	                                        } else {
	                                            vm.renderHtml = $scope.pagesInfo[$scope.current_page - 1].doc_html;
	                                        }
	                                        $scope.current_page = 1;
	                                        $scope.rowHighlight = [];
	                                        $scope.tableRow = [];
	                                        $scope.extractOutput = $scope.entitiesData;
	                                        vm.getresultByHierarchy();
	
	                                        RENDER_OPTIONS.documentId = "/static" + $scope.volume + $scope.recordData.properties.digital_pdf_resource.key;
	                                        vm.pdfSrc = "/static" + $scope.volume + $scope.recordData.properties.digital_pdf_resource.key;
	
	//                                        RENDER_OPTIONS.documentId = '/static/ref-app/app/sharedPDFJS/cms.pdf';
	//                                        vm.pdfSrc = "/static/ref-app/app/sharedPDFJS/cms.pdf";
	
	                                        vm.pdfinit();
	                                        vm.render();
	                                        setOrderForSpecificTime();
	                                    }
	
	
	                                }
	
	                            }
	                            else {
	                                $scope.processListDetails = data.data;
	                                $scope.recordData = $scope.processListDetails.data;
	                                $scope.mime_type = data.data.data.data.extn;
	                                vm.documentType = data.data.data.data.doc_type;
	                                vm.docAttributes = data.data.data.data.doc_attributes;
	                                $scope.processListDetails = data.data.data;
	                                $scope.recordDataConfig = $scope.processListDetails.config.record_data;
	                                $scope.recordData = $scope.processListDetails.data;
	                                vm.emailAttachmentsArray = data.data.data.data.attachments;
	                                vm.emailEntities = data.data.data.data.elements;
	                            }
	                        } else {
	                                    $.UIkit.notify({
	                                        message: data.data.msg,
	                                        status: 'danger',
	                                        timeout: 3000,
	                                        pos: 'top-center'
	                                    });
	                       }
	                  },function (err) {
	
	                  })
	         };
	         vm.getGroups('load');
	         $.fn.isInViewport = function() {
	              var elementTop = $(this).offset().top;
	              var elementBottom = elementTop + $(this).outerHeight();
	
	              var viewportTop = $(window).scrollTop();
	              var viewportBottom = viewportTop + $(window).height();
	
	              return elementBottom > viewportTop && elementTop < viewportBottom;
	         };
	         angular.element(document.querySelector('#scrollImage')).bind('scroll', function(){
	                $('.post').each(function() {
	                    var activePage = $(this).attr('name');
	                    if ($(this).isInViewport()) {
	                        $('.pagination-text').val(activePage);
	                         // $scope.current_page = activePage;
	                    };
	                });
	         });
	
	         $scope.excelBtnArr = [];
	         $scope.excelBtnArr[0]='excel-back';
	         $scope.getSheetData = function(index){
	            $scope.excelBtnArr = [];
	            $scope.excelBtnArr[index]='excel-back';
	            vm.renderHtml = $scope.pagesInfo[index].doc_html;
	         };
	
	         $scope.openId = function (id) {
	            var str = id.split('-');
	            var id ='';
	            $('.collapse.in').removeClass('in');
	                     // $(".group"+''+data.groupName).addClass('in');
	                     // $(".group"+''+data.groupName).removeAttr( 'style' );
	                     // $(".showRow"+ ''+data.indexObj.childIndex).addClass('in');
	                     // $(".showRow"+''+data.indexObj.childIndex).removeAttr( 'style' );
	            for(var i=0;i<str.length;i++){
	                if(i==0)
	                   id = id+''+str[i];
	                else
	                  id = id+'-'+str[i];
	
	                $("."+id).addClass('in');
	                $("."+id).removeAttr( 'style' );
	            }
	         };
	
	         vm.zoomValue = 0.20;
	         $(".zoomSize").css("zoom",vm.zoomValue);
	         vm.selectedObj = {};
	
	         vm.zoomCalculation = function(){
	            if(vm.zoomValue<=0.25){
	                vm.zoomValue = 0.20;
	            }
	            else if(vm.zoomValue>0.20 && vm.zoomValue<=0.45){
	                vm.zoomValue = 0.40;
	            }
	            else if(vm.zoomValue>0.40 && vm.zoomValue<=0.65){
	                vm.zoomValue = 0.60;
	            }
	            else if(vm.zoomValue>0.60 && vm.zoomValue<=0.85){
	                vm.zoomValue = 0.80;
	            }
	            else{
	                vm.zoomValue = 1;
	            }
	         };
	
	
	         vm.zoomIn = function () {
	            var zoom = '';
	            if (RENDER_OPTIONS.scale < 1.4) {
	                let zoom = RENDER_OPTIONS.scale + 0.1
	                handleZoom(zoom);
	            }
	            setOrderForSpecificTime();
	
	
	         };
	
	        vm.zoomReset = function(){
	            handleZoom(0.17);
	            setOrderForSpecificTime();
	        };
	
	        vm.zoomOut = function () {
	            var zoom = '';
	            if (RENDER_OPTIONS.scale > 0.1) {
	                zoom = RENDER_OPTIONS.scale - 0.1;
	                handleZoom(zoom);
	                setOrderForSpecificTime();
	            }
	
	
	        };
	
	
	
	         vm.enableSelector = function(){
	            $scope.rowHighlight = [];
	            $scope.zoomDisplay = 'zoomSize';
	//            $scope.current_page = 1;
	//            $scope.current_selection_page_no = 1;
	            $rootScope.selectedIndex =[];
	            $rootScope.selectedPage = [];
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=false;
	            }
	            $scope.zoomDisplay = 'zoomSize1';
	            setTimeout(function(){
	                var topPos = document.getElementById('page_'+$scope.current_page).offsetTop;
	                var scrollingElement = angular.copy(topPos);
	                document.getElementById('scrollImage').scrollTop = scrollingElement;
	            },200);
	            $rootScope.imageBlur='';
	            $rootScope.highlight=[];
	         };
	
	         vm.showallAnnotations = function () {
	            setrectColor("yellow");
	            UI.disableEdit();
	         };
	
	        vm.disableSelector = function () {
	            vm.selectedNode=null;
	            vm.render();
	            setTimeout(() => {
	                vm.showallAnnotations();
	            }, 300);
	            setOrderForSpecificTime();
	
	        };
	
	         vm.changePageNumUnknown = function (type) {
	            if (type == 'next')
	                $scope.current_page++;
	            else
	                $scope.current_page--;
	            var zoomVal = $('.' + $scope.zoomDisplay).css("zoom");
	            setTimeout(function () {
	                document.getElementById('content-wrapper').scrollTop = ((parseInt($scope.current_page) - 1) * PAGE_HEIGHT);
	            }, 100);
	         };
	
	         vm.keyEnterUnknown = function (event) {
	                if(event.which === 13) {
	                   if($scope.current_page<=$scope.no_of_pages) {
	                       if($scope.current_page>0){
	                           var zoomVal =$('.'+$scope.zoomDisplay).css( "zoom" );
	                            setTimeout(function(){
	                               var topPos = document.getElementById('page_'+$scope.current_page).offsetTop;
	                               var scrollingElement = angular.copy(topPos*zoomVal);
	                               document.getElementById('scrollImage').scrollTop = scrollingElement;
	                            },100);
	                       }
	                       else{
	                            $.UIkit.notify({
	                                 message : 'Please Enter Page number',
	                                 status  : 'warning',
	                                 timeout : 3000,
	                                 pos     : 'top-center'
	                            });
	                       }
	                   }
	                   else{
	                        $.UIkit.notify({
	                             message : 'Please Enter Page number less than no.of pages',
	                             status  : 'warning',
	                             timeout : 3000,
	                             pos     : 'top-center'
	                        });
	                   }
	                }
	         };
	
	
	
	
	
	
	
	
	
	         $scope.rowHighlightTable={};
	         $scope.innerData={}
	
	
	
	
	
	
	
	          $scope.getAttributeName = function(text){
	            if(text!='' && text!=undefined){
	               var str = text;
	               var split= str.split('.')
	               var length = split[0].length
	               var res = str.substring(length+1, str.length);
	              return res;
	            }
	            return '';
	          };
	
	
	          $rootScope.$on("selector",function(evt,data){
	
	
	               $scope.current_selection_page_no = data.id;
	               for(var i=1;i<=$scope.no_of_pages;i++){
	                 if(data.id!=i){
	                   $scope.selector[i].clear();
	
	                 }
	               }
	          });
	
	
	          $rootScope.$on("edited",function(evt,data){
	//               if(data.type=='field' || data.type=='omr' || data.type=="paragraph"){
	//                   $('.panel-collapse.in')
	//                   .removeClass('in');
	//                   $(".group"+ ''+data.groupName).addClass('in');
	//                 $(".group"+''+data.groupName).removeAttr( 'style' );
	//                   setTimeout(function(){
	//                        var topPos = document.getElementById('inner'+''+data.groupName+''+data.indexObj.parentIndex).offsetTop;
	//                        console.log(topPos);
	//                        var scrollingElement = angular.copy(topPos-75);
	//                        document.getElementById('scrollDiv').scrollTop = scrollingElement;
	//                    },100);
	//    //                $("#scrollDiv").scrollTop(scrollingElement);
	//
	//
	//                 $scope.rowClick(data.indexObj.parentIndex,data.drawerIndex,data.groupName);
	//
	//               }
	//               else{
	//                 $('.panel-collapse.in').removeClass('in');
	//                 $(".group"+ ''+data.groupName).addClass('in');
	//                 $(".group"+''+data.groupName).removeAttr( 'style' );
	//                 $(".showRow"+ ''+data.indexObj.childIndex).addClass('in');
	//                 $(".showRow"+''+data.indexObj.childIndex).removeAttr( 'style' );
	//                 setTimeout(function(){
	//                        var topPos = document.getElementById('innerData'+''+data.groupName+data.indexObj.parentIndex+''+data.indexObj.childIndex+''+data.indexObj.superChildIndex).offsetTop;
	//                        console.log(topPos);
	//                        var scrollingElement = angular.copy(topPos-75);
	//                        document.getElementById('scrollDiv').scrollTop = scrollingElement;
	//                  },100);
	//
	//
	//                 $scope.rowTableClick(data,data.drawerIndex,data.groupName);
	//
	//               }
	
	
	          if(vm.selectedElementFlag){
	
	             vm.selectedElementId = data.element_id;
	          }
	          else{
	              $scope.openId(data.temp_id);
	              $scope.current_page = data.page_no;
	              $scope.rowHighlightAttr = [];
	              $scope.rowHighlightAttr[data.temp_id] = 'highlightClass'
	              vm.enableSelectorInImageClick(data.page_no,data.value_coordinates_list,data)
	              setTimeout(function(){
	                        var topPos = document.getElementsByClassName(data.temp_id)[0].offsetTop;
	                        var scrollingElement = angular.copy(topPos-100);
	                        document.getElementById('scrollDiv2').scrollTop = scrollingElement;
	              },100);
	          }
	
	          });
	
	          $scope.editAction = [];
	
	          $scope.editActionData = function($index){
	            $scope.editAction[$index]= true;
	          };
	
	          $scope.retrainData = function(){
	            entityLinkingService.retrain({'sess_id':vm.sess_id}).then(function(data){
	                         console.log("data"+data)
	                         if(data.data.status == 'success'){
	                            $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'success',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                            });
	                         }
	                         else {
	                            $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'warning',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                            });
	                         }
	
	
	
	            },function(){
	                $.UIkit.notify({
	                   message : "Internal Server Error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	                });
	
	            });
	
	          }
	       }
	       else{
	          processDetailsServices.postProcessList($stateParams.id,vm.sess_id).then(function(data){
	              if(data.data.status=="success"){
	                  vm.documentType = $stateParams.type.toLowerCase();
	                  $scope.processListDetails = data.data.data;
	                  $scope.recordDataConfig = $scope.processListDetails.config.record_data;
	                  $scope.recordData =$scope.processListDetails.data;
	                  vm.digitalDocumentData =angular.copy(data.data.data.data.elements.digital);
	                  vm.heightOfWindow = $(window).height()-70;
	                  vm.heightOfWindow1 = $(window).height()-120;
	              }
	          });
	
	          $rootScope.emailSlider = {
	            value: 75,
	            options: {
	              floor: 0,
	              ceil: 100,
	              onEnd: function(id) {
	
	              }
	            }
	          };
	
	//          $scope.emailBodyHtml = function() {
	//              return $sce.trustAsHtml(vm.emailDocumentData.attributes.body);
	//          };
	//
	//          $scope.emailOriginalHtml = function(){
	//              return $sce.trustAsHtml(vm.emailDocumentData.attributes.original);
	//          }
	
	          $scope.emailAttachments = function(htmldata){
	              return $sce.trustAsHtml(htmldata);
	          }
	
	          $scope.downloadAttachment = function(file_path){
	             var downloadUrl = $scope.url+'/api/download/efs/'+file_path;
	             window.location.assign(downloadUrl);
	          }
	
	       }
	       $scope.getDocumentsListData = function(type){
	
	         documentsListService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':$scope.filter_obj}}).then(function(data){
	               if(data.data.status=="success"){
	                  $scope.processListData=data.data.data;
	                  $scope.processListDataList = $scope.processListData.data;
	                  $scope.filter_obj.totalRecords = data.data.data.total_count;
	                  $scope.recentRecords = [];
	                  angular.forEach($scope.processListDataList,function(value,key){
	                     var digital = false
	                    if(value.hasOwnProperty('is_digital'))
	                       digital = true;
	                    $scope.recentRecords.push({'doc_id':value.doc_id,'mime_type':value.mime_type,'is_digital':digital});
	                  });
	                  localStorage.setItem('recentRecords',JSON.stringify($scope.recentRecords))
	                  localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	                  //$scope.updateFilterObj(type);
	                  vm.navigatePage(type);
	
	               }
	               else{
	                 $.UIkit.notify({
	                   message : data.data.msg,
	                   status  : 'danger',
	                   timeout : 3000,
	                   pos     : 'top-center'
	                 });
	
	               }
	         },function(err){
	            console.log(err)
	           $.UIkit.notify({
	               message : "Internal server error",
	               status  : 'warning',
	               timeout : 3000,
	               pos     : 'top-center'
	           });
	
	         });
	       };
	
	       vm.renderHTMLData = function(){
	            return $sce.trustAsHtml(vm.renderHtml);
	       };
	       vm.renderEmailHTMLData = function(data){
	            return $sce.trustAsHtml(data);
	       };
	       vm.showEmailAttachment = function(attachmentObj){
	            //alert(attachmentObj);
	            var doc_id=attachmentObj.doc_id;
	            var prop="none";
	            //$state.reload();
	            $state.go("app.review",{id:doc_id, type:prop,queue:$stateParams.queue})
	       };
	
	       vm.updateNlp = function(obj,prop){
	           var sendObj = {"elements":obj,"doc_id":$stateParams.id};
	           entityLinkingService.sendEmailNlp({'data':sendObj,'sess_id':vm.sess_id}).then(function(data){
	              if(data.data.status=="success"){
	                 $.UIkit.notify({
	                       message : data.data.msg,
	                       status  : 'success',
	                       timeout : 3000,
	                       pos     : 'top-center'
	                 });
	              }
	           },function(err){
	               $.UIkit.notify({
	                   message : "Internal server error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	               });
	           });
	       };
	
	       vm.newAttribute = function(action){
	           vm.newAttributeObj = angular.copy({"attribute":"","value":"","action":action});
	           vm.newAttributeShow = true;
	       };
	
	       vm.saveNewAttribute = function(){
	           if(vm.newAttribute.attribute != "" && vm.newAttribute.attribute != undefined){
	               if(vm.newAttribute.value != "" && vm.newAttribute.value != undefined){
	                   vm.emailEntities.fields[0].nlp.attributes.push(vm.newAttribute);
	                   entityLinkingService.sendEmailNlp({'data':sendObj,'sess_id':vm.sess_id}).then(function(data){
	                      if(data.data.status=="success"){
	                         vm.newAttributeShow = false;
	                         vm.newAttrErr = "";
	                         $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'success',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                         });
	                      }
	                   },function(err){
	                       vm.newAttrErr = "";
	                       $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                       });
	                   });
	               }
	               else{
	                   vm.newAttrErr = "Please enter the value";
	               }
	           }
	           else{
	               vm.newAttrErr = "Please enter the attribute";
	           }
	       };
	
	       vm.getEntitiesList = function(){
	          entityLinkingService.getDomainObjectsEntities({'sess_id':vm.sess_id}).then(function(resp){
	              $scope.doEntitiesList = resp.data;
	          },function(err){
	             console.log(err)
	             $.UIkit.notify({
	                     message : "Internal server error",
	                     status  : 'warning',
	                     timeout : 3000,
	                     pos     : 'top-center'
	             });
	           });
	       };
	       vm.getEntitiesList();
	
	       vm.getAttributesList = function(){
	          entityLinkingService.getDomainObjects({'sess_id':vm.sess_id}).then(function(resp){
	              $scope.entitiesList = resp.data;
	          },function(err){
	             console.log(err)
	             $.UIkit.notify({
	                     message : "Internal server error",
	                     status  : 'warning',
	                     timeout : 3000,
	                     pos     : 'top-center'
	             });
	           });
	       };
	       vm.getAttributesList();
	
	       vm.showAttributes = function(node){
	            vm.respectedAttributes = [];
	            if($scope.entitiesList[node.entity_key]!=undefined)
	               vm.respectedAttributes = $scope.entitiesList[node.entity_key];
	       };
	
	       vm.showAttributesForNew = function(thisVal){
	            var entity_key = thisVal.$parentNodeScope.$modelValue.entity_key;
	            vm.respectedAttributes = [];
	            if($scope.entitiesList[entity_key]!=undefined)
	               vm.respectedAttributes = $scope.entitiesList[entity_key];
	       };
	
	       vm.showNewEntities = function(node){
	            vm.respectedEntities = [];
	            if($scope.doEntitiesList[node.name]!=undefined)
	               vm.respectedEntities = $scope.doEntitiesList[node.name];
	       };
	
	       vm.selectedAttribute = function(attr,node,thisVal){
	            node.name = attr;
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": thisVal.insight_id,
	                        "entity_id": thisVal.entity_id,
	                        "type": thisVal.type,
	                        "old_key": node.entity_key+"."+node.extracted_name,
	                        "key": node.entity_key+"."+node.name,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "value":node.values
	                      }
	            };
	            $scope.submitFeedback(obj);
	
	       };
	
	       vm.selectedNewEntityAttribute = function(attr,node){
	            $scope.newEntityObj.name = attr;
	            $scope.newEntityObj.entity_key = node.name+"."+attr
	
	       };
	       vm.selectedNewEntityAttributeValue = function(attr){
	            vm.attributeKey = attr;
	
	       };
	
	       vm.selectedAttributeForNew = function(attr,node){
	            $scope.listOfNewAttributesObjs[node.insight_id].attributeName = attr;
	       }
	
	      $scope.url = $location.protocol() + '://'+ $location.host() +':'+  $location.port();
	      $scope.download =function(){
	        var downloadUrl = $scope.url+'/api/download/json/'+$scope.doc_id+'/';
	        window.location.assign(downloadUrl);
	      };
	
	
	      /******************************************************************************
	                Entity Linking code starts here
	      ******************************************************************************/
	        $scope.moreValue={};
	        $scope.isEditAttributeValue={};
	
	        $scope.hoverIn = function(index,tempId){
	          this.hoverEdit = true;
	        };
	        $scope.hoverOut = function(index,tempId){
	          this.hoverEdit = false;
	        };
	        $scope.showMore = function(index,tempId){
	          //this.moreValue = true;
	          $scope.moreValue[tempId]="true";
	        };
	        $scope.showLess = function(index,tempId){
	          //this.moreValue = true;
	          $scope.moreValue[tempId]="false";
	        };
	
	        $scope.editAttributeValues = function(index,tempId,templateType,node,thisVal){
	            if(templateType!='known'){
	                $scope.isEditAttributeValue[tempId]=true;
	                $scope.newNode = node.entity_id;
	                $scope.nodeNameBackup = angular.copy(node.name);
	                $scope.nodeValueBackup = angular.copy(node.current_value);
	                var temp = thisVal.$parentNodeScope.$modelValue.temp_id;
	                var afterTemp = temp.replace("-",".");
	                $scope.attributesList = $scope.entitiesList[afterTemp];
	            }
	        };
	        $scope.cancelEditAttributeValues = function(index,tempId,templateType,node){
	            $scope.isEditAttributeValue[tempId]=false;
	            node.name = angular.copy($scope.nodeNameBackup);
	            node.current_value = angular.copy($scope.nodeValueBackup);
	        };
	        $scope.saveEditAttributeValues = function(index,tempId,templateType,node,thisVal,parentIndex){
	//            console.log("node=>", node);
	//            console.log("index=>", index);
	            console.log("chnages in extract" +$scope.extractOutput);
	
	            var temidArray  = tempId.split("-");
	            var entId=temidArray[temidArray.length-1];
	            var entId1=entId.replace(/~/g, "-");
	
	            var enKey = getKey(tempId);
	            var old_key = angular.copy(enKey);
	            var idnx = enKey.lastIndexOf(".");
	            enKey = enKey.substring(0,idnx);
	            enKey = enKey +'.'+ node.name;
	
	            var elValue=[];
	            var insId = "";
	            angular.forEach(node.current_value, function(val, key){
	                var curArr={};
	                curArr.element_id=val.element_id;
	                curArr.is_checked=val.is_checked;
	                curArr.page_no=val.page_no;
	                curArr.score=val.score;
	                curArr.value=val.value;
	                elValue.push(curArr);
	            });
	            insId = thisVal.$parentNodeScope.$modelValue.attributes[parentIndex].insight_id;
	
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": insId,
	                        "entity_id": entId1,
	                        "type": node.type,
	                        "old_key": old_key,
	                        "key": enKey,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "value":elValue
	                      }
	            };
	            node.is_corrected = true;
	            $scope.submitFeedback(obj,tempId);
	        };
	
	        $scope.submitFeedback = function(obj){
	            var reqObj = {"sess_id":vm.sess_id,"data":{"feedback": obj.data}};
	            entityLinkingService.saveEntityLinkingFeedback(reqObj).then(function (data) {
	                if(data.data.status=="success"){
	
	                    $scope.newNode = "";
	                    vm.attributeKey = "";
	                    vm.attributeValue= "";
	                    vm.selectedElementFlag = false;
	                    vm.selectedElementId = '';
	
	                }
	                else {
	
	                    $.UIkit.notify({
	                     message : data.data.msg,
	                     status  : 'warning',
	                     timeout : 3000,
	                     pos     : 'top-center'
	                    });
	                }
	
	            },function (err) {
	
	                $.UIkit.notify({
	                 message : "Internal server error @saveEntityLinkingFeedback",
	                 status  : 'warning',
	                 timeout : 3000,
	                 pos     : 'top-center'
	                });
	            })
	        };
	
	        vm.deleteEntityCall = function(node){
	                node.is_delete = true;
	                var obj={
	                    "sess_id":vm.sess_id,
	                    "data":{
	                        "entity_id": node.entity_id,
	                        "type": "entity",
	                        "doc_id":$stateParams.id,
	                        "action": "delete"
	                    }
	                };
	                //$scope.submitFeedback(obj);
	
	        };
	
	        vm.deleteFeedback = function(node,thisVal){
	                var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": thisVal.insight_id,
	                        "entity_id": thisVal.entity_id,
	                        "type": thisVal.type,
	                        "key": node.entity_key+"."+node.name,
	                        "action": "delete",
	                        "doc_id":$stateParams.id,
	                        "value":node.values
	                      }
	                };
	
	                $scope.submitFeedback(obj);
	
	        };
	
	        vm.deleteAttribute = function(node,thisVal){
	            if(vm.showPopupConfirm){
	                node.is_delete = true;
	                vm.deleteFeedback(node,thisVal);
	            }
	            else{
	                ngDialog.open({ template: 'confirmEntityBox',
	                  controller: ['$scope','$state' ,function($scope,$state) {
	                      $scope.activePopupText = 'Are you sure you want to delete '+node.name+ ' attribute';
	                      $scope.onConfirmActivation = function (flag){
	                            ngDialog.close();
	                            if(flag){
	                                vm.showPopupConfirm = true;
	                            }
	
	                            node.is_delete = true;
	                            vm.deleteFeedback(node,thisVal);
	                      };
	                  }]
	                });
	            }
	
	
	        };
	
	        vm.deleteElementData = function(node){
	            node.is_delete = true;
	            var size = Object.keys(node.drawerIndexObj).length;
	            for(var i=0;i<size;i++){
	                $scope.drawer[node.value_coordinates_list[i].page_no][node.drawerIndexObj['value'+i]].is_display = false;
	                $scope.drawer[node.value_coordinates_list[i].page_no][node.drawerIndexObj['value'+i]].is_delete = true;
	            }
	            vm.disableSelector();
	        }
	
	        vm.deleteValue = function(node){
	            if(vm.showPopupConfirm){
	                vm.deleteElementData(node);
	
	            }
	            else{
	                ngDialog.open({ template: 'confirmEntityBox',
	                  controller: ['$scope','$state' ,function($scope,$state) {
	                      $scope.activePopupText = 'Are you sure you want to delete '+node.value+ ' value';
	                      $scope.onConfirmActivation = function (flag){
	                            ngDialog.close();
	                            if(flag){
	                                vm.showPopupConfirm = true;
	                            }
	
	                            vm.deleteElementData(node);
	                      };
	                  }]
	                });
	            }
	
	
	        };
	
	        vm.addNewAttribute = function(node){
	            $scope.coordinatesDisplay = [];
	            $scope.listOfNewAttributes = [];
	            $scope.listOfNewAttributesObjs={};
	            vm.attributeValue = "";
	            vm.attributeKey = "";
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = false;
	            $scope.drawerCopy = angular.copy($scope.drawer);
	            for(var i=0;i<node.groups.length;i++){
	                $scope.listOfNewAttributes[node.groups[i].insight_id] = true;
	                $scope.listOfNewAttributesObjs[node.groups[i].insight_id] = {};
	                $scope.listOfNewAttributesObjs[node.groups[i].insight_id].attributeName = "Attribute";
	                $scope.listOfNewAttributesObjs[node.groups[i].insight_id].attributeValue = "";
	            }
	
	        };
	
	        vm.deleteEntity = function(node){
	            var attrKey = node.name;
	            ngDialog.open({ template: 'confirmBox1',
	              controller: ['$scope','$state' ,function($scope,$state) {
	                  $scope.activePopupText = 'Are you sure you want to delete '+attrKey+ ' entity';
	                  $scope.onConfirmActivation = function (){
	                        ngDialog.close();
	                        vm.deleteEntityCall(node);
	                  };
	              }]
	            });
	        };
	
	
	        vm.editCoordinates = function(node){
	            $scope.coordinatesDisplay = [];
	            $scope.coordinatesDisplay[node.temp_id] = true;
	            //vm.getCurrentValue(node);
	            node.is_edit_coordinates = true;
	            //vm.enableSelector('new');
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=true;
	            }
	            var zoomValue = 1;
	            $(".zoomSize").css("zoom",zoomValue);
	
	
	            for(var i=0;i<node.value_coordinates_list.length;i++){
	                var heightOfImage = (node.value_coordinates_list[i].page_no-1)*document.getElementById("calImage").style.height.replace("px","");
	
	                        document.getElementById('scrollImage').scrollTop = zoomValue*heightOfImage+node.value_coordinates_list[i].y1*zoomValue-200;
	                        document.getElementById('scrollImage').scrollLeft = node.value_coordinates_list[i].x1*zoomValue-100;
	
	
	
	                vm.editZone(node.value_coordinates_list[i])
	            }
	        };
	
	        vm.acceptCoordinates = function(node,type,obj){
	
	            $scope.coordinatesDisplay = [];
	
	            if(node.value_coordinates_list.length==0){
	                for(var i=0;i<$scope.no_of_pages;i++){
	                   if($scope.selector[i+1].x1!=undefined){
	
	                      var obj = {};
	
	                      obj.x1 = $scope.selector[i+1].x1;
	                      obj.y1 = $scope.selector[i+1].y1;
	                      obj.x2 = $scope.selector[i+1].x2;
	                      obj.y2 = $scope.selector[i+1].y2;
	                      obj.page_no = i+1;
	                      node.value_coordinates_list.push(obj);
	                      vm.updateDrawer('value',node,'');
	                      break;
	                   }
	                }
	                vm.disableSelector();
	                return;
	            }
	
	            for(var i=0;i<node.value_coordinates_list.length;i++){
	               var page_no = node.value_coordinates_list[i].page_no
	               if($scope.selector[page_no].x1!=undefined){
	                  node.value_coordinates_list[i].x1 = $scope.selector[page_no].x1;
	                  node.value_coordinates_list[i].y1 = $scope.selector[page_no].y1;
	                  node.value_coordinates_list[i].x2 = $scope.selector[page_no].x2;
	                  node.value_coordinates_list[i].y2 = $scope.selector[page_no].y2;
	               }
	            }
	            var size = Object.keys(node.drawerIndexObj).length;
	            for(var i=0;i<size;i++){
	                $scope.drawer[node.value_coordinates_list[i].page_no][node.drawerIndexObj['value'+i]].x1 = node.value_coordinates_list[i].x1;
	                $scope.drawer[node.value_coordinates_list[i].page_no][node.drawerIndexObj['value'+i]].y1 = node.value_coordinates_list[i].y1;
	                $scope.drawer[node.value_coordinates_list[i].page_no][node.drawerIndexObj['value'+i]].x2 = node.value_coordinates_list[i].x2;
	                $scope.drawer[node.value_coordinates_list[i].page_no][node.drawerIndexObj['value'+i]].y2 = node.value_coordinates_list[i].y2;
	            }
	            vm.disableSelector();
	        };
	
	        $scope.calculation = function(selectedItem){
	            $scope.obj = {};
	            var imageWidth = parseInt($scope.imageObj.width);
	            var imageHeight = parseInt($scope.imageObj.height);
	            $scope.obj.right = imageWidth-(selectedItem.x2-selectedItem.x1)-selectedItem.x1;
	            $scope.obj.bottom = imageHeight-(selectedItem.y2-selectedItem.y1)-selectedItem.y1;
	            $scope.obj.shleftRight = imageWidth-selectedItem.x1;
	            $scope.obj.shcentertopleft = selectedItem.x1;
	            $scope.obj.shcentertopright = imageWidth-selectedItem.x2;
	            $scope.obj.shcentertopbottom = imageHeight-selectedItem.y1;
	            $scope.obj.shcenterbottomleft = selectedItem.x1;
	            $scope.obj.shcenterbottomright = imageWidth-selectedItem.x2;
	            $scope.obj.shcenterbottomtop = selectedItem.y2;
	            $scope.obj.shrightleft = selectedItem.x2;
	        };
	
	
	        vm.editZone = function(coordinates){
	
	                  //$rootScope.selectedIndex = index;
	                  $(".image-style").height($(window).height());
	                  $rootScope.highlight=[];
	                  $rootScope.imageBlur='';
	            //      $rootScope.highlight[index] = "highlightClass";
	            //      $scope.zoomDisplay = 'zoomSize1';
	
	                   $scope.imageObj={};
	                   $scope.imageObj.width = document.getElementById("calImage").style.width.replace("px","");
	                   $scope.imageObj.height = document.getElementById("calImage").style.height.replace("px","");
	                   $scope.calculation(coordinates);
	                    $scope.selector[coordinates.page_no].x1 = coordinates.x1;
	                    $scope.selector[coordinates.page_no].y1 = coordinates.y1;
	                    $scope.selector[coordinates.page_no].x2 = coordinates.x2;
	                    $scope.selector[coordinates.page_no].y2 = coordinates.y2;
	            //        if($scope.drawer[index].key == 'value')
	            //              $scope.selector.color = $scope.rect.marker_color;
	            //        else
	            //             $scope.selector.color = $scope.rect.data_color;
	            //        $scope.selector.stroke  = $scope.rect.stroke;
	            //        $scope.selector.enabled = true;
	
	                    if(document.getElementsByClassName("mr-box")[coordinates.page_no-1].style!=undefined){
	                        document.getElementsByClassName("mr-box")[coordinates.page_no-1].style.display = "none";
	                        document.getElementsByClassName("mr-box")[coordinates.page_no-1].style.top = coordinates.y1+"px";
	                        document.getElementsByClassName("mr-box")[coordinates.page_no-1].style.left = coordinates.x1+"px";
	                        document.getElementsByClassName("mr-box")[coordinates.page_no-1].style.bottom = ""+$scope.obj.bottom+"px";
	                        document.getElementsByClassName("mr-box")[coordinates.page_no-1].style.right = ""+$scope.obj.right+"px";
	                    }
	                    if(document.getElementsByClassName("mr-shadow")[coordinates.page_no-1].style!=undefined){
	                        document.getElementsByClassName("mr-shadow left")[coordinates.page_no-1].style.right = ""+$scope.obj.shleftRight+"px";
	                        document.getElementsByClassName("mr-shadow center top")[coordinates.page_no-1].style.left = ""+$scope.obj.shcentertopleft+"px";
	                        document.getElementsByClassName("mr-shadow center top")[coordinates.page_no-1].style.right = ""+$scope.obj.shcentertopright+"px";
	                        document.getElementsByClassName("mr-shadow center top")[coordinates.page_no-1].style.bottom = ""+$scope.obj.shcentertopbottom+"px";
	                        document.getElementsByClassName("mr-shadow center bottom")[coordinates.page_no-1].style.left = ""+$scope.obj.shcenterbottomleft+"px";
	                        document.getElementsByClassName("mr-shadow center bottom")[coordinates.page_no-1].style.right = ""+$scope.obj.shcenterbottoformight+"px";
	                        document.getElementsByClassName("mr-shadow center bottom")[coordinates.page_no-1].style.top = ""+$scope.obj.shcenterbottomtop+"px"
	                        document.getElementsByClassName("mr-shadow right")[coordinates.page_no-1].style.left = ""+$scope.obj.shrightleft+"px";
	                    }
	
	
	        };
	
	        vm.getEXtractedValue = function(node){
	            node.value = node.extracted_value;
	        };
	        $scope.uniqueIdGenerator = function() {
	            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	        };
	
	        function s4() {
	                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	        };
	
	        $scope.activeAttributeValues = function(index,tempId,templateType,node){
	
	            var temidArray  = tempId.split("-");
	            var entId=temidArray[temidArray.length-1];
	            var entId1=entId.replace(/~/g, "-");
	
	            var enKey = getKey(tempId);
	
	            var elValue=[];
	            angular.forEach(node.current_value, function(val, key){
	                var curArr={};
	                curArr.element_id=val.element_id,
	                curArr.is_checked=val.is_checked,
	                curArr.page_no=val.page_no,
	                curArr.value=val.value
	                elValue.push(curArr);
	            });
	
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": "",
	                        "entity_id": entId1,
	                        "type": node.type,
	                        "key": enKey,
	                        "action": "accept",
	                        "doc_id":$stateParams.id,
	                        "value":elValue
	                      }
	            };
	            node.is_accept = true;
	            $scope.submitFeedback(obj,tempId);
	//            entityLinkingService.acceptEntityLinking(obj).then(function (data) {
	//                if(data.data.status=="success"){
	//                    node.is_accept = true;
	//                    $.UIkit.notify({
	//                     message : data.data.msg,
	//                     status  : 'success',
	//                     timeout : 3000,
	//                     pos     : 'top-center'
	//                    });
	//                    vm.getGroups();
	//                }
	//                else {
	//                    $.UIkit.notify({
	//                     message : data.data.msg,
	//                     status  : 'warning',
	//                     timeout : 3000,
	//                     pos     : 'top-center'
	//                    });
	//                }
	//
	//            },function (err) {
	//                $.UIkit.notify({
	//                 message : "Internal server error @deleteAttributeValues",
	//                 status  : 'warning',
	//                 timeout : 3000,
	//                 pos     : 'top-center'
	//                });
	//            })
	        };
	
	
	
	
	
	        function getKey(tempId){
	            if(tempId!=""){
	                var keyVals  = tempId.split("-");
	                var elkey="";
	                for(var i=1;i<keyVals.length-1;i++){
	                    if(i==keyVals.length-2)
	                        elkey+=keyVals[i]
	                    else
	                        elkey+=keyVals[i]+"."
	                }
	                console.log(elkey);
	                return elkey;
	            }
	            else{
	                return "";
	            }
	
	        }
	
	        $scope.fieldCriteria = function(node){
	            if(node.is_accept){
	                return 'accepted1'
	            }
	            else if(node.is_corrected){
	              return 'corrected1'
	            }
	            else{
	               return 'reviewed1'
	            }
	        };
	
	        vm.addNewNode = function(node,type,thisVal){
	           vm.attributeValue = "";
	           vm.attributeKey = "";
	           vm.selectedElementId = '';
	           vm.selectedElementFlag = false;
	           $scope.drawerCopy = angular.copy($scope.drawer);
	           $scope.entityModeEdit = false;
	           if(type == 'group'){
	               $scope.newNode = node.entity_id;
	                var temp = thisVal.$parentNodeScope.$modelValue.temp_id;
	                var afterTemp = temp.replace("-",".");
	                $scope.attributesList = $scope.entitiesList[afterTemp];
	
	           }
	           else{
	                $scope.newNode = node.temp_id;
	                var temp = node.temp_id;
	                var afterTemp = temp.replace("-",".");
	                $scope.attributesList = $scope.entitiesList[afterTemp];
	           }
	
	        };
	
	        vm.addNewEntity = function(node){
	           if(node.type == 'domain'){
	               vm.attributeValue = "";
	               vm.attributeKey = "Attribute";
	               vm.selectedElementId = '';
	               vm.selectedElementFlag = false;
	               $scope.displayNewEntity = true;
	               $scope.newEntityObj = {};
	               $scope.newEntityObj.name = "Entity";
	               $scope.newEntityObj.type = "grouped_entity";
	               $scope.newEntityObj.groups = [];
	
	//                {
	// 	"cardinality": "n",
	// 	"groups": [{
	// 		"type": "attribute",
	// 		"entity_id": "12cdd635-c88e-44ee-a4ba-515e74009c16",
	// 		"insight_id": "3c15686e-674f-4702-9ab2-4337f6665089",
	// 		"attributes": [{
	// 			"is_corrected": false,
	// 			"name": "problem",
	// 			"is_accept": true,
	// 			"temp_id": "resume-subheadings_active_problems_summary-problem-12cdd635~c88e~44ee~a4ba~515e74009c16",
	// 			"values": [{
	// 				"value_coordinates_list": ],
	// 				"value": "problem",
	// 				"score": 90.0,
	// 				"temp_id": "resume-subheadings_active_problems_summary-problem-12cdd635~c88e~44ee~a4ba~515e74009c16_1",
	// 				"is_checked": true,
	// 				"extracted_value": "problem",
	// 				"page_no": 2,
	// 				"element_id": "1f158160-43fc-4c66-b9cf-2ee6604c856c"
	// 			}],
	// 			"type": "attribute",
	// 			"justification": "",
	// 			"extracted_name": "problem",
	// 			"need_review": false,
	// 			"entity_key": "resume.subheadings_active_problems_summary"
	// 		}]
	// 	}],
	// 	"name": "subheadings_active_problems_summary",
	// 	"entity_key": "resume.subheadings_active_problems_summary",
	// 	"temp_id": "resume-subheadings_active_problems_summary",
	// 	"type": "grouped_entity",
	// 	"parent_entity_id": "c05a61e0-98af-429c-a126-a26f96c15192",
	// 	"extracted_name": "subheadings_active_problems_summary",
	// 	"entity_id": ""
	// }
	           }
	
	
	        };
	
	        $scope.changeSelectEntity = function(node){
	            var ent = node.name+'.'+vm.entityKey;
	            $scope.attributesList = $scope.entitiesList[ent];
	        };
	
	        vm.selectedElement = function(){
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = true;
	            if($scope.elementsList.length>0){
	                $scope.drawer = angular.copy([]);
	                for(var i=0;i<$scope.no_of_pages;i++){
	                    $scope.drawer[i+1] = angular.copy([]);
	                }
	                $scope.zoomDisplay = 'zoomSize';
	                $scope.current_page = 1;
	                $scope.current_selection_page_no = 1;
	                $rootScope.selectedIndex =[];
	                $rootScope.selectedPage = [];
	
	                //vm.enableSelector();
	                for(var i=0;i<$scope.elementsList.length;i++){
	                    $scope.elementsList[i].drawerIndexObj = {};
	                    vm.updateDrawer('value',$scope.elementsList[i]);
	                }
	            }
	        };
	
	        vm.cancelNewAttribute = function(node){
	            $scope.drawer = angular.copy([]);
	            for(var i=0;i<$scope.no_of_pages;i++){
	                $scope.drawer[i+1] = angular.copy([]);
	            }
	            vm.zoomValue = 0.20;
	            $(".zoomSize").css("zoom",vm.zoomValue);
	            $scope.current_page = 1;
	            $scope.current_selection_page_no = 1;
	            $rootScope.selectedIndex =[];
	            $rootScope.selectedPage = [];
	            $scope.drawer = angular.copy($scope.drawerCopy);
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = false;
	            $scope.listOfNewAttributes[node.insight_id] = false;
	            $scope.listOfNewAttributesObjs[node.insight_id] = {};
	
	
	            vm.attributeValue = "";
	            vm.attributeKey = "";
	            vm.entityKey = "";
	        };
	
	        vm.cancelNewEntity = function(){
	            $scope.displayNewEntity = false;
	            $scope.displayNewAttribute = false;
	            vm.attributeValue = "";
	            vm.attributeKey = "";
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = false;
	
	        };
	
	
	
	        vm.saveNewEntity = function(){
	            if($scope.newEntityObj.name == 'Entity'){
	                $.UIkit.notify({
	                                               message : 'Please select an Entity ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	                 return
	            }
	            $scope.displayNewAttribute = true;
	            //$scope.newEntityObj.groups.push({'entity_key':$scope.newEntityObj.entity_key,'type':'attribute',''})
	
	        };
	
	        vm.saveNewNodeAttribute = function(node,thisVal){
	           if(vm.selectedElementId==''){
	             $.UIkit.notify({
	                                               message : 'Please select an element ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	             return
	           }
	
	           var reqObj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": node.insight_id,
	                        "type": "attribute",
	                        "key": name+'.'+$scope.listOfNewAttributesObjs[node.insight_id].attributeName,
	                        "entity_id": node.entity_id,
	                        "element_id":vm.selectedElementId,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "value": [{
				                "value": $scope.listOfNewAttributesObjs[node.insight_id].attributeValue,
				                "is_checked": true
			                }]
	                      }
	           };
	
	           var entity_id = angular.copy(node.entity_id);
	           entity_id = entity_id.replace(/-/gi, "~")
	           var tempId = thisVal.$parentNodeScope.$modelValue.temp_id
	           var str = angular.copy(tempId.split('-'));
	           var temp_id = ''
	           var unique_id = $scope.uniqueIdGenerator();
	           for(var j=0;j<str.length-1;j++){
	                temp_id+=str[j]+'-'
	           }
	           temp_id = temp_id+unique_id+"-"+entity_id
	
	
	           var obj = {
	                        "is_corrected": false,
	                        "values": [{
	                            "temp_id": temp_id+'_1',
	                            "score": 100,
	                            "value_coordinates_list": [],
	                            "extracted_value": $scope.listOfNewAttributesObjs[node.insight_id].attributeValue,
	                            "value": $scope.listOfNewAttributesObjs[node.insight_id].attributeValue,
	                            "drawerIndexObj":{}
	                        }],
	                        "need_review": false,
	                        "type": "attribute",
	                        "is_accept": true,
	                        "justification": "",
	                        "temp_id": temp_id,
	                        "name": $scope.listOfNewAttributesObjs[node.insight_id].attributeName,
	                        "extracted_name": $scope.listOfNewAttributesObjs[node.insight_id].attributeName,
	                        "entity_key":thisVal.$parentNodeScope.$modelValue.entity_key
	
	           }
	           node.attributes.push(obj);
	           $scope.listOfNewAttributes[node.insight_id] = false;
	           $scope.listOfNewAttributesObjs[node.insight_id] = {};
	
	           vm.cancelNewAttribute(node)
			   $scope.submitFeedback(reqObj);
	        };
	
	        vm.saveNewEntityWithAttribute = function(node){
	            if(vm.attributeKey=='Attribute'){
	             $.UIkit.notify({
	                                               message : 'Please select an Attribute ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	             return
	             }
	            if(vm.selectedElementId==''){
	             $.UIkit.notify({
	                                               message : 'Please select an element ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	             return
	             }
	             var reqObj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "type": "entity",
	                        "entity_name": vm.attributeKey,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "attributes":[{
	                            "type": "attribute",
	                            "insight_id":node.insight_id,
	                            "key": $scope.newEntityObj.entity_key,
	                            "entity_id": node.entity_id,
	                            "element_id":vm.selectedElementId,
	                            "action": "upsert",
	                            "doc_id":$stateParams.id,
	                            "value": [{
	                                "value": vm.attributeValue,
	                                "is_checked": true
	                            }]
	                        }]
	                      }
	             };
	
	             var obj = {name:$scope.newEntityObj,type:'attribute',attributes:[{name:vm.attributeKey,type:'attribute','values':[{value:vm.attributeValue}]}]}
	             $scope.newEntityObj.groups.push(obj);
	             node.attributes.unshift($scope.newEntityObj);
	             vm.cancelNewEntity();
	
	
	
				$scope.submitFeedback(reqObj);
	
	
	
	        };
	
	        vm.saveNewnodeWithEntity = function(node,type,thisVal){
	           if(vm.selectedElementId==''){
	             $.UIkit.notify({
	                                   message : 'Please select an element ',
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                           });
	             return
	           }
	            var tempId = node.temp_id;
	            var name = '';
	            var type_group = 'entity_group'
	            if(type == 'group'){
	               name = thisVal.$parentNodeScope.$modelValue.name;
	               type_group = 'attribute'
	            }
	            else{
	               name = node.name
	            }
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "type": "entity",
	                        "entity_name": vm.entityKey,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "attributes":[{
	                            "insight_id": node.insight_id,
	                            "type": "attribute",
	                            "key": vm.entityKey+'.'+vm.attributeKey,
	                            "entity_id": node.attributes[0].entity_id,
	                            "element_id":vm.selectedElementId,
	                            "action": "upsert",
	                            "doc_id":$stateParams.id,
	                            "value": [{
	                                "value": vm.attributeValue,
	                                "is_checked": true
	                            }]
	                        }]
	                      }
	            };
	
	            if(type != 'group'){
	               obj.data.add_type=type_group
	            }
	
	            var pushObj = {
	                    "type": "entity",
	                    "name": vm.entityKey,
	                    "attributes":[{
	                        "attributes": [{
	                            "name": vm.attributeKey,
	                            "is_corrected":true,
	                            "current_value": [{
	                                "value": vm.attributeValue,
	                                "is_checked": true
	                            }],
	                            "type": "attribute"
	                        }],
	                        "entity_id": node.entity_id,
	                        "type": "attribute"
	                    }]
					}
	//		    if(type=="group"){
	//		        node.attributes.push(pushObj.attributes[0]);
	//		    }
	//		    else{
	//		        node.attributes.push(pushObj);
	//		    }
				$scope.submitFeedback(obj,tempId);
	        };
	
	        vm.saveAttributeEdit = function(value,node,thisVal){
	
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": thisVal.insight_id,
	                        "entity_id": thisVal.entity_id,
	                        "type": thisVal.type,
	                        "old_key": node.entity_key+"."+node.extracted_name,
	                        "key": node.entity_key+"."+node.name,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "value":[{'element_id':value.element_id,'value':value.value,'page_no':value.page_no,'score':value.score,'is_checked': true}]
	                      }
	            };
	            $scope.submitFeedback(obj);
	        };
	
	        vm.completeReview = function(){
	            var text = $scope.recordData.file_name;
	            var doc_id = $scope.currentDocId;
	            ngDialog.open({ template: 'confirmBox',
	              controller: ['$scope','$state' ,function($scope,$state) {
	                  $scope.activePopupText = 'Are you sure you want to complete the review for '+"'"+text+"'"+' ?';
	                  $scope.onConfirmActivation = function (){
	                             ngDialog.close();
	                             reviewService.saveCompleteReviewProcessed({'data':doc_id,'sess_id':vm.sess_id}).then(function(resp){
	                                  if(resp.data.status == "success"){
	
	                                       $.UIkit.notify({
	                                               message : resp.data.msg,
	                                               status  : 'success',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	
	                                       if(vm.loginDataObj.role == "sv"){
	                                            $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	                                       }
	                                       else{
	                                            $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	                                       }
	                                  }
	                                  else{
	                                       $.UIkit.notify({
	                                               message : resp.data.msg,
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	                                  }
	                             },function(err){
	                                  $.UIkit.notify({
	                                         message : "Internal server error",
	                                         status  : 'warning',
	                                         timeout : 3000,
	                                         pos     : 'top-center'
	                                  });
	                             });
	
	                  };
	              }]
	            });
	        };
	
	        $scope.goToCaseDashboard = function(){
	            if($scope.loginData.role == "sv"){
	                $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	            }
	            else{
	                $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	            }
	        };
	
	        vm.stateChangeFunct = function(obj){
	            entityLinkingService.saveChangedState({'data':obj,'sess_id':vm.sess_id}).then(function(resp){
	                  if(resp.data.status == "success"){
	                       $.UIkit.notify({
	                               message : resp.data.msg,
	                               status  : 'success',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                       });
	                       if($scope.loginData.role == "sv"){
	                            $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	                       }
	                       else{
	                            $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	                       }
	                  }
	                  else{
	                       $.UIkit.notify({
	                               message : resp.data.msg,
	                               status  : 'danger',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                       });
	                  }
	            },function(err){
	                  $.UIkit.notify({
	                         message : "Internal server error",
	                         status  : 'warning',
	                         timeout : 3000,
	                         pos     : 'top-center'
	                  });
	            });
	        };
	
	        vm.clearStateSelection = function(){
	            vm.changedState = "";
	            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	                $scope.$apply();
	            }
	        };
	
	        vm.saveStateChange = function(){
	            var obj = {"doc_state": vm.changedState,"doc_id": $stateParams.id};
	            if(vm.changedState != ""){
	                ngDialog.open({ template: 'confirmBox1',
	                  preCloseCallback:function(){ vm.clearStateSelection() },
	                  controller: ['$scope','$state' ,function($scope,$state) {
	                      $scope.activePopupText = 'Would you like to send this document to '+vm.changedState+'?';
	                      $scope.onConfirmActivation = function (){
	                            vm.stateChangeFunct(obj);
	                            ngDialog.close();
	                      };
	                  }]
	                });
	            }
	        };
	
	        vm.isRuleExist = function(value){
	            var isrule = false;
	            if(value.rules && !angular.equals({},value.rules)){
	                if(!value.rules.status){
	                    isrule = true;
	                }
	            }
	            return isrule;
	        }
	
	         $scope.url = $location.protocol() + '://'+ $location.host() +':'+  $location.port();
	         $scope.download =function(){
	            var downloadUrl = $scope.url+'/api/download/json/'+$scope.doc_id+'/';
	            window.location.assign(downloadUrl);
	         };
	
	         $scope.showExtractedValue = false
	
	         document.getElementById('content-wrapper').addEventListener('scroll', function (e) {
	            $scope.current_page = Math.round(e.target.scrollTop / PAGE_HEIGHT) + 1;
	            console.log('page_no'+ $scope.current_page);
	            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	                $scope.$apply();
	            }
	
	         });
	         vm.collapsed = {};
	        $scope.chnageIcon =function(collapse,temp_id){
	            vm.collapsed[temp_id] = !vm.collapsed[temp_id];
	            console.log("collapse==>", vm.collapsed[temp_id]);
	        };
	
	
	
	      /******************************************************************************
	                Entity Linking code ends here
	      ******************************************************************************/
	}];

/***/ }),
/* 115 */
/***/ (function(module, exports) {

	module.exports = "<script type=\"text/ng-template\" id=\"tree1.html\">\n    {$data.name$}\n\n    <ul class=\"tree\">\n        <li ng-repeat=\"data in data.nodes track by $index\" ng-include=\"'tree1.html'\"></li>\n    </ul>\n</script>\n<script type=\"text/ng-template\" id=\"confirmBox1\">\n    <div class=\"popup-header\">\n        <h3 class=\"text-primary\"> Confirm Action </h3>\n        <hr class=\"popup-hr\"/>\n        <p class=\"text-info\" style=\"padding:10px\"> {$ activePopupText $} </p>\n        <br/>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n                <button class=\"btn btn-primary right\" ng-click=\"onConfirmActivation()\"> Confirm</button>\n            </div>\n        </div>\n    </div>\n</script>\n<script type=\"text/ng-template\" id=\"confirmBox\">\n    <div class=\"popup-header\">\n        <h3 class=\"text-primary\"> Complete Document Review? </h3>\n        <hr class=\"popup-hr\"/>\n        <p class=\"modal-text\"> {$ activePopupText $} </p>\n        <br/>\n    </div>\n    <div class=\"popup-footer\">\n        <div class=\"row text-right\">\n            <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n                <button class=\"btn bnt-cst-process\" ng-click=\"onConfirmActivation()\"> Complete Review</button>\n\n            </div>\n        </div>\n    </div>\n</script>\n<script type=\"text/ng-template\" id=\"confirmEntityBox\">\n    <div class=\"popup-header\">\n        <label class=\"text-primary\"> Confirm Action </label>\n        <hr class=\"popup-hr\"/>\n    </div>\n    <div class=\"popup-body\">\n        <div class=\"text-info\" style=\"padding:10px;font-size:16px;\"> {$ activePopupText $} </div>\n        <br>\n        <label class=\"custom-checkbox\" style=\"margin-left:9px;\">\n            <span>Do not show this message again ?</span>\n          <input type=\"checkbox\" ng-model=\"rc.showPopup.popup\"/>\n          <span class=\"checkmark\" style=\"top:3px;\"></span>\n        </label>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n                <button class=\"btn btn-primary right\" ng-click=\"onConfirmActivation(rc.showPopup.popup)\"> Confirm</button>\n            </div>\n        </div>\n    </div>\n</script>\n<!--<div class=\"row custom-header\">-->\n<!--<div class=\"col-lg-12 col-md-12 col-sm-12 text-right\" style=\"margin-top:15px;\" ng-show=\"showNavigation\">-->\n<!--<span>{$ no_of_records $}</span> / {$ total_records $}<span></span>-->\n<!--<a style=\"text-decoration:none;\" ng-click=\"rc.navigatePage('prev')\" ng-class=\"no_of_records==1?'prevCursor':''\">< Previous</a>-->\n<!--<a style=\"margin-left:25px;text-decoration:none;\" ng-click=\"rc.navigatePage('next')\" ng-class=\"no_of_records==total_records?'nextCursor':''\">Next ></a>-->\n<!--</div>-->\n<!--</div>-->\n\n<div class=\"row custom-header\" style=\"padding-left:10px;\">\n    <div class=\"col-lg-3 col-md-3 col-sm-3 no-padding extraction-title-container review-breadcrumb\">\n        <!-- <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item \">\n                <a class=\"breadcrumb-heading\" ng-click=\"goToCaseDashboard()\">Documents List</a>\n            </li>\n            <li class=\"breadcrumb-item active\">\n                <div class=\"extraction-title\" title=\"{$ recordData.properties.filename $}\"><img src=\"./static/ref-app/app/images/cleanImage.png\"\n                        style=\"width:15px;\" />\n                    {$ recordData.properties.filename $}</div>\n            </li>\n        </ol> -->\n        <ol class=\"breadcrumb\">\n                <li>\n                    <a ui-sref=\"app.agentDashboard\">\n                            <span class=\"ext-title\">\n                                    Queues\n                                </span>\n                    </a> \n                    <span class=\"ext-title\" style=\"width: 10px;color:#555\"> > </span>\n                </li>\n                <li class=\"breadcrumb-item \">\n                    <a ng-click=\"goToCaseDashboard()\">\n                        <span class=\"ext-title\">\n                            {$ currentQueueName $}\n                        </span>\n                        <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                    </a>\n                </li>\n                <li class=\"breadcrumb-item \" ng-if=\"parentfilename\">\n                       \n                            <span class=\"ext-title\">\n                                {$ parentfilename $}\n                            </span>\n                            <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                       \n                    </li>\n                <li class=\"breadcrumb-item active\">\n                    <span class=\"ext-title\">\n                        {$ recordData.properties.filename $}</span>\n                    <span class=\"breadcrumbhover\">\n                        <img ng-if=\"recordData.properties.filename\" src=\"./static/ref-app/app/images/breadcrumb-1.png\" class=\"breadcrumbimg\" />\n                        <div id=\"breadcrumbdiv\" class=\"hoverbreadcrumb\">\n                            <ol class=\"breadcrumb\">\n                                <li>Queues</li>\n                                <li class=\"breadcrumb-item \">\n                                    {$ currentQueueName $}\n                                </li>\n                                <li class=\"breadcrumb-item\" ng-if=\"parentfilename\">\n                                    {$ parentfilename $}\n                                </li>\n                                <li class=\"breadcrumb-item active\">\n                                    <span class=\"ext-title\">\n                                        {$ recordData.properties.filename $}</span>\n                                </li>\n                            </ol>\n                        </div>\n                    </span>\n                </li>\n            </ol> \n    </div>\n\n    <div class=\"col-lg-9 col-md-9 col-sm-9 text-right\">\n        <div class=\"row\" style=\"display: flex;align-items: center;\">\n            <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-2 no-padding\">\n                <span class=\"scoresHeading\">Confidence Score:</span>\n                <span class=\"label-style\">{$ extractedData.data.document_confidence_score | number:2 $}%</span>\n            </div>\n            <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-2 no-padding text-center\">\n                <span class=\"scoresHeading\">Attributes Extracted:</span>\n                <span class=\"label-style\">{$extractedData.data.attributes_extracted $}</span>\n            </div>\n            <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"accepted\"></span>\n                    <span style=\"font-weight: 400;\">Accepted [{$ extractedData.data.accept_count $}]</span>\n                    <input type=\"checkbox\" ng-model=\"checkObj.accept\" ng-change=\"ec.changeIntaraction('accept',checkObj.accept)\">\n                    <span class=\"checkmark\"></span>\n                </label>\n            </div>\n            <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"corrected\"></span>\n                    <span style=\"font-weight: 400;\">Corrected [{$ extractedData.data.correct_count $}]</span>\n                    <input type=\"checkbox\" ng-model=\"checkObj.correct\" ng-change=\"ec.changeIntaraction('correct',checkObj.correct)\" />\n                    <span class=\"checkmark\"></span>\n                </label>\n\n            </div>\n            <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 no-padding\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"reviewed\"></span>\n                    <span style=\"font-weight: 400;\">Needs Review <span class=\"reviewValue\">[{$\n                            extractedData.data.need_review_count $}]</span></span>\n                    <input type=\"checkbox\" ng-model=\"checkObj.review\" ng-change=\"ec.changeIntaraction('review',checkObj.review)\" />\n                    <span class=\"checkmark\"></span>\n                </label>\n            </div>\n            <div class=\"col-lg-1 col-sm-1 col-md-1 col-xs-1 no-padding\" style=\"margin-top: 5px;\">\n                <select class=\"form-control headerSelectBox\" ng-model=\"rc.changedState\" ng-change=\"rc.saveStateChange()\"\n                    ng-hide=\"documentState=='reviewed'\" style=\"border: 1px solid #50b6e7;\">\n                    <option value=\"\">Move To </option>\n                    <option ng-repeat=\"(key,value) in reviewStatesList track by $index\" value=\"{$ value.doc_state $}\" ng-disabled=\"!value.active\">{$\n                        key $}</option>\n                </select>\n            </div>\n            <div class=\"col-lg-1 col-sm-1 col-md-1 col-xs-1\">\n                <button class=\"btn btn-custom btn-subheader\" ng-click=\"rc.completeReview()\" ng-hide=\"documentState=='reviewed'\">Done</button>\n\n            </div>\n        </div>\n    </div>\n\n    <!--key-->\n</div>\n\n<!--<div class=\"row retrainDiv\">-->\n<!--<div class=\"col-lg-6 col-sm-6 col-xs-12 col-md-6\">-->\n<!--<div class=\"btn-group\" ng-show=\"displayZoom\">-->\n<!--<button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"zoomOut()\"><i-->\n<!--class=\"fa fa-minus-circle\" aria-hidden=\"true\"></i></button>-->\n<!--<button type=\"button\" class=\"btn btn-default btn-zoom btn-magnifier\" ng-disabled=\"true\"><img src=\"/static/ref-app/app/images/zoomIcon.png\"-->\n<!--style=\"width: 18px;\"/>-->\n<!--</button>-->\n<!--<button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"zoomIn()\"><i class=\"fa fa-plus-circle\"-->\n<!--aria-hidden=\"true\"></i>-->\n<!--</button>-->\n<!--</div>-->\n<!--</div>-->\n<!--<div class=\"col-lg-3 col-sm-3 col-xs-12 col-md-3\" style=\"padding-left:0px\">-->\n<!--<label class=\"checkbox-inline\">-->\n<!--<input type=\"checkbox\" ng-model=\"getDemo\">Demo Mode-->\n<!--</label>-->\n<!--<button class=\"btn btn-info\" ng-click=\"retrainData()\" ng-show=\"getDemo\"> Retrain</button>-->\n<!--</div>-->\n<!--<div class=\"col-lg-3 col-sm-3 col-xs-12 col-md-3\"ng-click=\"download()\" style=\"cursor:pointer;\">-->\n<!--<div style=\"float:right\">-->\n<!--<img ng-src=\"/static/ref-app/app/images/download.png\" style=\"width:25px;\"/>-->\n<!--<span style=\"color:#1c7cb9;\">Download JSON</span>-->\n<!--</div>-->\n<!--</div>-->\n\n<!--</div>-->\n<div class=\"row row-eq-height\" ng-show=\"(rc.documentType != 'digital' && rc.documentType != 'email')\" style=\"height:{$ height $}px;overflow-y:auto;\">\n\n    <div class=\"col-sm-6 col-md-6 col-xs-12 col-lg-6 custom-rightPanel\" id=\"actual\">\n        <div class=\"row\" ng-if=\"showUnknown && recordData.doc_type!='excel'\">\n            <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 text-right\">\n                <div class=\"btn-group text-center\">\n                    <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"rc.zoomOut()\"><i class=\"fa fa-minus-circle\"\n                            aria-hidden=\"true\"></i></button>\n                    <button type=\"button\" class=\"btn btn-default btn-zoom btn-magnifier\" ng-disabled=\"true\"><img src=\"/static/ref-app/app/images/zoomIcon.png\"\n                            style=\"width: 18px;\" />\n                    </button>\n                    <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"rc.zoomIn()\"><i class=\"fa fa-plus-circle\"\n                            aria-hidden=\"true\"></i>\n                    </button>\n\n\n                </div>\n                <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"rc.disableSelector()\">\n                    Reset\n                </button>\n            </div>\n            <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 no-padding text-right\">\n                <div ng-if=\"showUnknown\" style=\"display: inline-block;\">\n                    <!--<div class=\"pagination\" ng-show=\"no_of_pages>1\">-->\n                    <!--<a ng-repeat=\"(key,value) in pagesInfo\" ng-click=\"rc.changeDocumentInfo(value.page_no)\" ng-class=\"current_page==value.page_no?'active':''\">{$ value.page_no $}</a>-->\n                    <!--</div>-->\n                    <div ng-show=\"no_of_pages>1\">\n                        <span>\n                            <button class=\"btn pagination-button\" ng-disabled=\"current_page==1\" ng-click=\"rc.changePageNumUnknown('prev')\"><i\n                                    class=\"fa fa-chevron-left\" style=\"color:white;font-size:12px;\"></i></button>\n                        </span>\n                        <span class=\"pagination-textBox\">\n                            <input type=\"number\" class=\"pagination-text\" ng-model=\"current_page\" ng-keyup=\"rc.keyEnterUnknown($event)\" />\n                        </span>\n                        <span>\n                            <button class=\"btn pagination-button\" ng-disabled=\"current_page==no_of_pages\" ng-click=\"rc.changePageNumUnknown('next')\"><i\n                                    class=\"fa fa-chevron-right\" style=\"color:white;font-size:12px;\"></i></button>\n                        </span>\n                        <span> of {$ no_of_pages $}</span>\n                    </div>\n                </div>\n                <div ng-if=\"showImage\" style=\"display: inline-block;\">\n                    <!--<div class=\"pagination\" ng-show=\"no_of_pages>1\">-->\n                    <!--<a ng-repeat=\"(key,value) in pagesInfo\" ng-click=\"rc.changeDocumentInfo(value.page_no)\" ng-class=\"current_page==value.page_no?'active':''\">{$ value.page_no $}</a>-->\n                    <!--</div>-->\n                    <div ng-show=\"no_of_pages>1\">\n                        <span>\n                            <button class=\"btn pagination-button\" ng-disabled=\"current_page==1\" ng-click=\"rc.changePageNum('prev')\"><i\n                                    class=\"fa fa-chevron-left\" style=\"color:white;font-size:12px;\"></i></button>\n                        </span>\n                        <span class=\"pagination-textBox\">\n                            <input type=\"number\" class=\"pagination-text\" ng-model=\"current_page\" ng-keyup=\"rc.keyEnter($event)\" />\n                        </span>\n                        <span>\n                            <button class=\"btn pagination-button\" ng-disabled=\"current_page==no_of_pages\" ng-click=\"rc.changePageNum('next')\"><i\n                                    class=\"fa fa-chevron-right\" style=\"color:white;font-size:12px;\"></i></button>\n                        </span>\n                        <span> of {$ no_of_pages $}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row pdf-extraction-new\" id=\"scrollImage\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12\">\n                <div class=\"toolbar\" style=\"display:none;\">\n                    <button class=\"cursor\" type=\"button\" title=\"Cursor\" data-tooltype=\"cursor\">➚</button>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"rectangle\" type=\"button\" title=\"Rectangle\" data-tooltype=\"area\">&nbsp;</button>\n                    <button class=\"highlight\" type=\"button\" title=\"Highlight\" data-tooltype=\"highlight\">&nbsp;</button>\n                    <button class=\"strikeout\" type=\"button\" title=\"Strikeout\" data-tooltype=\"strikeout\">&nbsp;</button>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"text\" type=\"button\" title=\"Text Tool\" data-tooltype=\"text\"></button>\n                    <select class=\"text-size\"></select>\n                    <div class=\"text-color\"></div>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"pen\" type=\"button\" title=\"Pen Tool\" data-tooltype=\"draw\">✎</button>\n                    <select class=\"pen-size\"></select>\n                    <div class=\"pen-color\"></div>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"comment\" type=\"button\" title=\"Comment\" data-tooltype=\"point\">🗨</button>\n\n                    <div class=\"spacer\"></div>\n\n                    <select class=\"scale\">\n                        <option value=\".17\">17%</option>\n                        <option value=\".25\">25%</option>\n                        <option value=\".33\">33%</option>\n                        <option value=\".5\">50%</option>\n                        <option value=\"1\">100%</option>\n                        <option value=\"1.33\">133%</option>\n                        <option value=\"1.5\">150%</option>\n                        <option value=\"2\">200%</option>\n                    </select>\n\n                    <a href=\"javascript://\" class=\"rotate-ccw\" title=\"Rotate Counter Clockwise\">⟲</a>\n                    <a href=\"javascript://\" class=\"rotate-cw\" title=\"Rotate Clockwise\">⟳</a>\n\n                    <div class=\"spacer\"></div>\n\n                    <a href=\"javascript://\" class=\"clear\" title=\"Clear\">×</a>\n                </div>\n                <div id=\"loadingpdf\" class=\"loadingdoc\">Please wait document is loading...\n                    <br />\n                    <center><i class=\"fa fa-cog fa-spin fa-2x fa-fw margin-bottom\"></i></center>\n                </div>\n                <div id=\"content-wrapper\" style=\"height:{$ pdfHeight $}px;overflow-y:scroll;\">\n                    <div id=\"viewer\" class=\"pdfViewer\"></div>\n                </div>\n                <div id=\"comment-wrapper\" style=\"display:none;\">\n                    <h4>Comments</h4>\n                    <div class=\"comment-list\">\n                        <div class=\"comment-list-container\">\n                            <div class=\"comment-list-item\">No comments</div>\n                        </div>\n                        <form class=\"comment-list-form\" style=\"display:none;\">\n                            <input type=\"text\" placeholder=\"Add a Comment\" />\n                        </form>\n                    </div>\n                </div>\n                <div id=\"annotationdiv\" class=\"annotation-wrapper\">\n\n                </div>\n            </div>\n            <div class=\"col-lg-12 col-md-12 col-sm-12\" ng-if=\"recordData.doc_type=='excel'\">\n                <div ng-bind-html=\"rc.renderHTMLData()\"></div>\n\n                <div class=\"row\" ng-if=\"recordData.doc_type=='excel'\">\n                    <div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12 excel-footer\" style=\"background-color:aliceblue;text-align:left;\">\n                        <div class=\"btn-group\" role=\"group\">\n                            <button type=\"button\" class=\"btn btn-sheet excel-btn\" ng-class=\"excelBtnArr[$index]\" style=\"\n            border-right: 1px solid black;\"\n                                ng-repeat=\"data in  pagesInfo track by $index\" ng-click=\"getSheetData($index)\">Sheet {$ $index+1 $}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n    <div class=\"col-sm-6 col-md-6 col-xs-12 col-lg-6\" ng-if=\"showImage\">\n        <ul class=\"nav nav-tabs nav-reviewTabs\">\n            <li class=\"active\"><a data-toggle=\"tab\" href=\".elements\">Elements</a></li>\n            <li><a data-toggle=\"tab\" href=\".outcomes\">Domain Objects</a></li>\n        </ul>\n        <div class=\"image-style1\" id=\"scrollDiv\" style=\"height:{$ elementHeight $}px;overflow-y:scroll;background-color:white;\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane in active elements\" style=\"position: relative;border:1px solid #eee;\">\n                    <div class=\"panel-group\" style=\"padding:10px;\" id=\"accordionGroupData\" role=\"tablist\"\n                        aria-multiselectable=\"true\">\n                        <div class=\"panel panel-default\" ng-repeat=\"(groupName,groupValue) in listOfData track by $index\">\n                            <div class=\"panel-heading\" role=\"tab\">\n                                <h4 class=\"panel-title\">\n                                    <a class=\"collapsed\" role=\"button\" data-toggle=\"collapse\" data-parent=\"#accordionGroupData\"\n                                        href=\".group{$ groupName $}\" aria-expanded=\"false\" aria-controls=\"group{$ groupName $}\">\n                                        {$ groupName $}\n                                    </a>\n                                </h4>\n                            </div>\n                            <div class=\"panel-collapse collapse group{$ groupName $}\" role=\"tabpanel\" aria-labelledby=\"group{$ groupName $}\"\n                                ng-class=\"$index==0?'in':''\">\n                                <div ng-repeat=\"list in groupValue track by $index\">\n\n                                    <div ng-if=\"list.type=='field' ||  list.type=='paragraph' || list.type=='omr'\"\n                                        ng-show=\"list.score<=$root.slider.value\" style=\"border-bottom:1px solid #e0e0e0;\"\n                                        tabindex=\"0\" class=\"row {$ rowHighlight[list.groupName+''+$index] $} review-row \"\n                                        id=\"inner{$ groupName $}{$ $index $}\" ng-click=\"rowClick($index,list.drawerIndex,groupName)\"\n                                        ng-focus=\"rowClick($index,list.drawerIndex,groupName)\">\n                                        <div class=\"col-lg-7 col-md-7 col-sm-7 sub-row\">\n                                            <div class=\"head row-style\" ng-class=\"list.rule_status?'':'ruleValidation'\">\n                                                <span>{$ getAttributeName(list.domain_mapping) $}</span>\n\n                                            </div>\n                                            <div class=\"small-font row-style\" ng-hide=\"list.is_accept || list.is_update\">Processed\n                                                Result\n                                                ({$list.score | number:2$}%)\n                                            </div>\n                                            <div class=\"small-font row-style\" ng-show=\"list.is_accept\">Final Value\n                                                (Accepted)\n                                            </div>\n                                            <div class=\"small-font row-style\" ng-show=\"list.is_update\">Final Value\n                                                (Corrected)\n                                            </div>\n                                            <div class=\"row-style valueStyle\" ng-show=\"!hideObj.isEdit[$index]\" ng-if=\"list.type=='field' ||  list.type=='paragraph' \">\n                                                <span>{$ list.text $}</span>\n                                                <i class=\"fa fa-exclamation-triangle\" style=\"color:red\" ng-show=\"!list.rule_status\"\n                                                    title=\"{$ list.rule_validate_msg $}\"></i>\n\n                                            </div>\n                                            <div ng-if=\"list.type=='omr'\">\n                                                <ul>\n                                                    <li ng-repeat=\"options in list.groups[0].options track by $index\" ng-if=\"options.ischecked\">{$\n                                                        options.label $}\n                                                    </li>\n                                                </ul>\n                                            </div>\n\n                                            <div ng-show=\"hideObj.isEdit[$index]\">\n\n                                                <input type=\"text\" ng-model=\"editVal[$index]\" class=\"form-control\"\n                                                    autofocus ng-show=\"parentVal[$index].length<=30\">\n                                                <textarea ng-model=\"editVal[$index]\" class=\"form-control\" rows=\"4\" cols=\"50\"\n                                                    autofocus ng-show=\"parentVal[$index].length>30\"></textarea>\n                                                <span class=\"error\" ng-show=\"showEditText[$index]\">{$ showEditMsg $}</span>\n\n                                            </div>\n                                        </div>\n                                        <div class=\"col-lg-5 col-md-5 col-sm-5 sub-row\">\n                                            <span ng-show=\"list.score<$root.slider.value\">\n                                                <!--<span ng-init=\"val[$index] = cpc.displayIndex\"></span>-->\n                                            </span>\n\n                                            <div class=\"text-right row-style\" ng-class=\"getSomeValue($index,list.score,$root.slider.value)\"></div>\n                                            <!--<span ng-init=\"cpc.displayIndex = cpc.displayIndex+1\">{$ cpc.displayIndex $}</span>-->\n                                            <div class=\"custom-actions\" ng-show=\"!hideObj.isEdit[$index]\">\n                                                <button class=\"btn btn-default btn-sm bnt-cst-process\" title=\"Edit\"\n                                                    ng-show=\"list.is_changed\" ng-click=\"hideObj.isEdit[$index]=true;editVal[$index]=list.text;parentVal[$index]=list.text;\">\n                                                    <i class=\"fa fa-pencil\"></i>\n                                                </button>\n                                                <button class=\"btn btn-default btn-sm bnt-cst-process\" title=\"Accept\"\n                                                    ng-show=\"list.is_corrected\" ng-click=\"isAccept($index,list.text,list);$event.stopPropagation()\">\n                                                    <i class=\"fa fa-check\"></i>\n                                                </button>\n                                            </div>\n                                            <div class=\"custom-saveAction\" ng-show=\"hideObj.isEdit[$index]\">\n                                                <button class=\"btn btn-default btn-sm bnt-cst-process\" ng-click=\"isEditData($index,editVal[$index],list);$event.stopPropagation()\">\n                                                    Save\n                                                </button>\n                                                <button class=\"btn btn-default btn-sm bnt-cst-process\" ng-click=\"hideObj.isEdit[$index]=false;editVal[$index]='';showEditMsg='';clearEdit();$event.stopPropagation()\">\n                                                    <i class=\"fa fa-times\"></i>\n                                                </button>\n                                            </div>\n                                        </div>\n\n                                        <div ng-show=\"list.is_nlp\" class=\"row\">\n                                            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                                <h5>Intent Recommendations</h5>\n                                                <div data-ng-repeat=\"intent in list.nlp track by $index\" style=\"border: 1px solid #22a2d3;margin-bottom: 20px;\">\n                                                    <div class=\"row\" style=\"background-color:white;padding:10px 0px 10px 0px;    margin-bottom: 10px;\">\n                                                        <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\">\n                                                            <span class=\"valueStyle\">{$ intent.action $}</span>\n                                                            <!--<span class=\"nlpSummary\"><i class=\"fa fa-pencil\"></i></span>-->\n                                                        </div>\n                                                        <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\">\n                                                            <span class=\"valueStyle\">{$ intent.entity $}</span>\n                                                            <!--<span class=\"nlpSummary\"><i class=\"fa fa-pencil\"></i></span>-->\n                                                        </div>\n                                                    </div>\n\n                                                    <table class=\"table table-responsive table-scroll table-font\" style=\"margin-bottom:0px !important;\">\n                                                        <thead>\n                                                            <th>Action</th>\n                                                            <th>Attribute</th>\n                                                            <th>Value</th>\n                                                        </thead>\n                                                        <tbody>\n                                                            <tr ng-repeat=\"attributes in intent.attributes track by $index\">\n                                                                <td>{$ attributes.action $}</td>\n                                                                <td>{$ attributes.attribute $}</td>\n                                                                <td>{$ attributes.value $}</td>\n                                                            </tr>\n\n                                                        </tbody>\n                                                    </table>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div ng-if=\"list.type=='table'\">\n\n                                        <div class=\"panel-group\" id=\"TableAccordion\" role=\"tablist\"\n                                            aria-multiselectable=\"true\" style=\"padding:15px;\">\n                                            <div class=\"panel panel-default\" ng-repeat=\"rowList in list.tables.table track by $index\">\n\n                                                <div class=\"panel-heading table-panelHeading\" role=\"tab\" id=\"showRow{$ $index $}\">\n                                                    <h4 class=\"panel-title\">\n                                                        <a role=\"button\" data-toggle=\"collapse\" data-parent=\"#TableAccordion\"\n                                                            href=\".showRow{$ $index $}\" aria-expanded=\"true\"\n                                                            aria-controls=\"showRow{$ $index $}\">\n                                                            Row {$ $index+1 $}\n                                                        </a>\n                                                    </h4>\n                                                </div>\n                                                <div class=\"panel-collapse collapse showRow{$ $index $}\" role=\"tabpanel\"\n                                                    aria-labelledby=\"showRow{$ $index $}\">\n                                                    <div class=\"panel-body\">\n\n                                                        <div ng-repeat=\"(key,tableData) in rowList track by $index\" ng-show=\"tableData.score<=$root.slider.value\"\n                                                            tabindex=\"0\" class=\"row {$ rowHighlightTable[tableData.groupName+''+tableData.indexObj.parentIndex+''+tableData.indexObj.childIndex+''+tableData.indexObj.superChildIndex] $} review-row \"\n                                                            id=\"innerData{$ tableData.groupName $}{$ tableData.indexObj.parentIndex $}{$ tableData.indexObj.childIndex $}{$ tableData.indexObj.superChildIndex $}\"\n                                                            ng-click=\"rowTableClick(tableData,tableData.drawerIndex,tableData.groupName)\"\n                                                            style=\"border-bottom:1px solid #e0e0e0;\">\n                                                            <div class=\"col-lg-7 col-md-7 col-sm-7 sub-row\">\n                                                                <div class=\"head row-style\" ng-class=\"tableData.rule_status?'':'ruleValidation'\">\n                                                                    <span> {$\n                                                                        getAttributeName(tableData.domain_mapping) $}</span>\n\n                                                                </div>\n                                                                <div class=\"small-font row-style\" ng-hide=\"tableData.is_accept || tableData.is_update\">\n                                                                    Processed Result ({$ tableData.score | number:2$}%)\n                                                                </div>\n                                                                <div class=\"small-font row-style\" ng-show=\"tableData.is_accept\">Final\n                                                                    Value\n                                                                    (Accepted)\n                                                                </div>\n                                                                <div class=\"small-font row-style\" ng-show=\"tableData.is_update\">Final\n                                                                    Value\n                                                                    (Corrected)\n                                                                </div>\n                                                                <div class=\"row-style valueStyle\" ng-class=\"checkVal(tableData.label,tableData.text)\"\n                                                                    ng-show=\"!hideObj.isEdit[$index]\">\n                                                                    <span> {$ tableData.text $}</span>\n                                                                    <i class=\"fa fa-exclamation-triangle\" style=\"color:red\"\n                                                                        title=\"{$ tableData.rule_validate_msg $}\"\n                                                                        ng-show=\"!tableData.rule_status\"></i>\n\n                                                                </div>\n                                                                <div ng-show=\"hideObj.isEdit[$index]\">\n\n                                                                    <input type=\"text\" ng-model=\"editVal[$index]\" class=\"form-control\"\n                                                                        autofocus ng-show=\"parentVal[$index].length<=30\">\n                                                                    <textarea ng-model=\"editVal[$index]\" class=\"form-control\"\n                                                                        rows=\"4\" cols=\"50\" autofocus ng-show=\"parentVal[$index].length>30\"></textarea>\n                                                                    <span class=\"error\" ng-show=\"showEditText[$index]\">{$\n                                                                        showEditMsg $}</span>\n\n                                                                </div>\n                                                            </div>\n                                                            <div class=\"col-lg-5 col-md-5 col-sm-5 sub-row\">\n                                                                <span ng-show=\"tableData.score<$root.slider.value\">\n                                                                    <!--<span ng-init=\"val[$index] = cpc.displayIndex\"></span>-->\n                                                                </span>\n\n                                                                <div class=\"text-right row-style\" ng-class=\"getSomeValue($index,tableData.score,$root.slider.value)\"></div>\n                                                                <!--<span ng-init=\"cpc.displayIndex = cpc.displayIndex+1\">{$ cpc.displayIndex $}</span>-->\n                                                                <div class=\"custom-actions\" ng-show=\"!hideObj.isEdit[$index]\">\n                                                                    <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                        title=\"Edit\" ng-show=\"tableData.is_changed\"\n                                                                        ng-click=\"hideObj.isEdit[$index]=true;editVal[$index]=tableData.text;parentVal[$index]=tableData.text;\">\n                                                                        <i class=\"fa fa-pencil\"></i>\n                                                                    </button>\n                                                                    <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                        title=\"Accept\" ng-show=\"tableData.is_corrected\"\n                                                                        ng-click=\"isAccept($index,tableData.text,tableData);$event.stopPropagation()\">\n                                                                        <i class=\"fa fa-check\"></i>\n                                                                    </button>\n                                                                </div>\n                                                                <div class=\"custom-saveAction\" ng-show=\"hideObj.isEdit[$index]\">\n                                                                    <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                        ng-click=\"isEditData($index,editVal[$index],tableData);$event.stopPropagation()\">\n                                                                        Save\n                                                                    </button>\n                                                                    <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                        ng-click=\"hideObj.isEdit[$index]=false;editVal[$index]='';showEditMsg='';clearEdit();$event.stopPropagation()\">\n                                                                        <i class=\"fa fa-times\"></i>\n                                                                    </button>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row completeReview\">\n                        <button class=\"btn btn-custom btn-block\" ng-click=\"completeReview()\" ng-hide=\"documentState=='reviewed'\">\n                            Complete Review\n                        </button>\n                        <br>\n                        <div class=\"row\">\n                            <div class=\"col-lg-6 col-sm-6 col-md-6\">\n                                <span class=\"head\">{$ fieldAccept $}</span>\n                                <span>Fields Accepted</span>\n                            </div>\n                            <div class=\"col-lg-6 col-sm-6 col-md-6\">\n                                <span class=\"head\">{$ fieldUpdate $}</span>\n                                <span>Fields Corrected</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"tab-pane outcomes\">\n                    <div class=\"card\" style=\"min-height: 380px;padding: 18px;margin-bottom: 0;\" ng-if=\"showDomainTab\">\n                        <json-formatter class=\"jsonformatter\" open=\"4\" json=\"entitiesData\"></json-formatter>\n                    </div>\n                    <div ng-if=\"!showDomainTab\">\n                        <div class=\"alert alert-danger\">\n                            <span>{$ entitiesData.message $}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <br>\n        </div>\n    </div>\n\n    <div class=\"col-sm-6 col-md-6 col-lg-6 col-xs-12 image-style domainHierarchyDiv\" ng-if=\"showUnknown\" id=\"scrollDiv2\"\n        style=\"position:relative;background: #f3f2f2;overflow-y:auto;\">\n\n        <script type=\"text/ng-template\" id=\"nodes_renderer2.html\">\n\n                              <div ui-tree-handle class=\"tree-node tree-node-content mainNode\" data-nodrag  style=\"padding:0px;\" >\n                                    <div ng-if=\"node.type=='attribute'\" class=\"customTree\">\n\n\n                                            <div ng-repeat=\"nodeAttribute in node.attributes track by $index\"   class=\"tree-node tree-node-content \"\n                                                 style=\"border-bottom:1px solid #d2d2d2;\" ng-hide=\"nodeAttribute.is_delete\">\n\n                                                 <div class=\"row row-eq-height actionView\">\n                                                      <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-2 no-padding\">\n                                                            <span class=\"pull-left name-ellipsis\" title=\"{$ nodeAttribute.name $}\">{$ nodeAttribute.name $}</span>\n                                                      </div>\n                                                      <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 no-padding\" style=\"padding:0px;border-left:1px solid #d2d2d2;\">\n                                                          <div class=\"row\">\n                                                              <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\"  ng-repeat=\"value in nodeAttribute.values track by $index\" ng-click=\"rc.getCurrentValue(value)\" ng-class=\"nodeAttribute.values.length >2 ? 'bottomPadding':''\" ng-hide=\"rc.hideElement(value)\">\n                                                                  <div class=\"show-image\">\n                                                                     <!--<div class=\"hover-div\">-->\n                                                                         <!--<div class=\"row\">-->\n                                                                             <!--<div class=\"col-lg-4 col-md-4 col-sm-4 no-padding\">-->\n                                                                                    <!--<span ng-click=\"rc.getEXtractedValue(value);$event.stopPropagation();\">-->\n                                                                                        <!--<img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>-->\n                                                                                    <!--</span>-->\n                                                                             <!--</div>-->\n                                                                             <!--&lt;!&ndash;<div class=\"col-lg-4 col-md-4 col-ms-4 no-padding\">&ndash;&gt;-->\n                                                                                    <!--&lt;!&ndash;<span>&ndash;&gt;-->\n                                                                                        <!--&lt;!&ndash;<img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[value.temp_id]\" class=\"editImagesWidth\" ng-click=\"rc.editCoordinates(value);$event.stopPropagation();\"/>&ndash;&gt;-->\n                                                                                        <!--&lt;!&ndash;<img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[value.temp_id]\" ng-click=\"rc.acceptCoordinates(value);$event.stopPropagation();\"/>&ndash;&gt;-->\n                                                                                    <!--&lt;!&ndash;</span>&ndash;&gt;-->\n\n                                                                             <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                                                             <!--&lt;!&ndash;<div class=\"col-lg-4 col-md-4 col-ms-4  no-padding\">&ndash;&gt;-->\n                                                                                    <!--&lt;!&ndash;<span>&ndash;&gt;-->\n                                                                                        <!--&lt;!&ndash;<img src=\"/static/ref-app/app/images/trash.png\" class=\"editImagesWidth\" style=\"width:12px;\" ng-click=\"rc.deleteValue(value);$event.stopPropagation();\"/>&ndash;&gt;-->\n                                                                                    <!--&lt;!&ndash;</span>&ndash;&gt;-->\n\n                                                                             <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                                                         <!--</div>-->\n                                                                     <!--</div>-->\n                                                                     <span class=\"cst-textBox ng-binding {$ rowHighlight[value.temp_id] $} {$ value.temp_id $}\" title=\"{$ value.value $}\"> {$ value.value $}</span>\n                                                                    <!-- <input type=\"text\" class=\"form-control cst-textBox {$ rowHighlightAttr[value.temp_id] $}\" placeholder=\"Value\" ng-model=\"value.value\" ng-blur=\"rc.saveAttributeEdit(value,nodeAttribute,node)\" disabled/> -->\n                                                                    <img ng-if=\"rc.isRuleExist(value)\" class=\"exclamation-img\" title=\"{$ value.rules.validation_message $}\" ng-src=\"./static/ref-app/app/images/exclamation.png\"> \n                                                                   <span ng-class=\"fieldCriteria(value)\"  style=\"width:17%;\">{$ value.score | number:0 $}%</span>\n                                                                   <div ng-show=\"showExtractedValue\">\n                                                                     <img ng-src=\"./static/ref-app/app/images/extracted.png\" style=\"width: 11px;margin: -2px 2px 0px 1px;\" >\n                                                                     <span class=\"extracted-ellipsis\" title=\"{$ value.extracted_value $}\"> {$ value.extracted_value $}\n                                                                     </span>\n                                                                   </div>\n                                                                </div>\n                                                              </div>\n                                                          </div>\n                                                      </div>\n                                                      <!--<div class=\"col-lg-2 col-sm-2 col-xs-2 col-md-2 no-padding\">-->\n                                                          <!--<div class=\"viewActions\">-->\n                                                              <!--<img class=\"imageWidth\" src=\"/static/ref-app/app/images/test.png\"/>-->\n                                                              <!--<img class=\"imageWidth\" src=\"/static/ref-app/app/images/dictionarys.png\"/>-->\n                                                              <!--<img class=\"imageWidth\" src=\"/static/ref-app/app/images/deleteFilled.png\" style=\"width:12px;\" ng-click=\"rc.deleteAttribute(nodeAttribute,node);$event.stopPropagation();\"/>-->\n                                                          <!--</div>-->\n                                                      <!--</div>-->\n                                                 </div>\n\n\n                                                <div class=\"row\" ng-if=\"node.nlp != undefined\" style=\"margin-top:10px;\">\n                                                      <div class=\"col-sm-12 col-md-12 col-xs-12 col-lg-12\">\n                                                          <div class=\"table-responsive\">\n                                                              <table class=\"table table-bordered\">\n                                                                  <thead>\n                                                                    <tr>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Action</span></td>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Attribute</span></td>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Value</span></td>\n                                                                    </tr>\n                                                                  </thead>\n                                                                  <tbody>\n                                                                    <tr ng-repeat=\"data in node.nlp[0].attributes track by $index\">\n                                                                        <td>{$ data.action $}</td>\n                                                                        <td>{$ data.attribute $}</td>\n                                                                        <td>{$ data.value $}</td>\n                                                                    </tr>\n                                                                  </tbody>\n                                                              </table>\n                                                          </div>\n                                                      </div>\n                                                  </div>\n                                            </div>\n                                            <div class=\"row row-eq-height ng-scope\" style=\"margin: 5px 0px 10px 0px;\" ng-show=\"listOfNewAttributes[node.insight_id]\">\n                                                        <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 no-padding\" style=\"border-right:1px solid #d2d2d2;\">\n                                                            <div class=\"dropdown\">\n                                                                    <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                                    data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"rc.showAttributesForNew(this)\">\n                                                                        <span class=\"pull-left name-ellipsis\" style=\"width: 80%;\">{$ listOfNewAttributesObjs[node.insight_id].attributeName $}</span>\n                                                                        <span class=\"caret filter-caret\"></span>\n                                                                    </button>\n                                                                    <ul class=\"dropdown-menu width220\">\n                                                                         <li class=\"search-li\">\n                                                                            <input type=\"text\" class=\"more-input-search\" placeholder=\"Search\" ng-model=\"listOfNewAttributesObjs[node.insight_id].search\">\n                                                                             <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                         </li>\n\n                                                                        <li ng-repeat=\"attr in rc.respectedAttributes | filter:listOfNewAttributesObjs[node.insight_id].search track by $index \" class=\"disableDropDown\" ng-disabled=\"attr===nodeAttribute.name\" ng-click=\"rc.selectedAttributeForNew(attr,node)\">\n                                                                          <span class=\"liItem\">{$ attr $}</span>\n                                                                        </li>\n\n                                                                    </ul>\n                                                           </div>\n                                                        </div>\n                                                        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                                             <input class=\"form-control cst-textBox\" type=\"text\" placeholder=\"Type the Value\" ng-model=\"listOfNewAttributesObjs[node.insight_id].attributeValue\">\n                                                        </div>\n                                                        <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                                    <button class=\"btn btn-custom select-button\" title=\"Click on the highlighted portion of the image where this new text for the attribute belongs\" ng-click=\"rc.selectedElement()\">Select Element</button>\n                                                                </div>\n                                                        <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 text-right\">\n                                                            <div class=\"img-edit cancel\" title=\"Cancel\" ng-click=\"rc.cancelNewAttribute(node)\"></div>\n                                                                <div class=\"customSave ng-scope\" title=\"Save\" ng-click=\"rc.saveNewNodeAttribute(node,this)\">\n                                                                    <i class=\"fa fa-floppy-o\" style=\"font-size:18px;\"></i>\n                                                                </div>\n                                                        </div>\n                                                     <span ng-show=\"croppingError\" style=\"color:red\" class=\"ng-binding ng-hide\"></span>\n                                            </div>\n                                    </div>\n                                    <div ng-if=\"node.type=='grouped_entity' || node.type=='entity'\">\n\n                                        <div ui-tree-handle class=\"tree-node tree-node-content\"\n                                        data-nodrag ng-include=\"'nodes_renderer1.html'\" style=\"padding:0px;\">\n\n                                        </div>\n                                    </div>\n                                 </div>\n                              </div>\n                        </script>\n        <script type=\"text/ng-template\" id=\"nodes_renderer1.html\">\n                              <div ui-tree-handle class=\"tree-node tree-node-content childNode\"\n                                   data-nodrag ng-class=\"node.type=='domain' ? 'domainBg' : ''\">\n                                    <a ng-if=\"((node.attributes && node.attributes.length > 0) || (node.groups && node.groups.length > 0))\" data-nodrag data-toggle=\"collapse\" data-target=\".{$ node.temp_id $}\" class=\"nodetoggle\" ng-click=\"chnageIcon(rc.collapsed,node.temp_id)\">\n                                        <i  ng-class=\"{'fa fa-minus-circle': !rc.collapsed[node.temp_id],'fa fa-plus-circle': rc.collapsed[node.temp_id]}\" style=\"padding-right:5px;\"></i>\n                                    </a>\n                                  <label ng-if=\"node.type=='grouped_entity' || node.type=='entity'\" style=\"padding-top:5px;margin-bottom:5px;\" class=\"treeFont\">\n                                        {$ node.name $}\n                                  </label>\n                                  <label ng-if=\"node.type=='domain'\" style=\"padding-top:5px;margin-bottom:5px;color:white;\">\n                                            {$ node.name $}\n                                  </label>\n                                    <!--<a class=\"pull-right treeFont\"  ng-click=\"rc.deleteEntity(node)\" style=\"padding:4px;\" ng-hide=\"node.type=='domain'\" ng-class=\"node.type=='domain' ? '' : 'smallAdd'\">-->\n                                        <!--<span class=\"fa fa-trash\" style=\"font-size: 10px;\"></span> Delete Entity-->\n                                    <!--</a>-->\n                                    <!--<a class=\"pull-right treeFont\"  ng-click=\"rc.addNewAttribute(node)\" style=\"padding:4px;\" ng-hide=\"node.type=='domain'\" ng-class=\"node.type=='domain' ? '' : 'smallAdd'\">-->\n                                        <!--<span class=\"fa fa-plus\" style=\"font-size: 10px;\"></span> Add Attribute-->\n                                    <!--</a>-->\n                                    <!--<a class=\"pull-right treeFont\"  ng-click=\"rc.addNewEntity(node)\" style=\"padding:4px;\" ng-show=\"node.type=='domain'\" ng-class=\"node.type=='domain' ? '' : 'smallAdd'\">-->\n                                        <!--<span class=\"fa fa-plus\"  style=\"font-size: 10px;\"></span> Add Entity-->\n                                    <!--</a>-->\n\n\n                                        <!--<i class=\"fa fa-trash pull-right\" style=\"font-size: 16px;padding: 10px;\"></i>-->\n                                        <!--<i class=\"fa fa-pencil pull-right\" style=\"font-size: 16px;padding: 10px;\"></i>-->\n                              </div>\n\n                              <ol ng-if=\"node.type=='domain'\" ui-tree-nodes=\"\" ng-model=\"node.attributes\" class=\"listedStyle collapse in olStyle1 {$ node.temp_id $}\" >\n                                    <li style=\"margin-bottom:10px;background-color:white;padding-bottom:5px;\" ng-show=\"displayNewEntity\">\n                                      <div class=\"childNode\" style=\"padding: 5px 0px 5px 10px;\">Entity</div>\n                                      <div class=\"row row-eq-height ng-scope\" style=\"margin: 5px 0px 10px 0px;\">\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                <div class=\"dropdown\">\n                                                        <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                        data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"rc.showNewEntities(node)\">\n                                                            <span class=\"pull-left\" style=\"width: 80%;\">{$ newEntityObj.name $}</span>\n                                                            <span class=\"caret filter-caret\"></span>\n                                                        </button>\n                                                        <ul class=\"dropdown-menu width220\">\n                                                                     <li class=\"search-li\">\n                                                                        <input type=\"text\" class=\"more-input-search\" ng-model=\"moreSearch\" placeholder=\"Search\">\n                                                                         <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                     </li>\n\n                                                                    <li ng-repeat=\"attr in rc.respectedEntities | filter:moreSearch track by $index \" class=\"disableDropDown\" ng-disabled=\"attr===node.name\" ng-click=\"rc.selectedNewEntityAttribute(attr,node)\">\n                                                                      <span class=\"liItem\">{$ attr $}</span>\n                                                                    </li>\n\n                                                        </ul>\n                                               </div>\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3 text-right\">\n                                                <div class=\"img-edit cancel\" title=\"Cancel\" ng-click=\"rc.cancelNewEntity()\"></div>\n                                                <div class=\"customSave\" title=\"Save\" ng-click=\"rc.saveNewEntity()\">\n                                                    <i class=\"fa fa-chevron-circle-right\" aria-hidden=\"true\" style=\"font-size: 18px;\"></i>\n                                                </div>\n                                            </div><!-- end ngIf: !attrEditShow -->\n                                     </div>\n                                      <div class=\"row row-eq-height ng-scope\" style=\"margin: 5px 0px 10px 0px;\" ng-show=\"displayNewAttribute\">\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                <div class=\"dropdown\">\n                                                        <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                        data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"rc.showAttributes(newEntityObj)\">\n                                                            <span class=\"pull-left\" style=\"width: 80%;\">{$ rc.attributeKey $}</span>\n                                                            <span class=\"caret filter-caret\"></span>\n                                                        </button>\n                                                        <ul class=\"dropdown-menu width220\">\n                                                                     <li class=\"search-li\">\n                                                                        <input type=\"text\" class=\"more-input-search\" ng-model=\"moreSearch\" placeholder=\"Search\">\n                                                                         <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                     </li>\n\n                                                                    <li ng-repeat=\"attr in rc.respectedAttributes | filter:moreSearch track by $index \" class=\"disableDropDown\"  ng-click=\"rc.selectedNewEntityAttributeValue(attr)\">\n                                                                      <span class=\"liItem\">{$ attr $}</span>\n                                                                    </li>\n\n                                                        </ul>\n                                               </div>\n                                            </div>\n                                            <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                                  <input class=\"form-control cst-textBox\" type=\"text\" placeholder=\"Type the Value\" ng-model=\"rc.attributeValue\">\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                        <button class=\"btn btn-custom select-button\" title=\"Click on the highlighted portion of the image where this new text for the attribute belongs\" ng-click=\"rc.selectedElement()\">Select Element</button>\n                                                    </div>\n                                            <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 text-right\">\n                                                <!--<div class=\"img-edit cancel\" title=\"Cancel\"></div>-->\n                                                <div class=\"customSave ng-scope\" title=\"Save\" ng-click=\"rc.saveNewEntityWithAttribute(node)\">\n                                                    <i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i>\n                                                </div>\n                                            </div>\n                                         <span ng-show=\"croppingError\" style=\"color:red\" class=\"ng-binding ng-hide\"></span>\n                                     </div>\n                                  </li>\n                                  <li ng-repeat=\"node in node.attributes track by $index\"  ui-tree-node ng-include=\"'nodes_renderer2.html'\" style=\"margin-bottom:5px;\" ng-hide=\"node.is_delete\"></li>\n                              </ol>\n                              <ol ng-if=\"node.type=='grouped_entity'\" ui-tree-nodes=\"\" ng-model=\"node.groups\" class=\"listedStyle collapse in olStyle1 {$ node.temp_id $}\" >\n\n                                  <li ng-repeat=\"node in node.groups track by $index\"  ui-tree-node ng-include=\"'nodes_renderer2.html'\" style=\"margin-bottom:5px;background-color:white;\"></li>\n                              </ol>\n                              <ol ng-if=\"node.type=='entity'\" ui-tree-nodes=\"\" ng-model=\"node.attributes\" class=\"listedStyle collapse in olStyle1 {$ node.temp_id $}\" >\n                                  <li ng-repeat=\"node in node.attributes track by $index\"  ui-tree-node ng-include=\"'nodes_renderer2.html'\" style=\"margin-bottom:5px;\" ng-hide=\"node.is_delete\"></li>\n                              </ol>\n\n                        </script>\n        <div class=\"domainObjectBody\">\n\n            <div class=\"row row-eq-height\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 no-padding\">\n                    <div class=\"row\">\n                        <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">\n                            <label class=\"custom-checkbox\">\n                                <img ng-src=\"./static/ref-app/app/images/extracted.png\" style=\"width: 11px;margin: -2px 2px 0px 1px;\">\n                                <span style=\"font-weight: 400;\">Show Extracted Values</span>\n                                <input type=\"checkbox\" ng-model=\"showExtractedValue\">\n                                <span class=\"checkmark\"></span>\n                            </label>\n                        </div>\n                        <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\">\n                            <div style=\"float:right;cursor:pointer;\" ng-click=\"download()\">\n                                <img ng-src=\"./static/ref-app/app/images/download.png\" style=\"width:15px;\" src=\"/static/ref-app/static/ref-app/app/images/download.png\">\n                                <span style=\"color:#1c7cb9;font-size: 10px;\">Download JSON</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div ui-tree id=\"tree-root1\" data-empty-placeholder-enabled=\"false\">\n                        <ol ui-tree-nodes class=\"olStyle\" ng-model=\"extractOutput\">\n                            <li ng-repeat=\"node in extractOutput track by $index\" class=\"treeDomainObject\" collapsed=\"true\"\n                                ng-class=\"{disabledStyle: isDisabled}\" ui-tree-node ng-include=\"'nodes_renderer1.html'\"></li>\n                        </ol>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!--<div class=\"btn  btn-custom btn-block \" ng-click=\"rc.completeReview()\" ng-hide=\"documentState=='reviewed'\">-->\n        <!--Complete review-->\n        <!--</div>-->\n\n    </div>\n</div>\n</div>\n\n<div class=\"row borderEmail\" ng-if=\"rc.documentType == 'digital'\">\n    <div class=\"col-sm-7 col-md-7 col-xs-7 col-lg-7 dashboard-row\">\n        <div class=\"row image-style\" style=\"height:{$ height $}px\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12\" style=\"padding:5px;\">\n                <div id=\"ImageLocation1\">\n                    <ul class=\"nav nav-tabs custom-navTab\">\n                        <li class=\"active\"><a data-toggle=\"tab\" href=\".processed\">Processed</a></li>\n                        <li><a data-toggle=\"tab\" href=\".original\">Original</a></li>\n                    </ul>\n\n                    <div class=\"tab-content\" style=\"background:white\">\n                        <div class=\"tab-pane fade in active processed\">\n                            <!--<table class=\"table table-striped\">-->\n                            <!--<tbody class=\"emailTable\">-->\n                            <!--<tr>-->\n                            <!--<td>From</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ rc.emailDocumentData.attributes.header.from $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Sent</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ rc.emailDocumentData.attributes.header.sent $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>To</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ rc.emailDocumentData.attributes.header.to $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Subject</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ rc.emailDocumentData.attributes.header.subject $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Email Body</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>-->\n                            <!--<div ng-bind-html=\"emailBodyHtml()\">-->\n\n                            <!--</div>-->\n                            <!--</td>-->\n                            <!--</tr>-->\n                            <!--</tbody>-->\n                            <!--</table>-->\n                            <div ng-repeat=\"att in rc.digitalDocumentData\" ng-show=\"rc.digitalDocumentData.length!=0\">\n                                <div>\n                                    <!--<div class=\"attachmentClass\">-->\n                                    <!--<span>Attachment {$ $parent.$index+1 $} : </span><span style=\"color:black\">{$ key $}.{$ value.extn $}</span>-->\n                                    <!--</div>-->\n                                    <div style=\"padding: 13px 7px 25px 7px;\">\n                                        <div ng-bind-html=\"emailAttachments(att.html_data)\"></div>\n                                    </div>\n                                    <!--<div style=\"padding: 13px 7px 25px 7px;\" ng-show=\"value.extn=='pdf'\">-->\n                                    <!--<object data=\"static{$ value.pdf_path $}\" type=\"application/pdf\" width=\"100%\" height=\"300px\">-->\n                                    <!--</object>-->\n                                    <!--</div>-->\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"tab-pane fade original\" style=\"padding:10px\">\n                            <!--<div ng-bind-html=\"emailOriginalHtml()\" style=\"padding-top:10px;\">-->\n                            <!--</div>-->\n                            <div>\n                                <span></span><span style=\"#a4a4a4;\">click below to download</span>\n                            </div>\n                            <div ng-repeat=\"att in rc.digitalDocumentData\">\n                                <div>\n                                    <div style=\"padding-top:10px;\">\n                                        <span ng-click=\"downloadAttachment(att.file_path)\" style=\"color: #00a3e0;cursor:pointer\">{$\n                                            att.data[0].name $}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-margin \" style=\"background-color:white;\">\n        <ul class=\"nav nav-tabs nav-reviewTabs\">\n            <li class=\"active\"><a data-toggle=\"tab\" href=\".elements\">Elements</a></li>\n            <li><a data-toggle=\"tab\" href=\".outcomes\">Domain Objects</a></li>\n        </ul>\n        <div class=\"image-style1\" style=\"height:{$ height $}px;overflow-y:scroll;background-color:white;\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane in active elements\" style=\"position: relative;border:1px solid #eee;\">\n                </div>\n                <div class=\"tab-pane outcomes\" style=\"position: relative;border:1px solid #eee;\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n<div ng-if=\"rc.documentType == 'email'\">\n    <div class=\"row\" id=\"markerForm-tabs\">\n        <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n            <ul class=\"nav nav-tabs custom-navTab\">\n                <li class=\"active\"><a data-toggle=\"tab\" href=\".review\">Review Extraction</a></li>\n                <li><a data-toggle=\"tab\" href=\".recommend\">Review Recommendations</a></li>\n            </ul>\n        </div>\n    </div>\n    <div class=\"row row-eq-height\" style=\"background-color: #ebf2f5;\">\n        <div class=\"col-sm-7 col-md-7 col-xs-7 col-lg-7 no-padding\" style=\"height:{$ height $}px;background:white\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade in active review emailTable\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\" style=\"overflow-y: scroll;max-height: 350px;\">\n                            <table class=\"table table-striped\">\n                                <tbody class=\"emailTable\">\n                                    <tr>\n                                        <td>From</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ rc.docAttributes.from $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Sent</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ rc.docAttributes.sent $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>To</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ rc.docAttributes.to $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Subject</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ rc.docAttributes.subject $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Email Body</td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div ng-bind-html=\"rc.renderEmailHTMLData(rc.docAttributes.body)\">\n\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                    <div class=\"attachments\" style=\"padding-bottom: 15px;\">\n\n                        <div class=\"row\">\n                            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\" style=\"top: -10px;\">\n                                <div>\n                                    <span style=\"font-size: 14px; background-color: #8399a5; padding: 0 10px;color:#fff;\">\n                                        Attachments\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <br>\n                        <div class=\"row\">\n                            <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-12 text-center\" style=\"cursor:pointer;\"\n                                ng-repeat=\"attachment in rc.emailAttachmentsArray\" ng-click=\"rc.showEmailAttachment(attachment)\">\n\n                                <img ng-if=\"attachment.mime_type == 'pdf'\" src=\"./static/ref-app/app/images/pdf.png\" style=\"width:60px;\" />\n                                <img ng-if=\"attachment.mime_type == 'excel-xlsx' || attachment.mime_type == 'excel-xls' || attachment.mime_type == 'xlsx'\"\n                                    src=\"./static/ref-app/app/images/excrc.png\" style=\"width:60px;\" />\n                                <span style=\"color: #696161;font-size:12px;\">\n                                    {$ attachment.file_name $}\n                                </span>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-padding\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade in active review emailTable\">\n                    <div class=\"row borderEmail\">\n                        <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-margin \" style=\"background-color:white;\">\n\n                        </div>\n                    </div>\n                </div>\n                <div class=\"tab-pane fade recommend emailTable\">\n                    <div class=\"row borderEmail\">\n                        <div style=\"height:{$ height $}px;overflow-y:scroll;\">\n                            <fieldset class=\"right_content\">\n                                <legend>Email Body</legend>\n                                <div class=\"row\">\n                                    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding\">\n                                        <div class=\"email_body\">\n                                            <span ng-bind-html=\"rc.renderEmailHTMLData(rc.docAttributes.body)\" style=\"font-size: 15px;\">Email\n                                                Body here</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                                <div class=\"row\">\n                                    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding emailPanel\">\n                                        <span style=\"color: #373939;font-size:14px;\">Intent recommendations</span>\n                                        <div class=\"panel panel-default\" ng-repeat=\"emailEntitie in rc.emailEntities.fields[0].nlp\">\n                                            <div class=\"panel-heading\">\n                                                <div class=\"row\">\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-12\">\n                                                        <span data-ng-bind=\"emailEntitie.action\" ng-show=\"!showActionInput\">Action</span>\n                                                        <input type=\"text\" class=\"form-control\" ng-model=\"emailEntitie.action\"\n                                                            ng-show=\"showActionInput\" />\n                                                        <i class=\"fa fa-pencil\" ng-click=\"showActionInput=true\" ng-show=\"!showActionInput\"></i>\n                                                        <i class=\"fa fa-check\" ng-show=\"showActionInput\" ng-click=\"rc.updateNlp(rc.emailEntities,'action');showActionInput=false\"></i>\n                                                        <i class=\"fa fa-times\" ng-click=\"showActionInput=false\" ng-show=\"showActionInput\"></i>\n                                                    </div>\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-12\">\n                                                        <span data-ng-bind=\"emailEntitie.entity\" ng-show=\"!showEntityInput\">Provider</span>\n                                                        <select class=\"form-control\" ng-model=\"emailEntitie.entity\"\n                                                            ng-show=\"showEntityInput\">\n                                                            <option ng-repeat=\"(key,value) in entitiesList\" value=\"{$ key $}\">{$\n                                                                key $}</option>\n                                                        </select>\n                                                        <i class=\"fa fa-pencil\" ng-click=\"showEntityInput=true\" ng-show=\"!showEntityInput\"></i>\n                                                        <i class=\"fa fa-check\" ng-show=\"showEntityInput\" ng-click=\"rc.updateNlp(rc.emailEntities,'entity');showEntityInput=false\"></i>\n                                                        <i class=\"fa fa-times\" ng-click=\"showEntityInput=false\" ng-show=\"showEntityInput\"></i>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"panel-body\">\n                                                <div class=\"row\" style=\"padding:10px;\">\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding\">\n                                                        <span>Set</span>\n                                                    </div>\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding text-right\">\n                                                        <span style=\"color:#26aae2;cursor:pointer;\" ng-click=\"rc.newAttribute(emailEntitie.attributes,emailEntitie.action);\">\n                                                            <i class=\"fa fa-plus\"></i>\n                                                            New Attribute\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                                <table class=\"table table-responsive\" style=\"background-color: #fafafa;margin-bottom:0px;\">\n                                                    <thead>\n                                                        <th>Attribute</th>\n                                                        <th>Value </th>\n                                                    </thead>\n                                                    <tbody>\n                                                        <tr ng-show=\"rc.newAttributeShow\">\n                                                            <td>\n                                                                <input type=\"text\" class=\"form-control\" placeholder=\"Enter attribute\"\n                                                                    ng-model=\"rc.newAttributeObj.attribute\" />\n                                                            </td>\n                                                            <td>\n                                                                <input type=\"text\" class=\"form-control\" placeholder=\"Enter value\"\n                                                                    ng-model=\"rc.newAttributeObj.value\" />\n                                                                <span style=\"color:red\">{$ rc.newAttrErr $}</span>\n                                                                <span><i class=\"fa fa-check\" ng-click=\"rc.saveNewAttribute()\"></i></span>\n                                                                <span><i class=\"fa fa-times\" ng-click=\"rc.newAttributeShow=false;rc.newAttrErr = ''\"></i></span>\n                                                            </td>\n                                                        </tr>\n                                                        <tr data-ng-repeat=\"attr in emailEntitie.attributes\">\n                                                            <td>\n                                                                <span data-ng-bind=\"attr.attribute\">Phone Number</span>\n                                                                <span><i class=\"fa fa-pencil\" style=\"color:#F3F5F6;\"></i>\n                                                                </span>\n                                                            </td>\n                                                            <td>\n                                                                <span data-ng-bind=\"attr.value\" ng-show=\"!showValueInput\">Value\n                                                                    Here</span>\n                                                                <input type=\"text\" class=\"form-control\" ng-model=\"attr.value\"\n                                                                    ng-show=\"showValueInput\" />\n                                                                <span><i class=\"fa fa-pencil\" ng-click=\"showValueInput=true\"\n                                                                        ng-show=\"!showValueInput\"></i></span>\n                                                                <i class=\"fa fa-check\" ng-show=\"showValueInput\"\n                                                                    ng-click=\"rc.updateNlp(rc.emailEntities,'value');showValueInput=false\"></i>\n                                                                <i class=\"fa fa-times\" ng-click=\"showValueInput=false\"\n                                                                    ng-show=\"showValueInput\"></i>\n                                                            </td>\n                                                        </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </fieldset>\n                            <div class=\"btn btn-customReview btn-custom btn-block \" ng-hide=\"documentState=='reviewed'\">\n                                Complete review\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 116 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.reviewServices', [])
			.service('reviewService', function($state,$q, $http,httpPayload) {
	
	            var _getData = function(data) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/getReview/'+data.status+"/"+data.docType+"/"+data.id+'/'+data.page+'/'+data.search,
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _reviewsList = function(data) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/getReviewList/'+data.default+'/'+data.documentType+'/'+data.searchKey,
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _postData = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/feedback/',
	                  headers: httpPayload.getHeader(),
	                  data:data.data
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _review = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/review/',
	                  headers: httpPayload.getHeader(),
	                  data:data.data
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getDocumentTypesList = function(data) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/documentTypes/',
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _retrain = function(data) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/retrain/',
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	
	
	           var _resendNLP = function(data) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/intent/'+data.id+'/',
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _sendEmailNlp = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/intentreview/',
	                  headers: httpPayload.getHeader(),
	                  data:data.data
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	//          var _downloadFile = function(data) {
	//            var req = {
	//                  method: 'POST',
	//                  url: 'api/download/efs/',
	//                  headers: {'sess_token': data.sess_id},
	//                  data:{"path":data.file_path}
	//            };
	//            var deferred = $q.defer();
	//
	//            $http(req).success(function(data) {
	//              deferred.resolve({
	//                data: data
	//              });
	//            }).error(function(data) {
	//              deferred.reject({
	//                error: data
	//              });
	//            });
	//
	//            return deferred.promise;
	//          };
	
	            var _getDomainObjects = function(data) {
	                var deferred = $q.defer();
	                var req = {
	                    method: 'GET',
	                    url: 'api/solnConfig/domainmapping/',
	                    headers: httpPayload.getHeader()
	                };
	
	                $http(req).success(function(data) {
	                    deferred.resolve({
	                        data: data
	                    });
	                }).error(function(data) {
	                    deferred.reject({
	                        error: data
	                    });
	                });
	
	                return deferred.promise;
	            };
	
	            var _saveChangedState = function(data) {
	                var req = {
	                      method: 'POST',
	                      url: 'api/change/state/',
	                      headers: httpPayload.getHeader(),
	                      data:data.data
	
	                };
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	            };
	
	            var _saveCompleteReviewProcessed = function(data) {
	                var req = {
	                      method: 'GET',
	                      url: 'api/completeReview/review/'+data.data+'/',
	                      headers: httpPayload.getHeader()
	                };
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	            };
	
	
	          var reviewService = {
	            getData:_getData,
	            postData:_postData,
	            reviewsList:_reviewsList,
	            resendNLP:_resendNLP,
	            getDocumentTypesList:_getDocumentTypesList,
	            retrain:_retrain,
	            review:_review,
	            sendEmailNlp:_sendEmailNlp,
	            getDomainObjects:_getDomainObjects,
	            saveChangedState:_saveChangedState,
	            saveCompleteReviewProcessed:_saveCompleteReviewProcessed
	//            downloadFile:_downloadFile
	
	          };
	
	          return reviewService;
			});
	})();

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	    //require('./services/module.js');
		//require('./dashboard/dashboard.module.js');
		//require('./entitygraph/entitygraph.module.js');
		//require('./solutionsetup/solutionsetup.module.js');
	
		module.exports = angular.module('console.extraction', [
	        //'console.dashboard.entitygraph'
		    //'console.dashboard.solutionsetup'
		    //'console.layout.bodycontent.dashboard.services'
		])
	        .controller('extractionController', __webpack_require__(118))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.extraction', {
	               url: '/extraction/:id/:type/:queue',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(119),
	                        controller: 'extractionController',
	                        controllerAs: 'ec',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/logout";
	                                 }
	                              }
	                        }
	
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 118 */
/***/ (function(module, exports) {

	module.exports = ['$scope', '$rootScope', 'ngDialog', '$state', '$stateParams', '$location', '$anchorScroll', 'reviewService', 'processDetailsServices', 'documentsListService', 'extractionService', '$window', '$sce', function ($scope, $rootScope, ngDialog, $state, $stateParams, $location, $anchorScroll, reviewService, processDetailsServices, documentsListService, extractionService, $window, $sce) {
	    'use strict';
	
	    var vm = this;
	    window.scrollTo(0, 0);
	    $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	    vm.sess_id = $scope.loginData.sess_id;
	    vm.loginDataObj = $scope.loginData;
	    $scope.showDomainTab = false;
	    $scope.height = $window.innerHeight - 96;
	    $scope.pdfHeight = $window.innerHeight - 130;
	    $scope.elementHeight = $window.innerHeight - 240;
	    $scope.url = $location.protocol() + '://' + $location.host() + ':' + $location.port();
	    $scope.getDemo = false;
	    $rootScope.inSolution = true;
	    $scope.showNavigation = false;
	    $scope.entitiesData = [];
	    $scope.rowHighlight = [];
	    $scope.selectedEleId = '';
	    $scope.tableEleId = '';
	    $scope.rowObj = {};
	    $scope.tableRow = [];
	    $scope.newNode = '';
	    $scope.currentDocId = $stateParams.id;
	    $scope.checkObj = {};
	    $scope.checkObj.accept = true;
	    $scope.checkObj.correct = true;
	    $scope.checkObj.review = true;
	    $scope.headersDisplayLength = 4;
	    vm.showPopup = {};
	    vm.showPopup.popup = false;
	    vm.showPopupConfirm = false;
	    vm.annotatinclickfromjs = false;
	
	
	    $scope.coordinatesDisplay = [];
	    $scope.currentQueueName = localStorage.getItem("queueName");
	    $scope.parentfilename = localStorage.getItem("parentfilename");
	
	
	
	    /*  extraction code starts */
	
	    var pdfjsLib = window['PDFAnnotate'];
	    const { UI } = pdfjsLib;
	    var documentId = '';
	    vm.pdfSrc = "";
	    var PAGE_HEIGHT;
	    var RENDER_OPTIONS = {
	        documentId,
	        pdfDocument: null,
	        scale: parseFloat(localStorage.getItem(`${documentId}/scale`), 10) || 0.25,
	        rotate: parseInt(localStorage.getItem(`${documentId}/rotate`), 10) || 0
	    };
	    //var anno = document.getElementById("annotationdiv");
	    //anno.innerHTML = '';
	    $scope.annotations = [];
	
	    //pdfjsLib.setStoreAdapter(new pdfjsLib.LocalStoreAdapter());
	    function getAnnotations(documentId) {
	        return $scope.annotations;
	    }
	
	
	    function findAnnotation(documentId, annotationId) {
	        var index = -1;
	        var annotations = getAnnotations(documentId);
	        for (var i = 0, l = annotations.length; i < l; i++) {
	            if (annotations[i].uuid === annotationId) {
	                index = i;
	                break;
	            }
	        }
	        return index;
	    }
	
	    $scope.MyStoreAdapter = new pdfjsLib.StoreAdapter({
	        getAnnotations(documentId, pageNumber) {
	            return new Promise((resolve, reject) => {
	                var annotations = getAnnotations(documentId).filter((i) => {
	                    return i.page === pageNumber && i.class === 'Annotation';
	                });
	
	                resolve({
	                    documentId,
	                    pageNumber,
	                    annotations
	                });
	            });
	        },
	
	        getAnnotation(documentId, annotationId) {
	            var annotation;
	            for (var i = 0, l = $scope.annotations.length; i < l; i++) {
	                if ($scope.annotations[i].uuid === annotationId) {
	                    annotation = $scope.annotations[i];
	                    break;
	                }
	            }
	
	            return Promise.resolve(annotation);
	            //return  Promise.resolve(getAnnotations(documentId)[findAnnotation(documentId, annotationId)]);
	        },
	
	
	        // getAnnotation(documentId, annotationId) {
	        //     console.log("getannotation");
	        //     var anno;
	        //     for (var i = 0; i < $scope.annotations.length; i++) {
	        //         if ($scope.annotations[i].uuid == annotationId)
	        //             anno = $scope.annotations[i];
	        //     }
	        //     return Promise.resolve(anno);
	        // },
	
	        addAnnotation(documentId, pageNumber, annotation) {
	            annotation.class = 'Annotation';
	            annotation.uuid = $scope.uniqueIdGenerator();
	            annotation.page = pageNumber;
	
	            // var annotations = getAnnotations(documentId);
	            //$scope.annotations.push(annotation);
	            // updateAnnotations(documentId, annotations);
	            let existingnode = {};
	            if ($scope.updatewithnewannotationNode == true) {
	                existingnode = $scope.updannotation;
	                existingnode.x = annotation.x;
	                existingnode.y = annotation.y;
	                existingnode.width = annotation.width;
	                existingnode.height = annotation.height;
	                existingnode.page_num = annotation.page;
	                existingnode.page = annotation.page;
	                annotation.uuid = existingnode.temp_id;
	
	
	                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + existingnode.uuid + "']")
	                allrect.forEach(function (rect) {
	                    //rect.setAttribute("stroke", "yellow");
	                    rect.remove();
	                });
	
	
	                //UI.disableEdit();
	                vm.updateNode(existingnode, existingnode.typeoffield);
	                $scope.annotations.push(existingnode);
	
	            }else if (vm.newcell) {
	
	                annotation.uuid = vm.newcelldata.temp_id;
	                existingnode = annotation;
	                vm.adddatatoTable(existingnode);
	                $scope.annotations.push(existingnode);
	            }else if(vm.newCoordinatesForUpdateNodeFlag){
	                annotation.uuid = vm.newCoordinatesForUpdateNodeObj.temp_id;
	                if(vm.labelEditAnnotation)
	                  annotation.uuid = vm.newCoordinatesForUpdateNodeObj.temp_id_key;
	                existingnode = annotation;
	                vm.adddatatoNode(existingnode);
	                $scope.annotations.push(existingnode);
	                vm.newCoordinatesForUpdateNodeFlag = false;
	            }
	            else {
	                vm.addnewAnnotation(annotation);
	                existingnode = annotation;
	            }
	            disableDrawRect("area");
	            return new Promise((resolve, reject) => {
	
	                resolve(existingnode);
	            });
	
	
	        },
	
	        editAnnotation(documentId, pageNumber, annotation) {
	
	
	            vm.selectedNode = annotation;
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == annotation.uuid) {
	                    $scope.annotations[i] = annotation;
	                    break;
	                }
	            }
	
	            let p = document.getElementById("pdf-annotate-edit-overlay");
	            if (p) {
	                p.remove();
	            }
	            vm.updateNode(annotation, annotation.typeoffield);
	            disableDrawRect("area");
	
	            return new Promise((resolve) => {
	                resolve(true);
	            })
	
	            // return new Promise((resolve) => {
	            //     console.log("for resolve start", Date.now());
	            //     resolve(annotation);
	            //     //UI.disableEdit();
	
	            //     console.log("for resolve done", Date.now());
	            // });
	
	
	
	
	        },
	
	        deleteAnnotation(documentId, annotationId) {
	
	
	            // for (var i = 0; i < $scope.annotations.length; i++) {
	            //     if ($scope.annotations[i].uuid == annotationId) {
	            //         vm.editablenode($scope.annotations[i]);
	            //         break;
	            //     }
	            // }
	            // enableDrawRect("area");
	            // return false;
	
	            var index = -1;
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == annotationId) {
	                    index = i;
	                    enableDrawRect("area");
	                    if($scope.annotations[i].temp_id_key){
	                        vm.editablelabelnode($scope.annotations[i]);
	                    }else{
	                        vm.editablenode($scope.annotations[i]);
	                    }
	                    break;
	                }
	            }
	            if (index > -1) {
	                $scope.annotations.splice(index, 1);
	            }
	
	            return new Promise((resolve, reject) => {
	                resolve(true);
	            });
	
	
	
	        },
	
	        addComment(documentId, annotationId, content) {
	
	        },
	
	        deleteComment(documentId, commentId) {
	
	        },
	        getComments(documentId, annotationId) {
	            var comments = [];
	            return new Promise((resolve) => {
	                resolve(comments);
	            })
	        }
	    });
	
	    pdfjsLib.setStoreAdapter($scope.MyStoreAdapter);
	
	
	    PDFJS.workerSrc = '/static/ref-app/app/sharedPDFJS/pdf.worker.js';
	
	
	    // Render stuff
	    var NUM_PAGES = 0;
	
	    function handleannotationrightclick(e, node) {
	        vm.selectedNode = node;
	        var uuid = e.uuid; //(e.toElement.innerHTML).split("__")[0];
	        var pageNum = e.page; //(e.toElement.innerHTML).split("__")[1];
	        var target = document.querySelector("[data-pdf-annotate-id='" + uuid + "']");
	        $scope.existtarget = target;
	        let scalerender = RENDER_OPTIONS.scale * 100;
	        let scaleheight = ((scalerender * e.y) / 100);
	        let scalewidth = ((scalerender * e.x)/100);
	        $scope.current_page = pageNum;
	        document.getElementById('content-wrapper').scrollTop = ((parseInt(pageNum) - 1) * PAGE_HEIGHT) + scaleheight ;
	        document.getElementById('content-wrapper').scrollLeft = scalewidth ;
	
	        UI.enableEdit();
	        vm.annotatinclickfromjs = true;
	        UI.fireEvent('annotation:click', target);
	        setTimeout(function(){
	         vm.annotatinclickfromjs = false;
	        },2000);
	    }
	     vm.render = function() {
	        document.getElementById('loadingpdf').style.display = 'block';
	        PDFJS.getDocument(RENDER_OPTIONS.documentId).then((pdf) => {
	
	            RENDER_OPTIONS.pdfDocument = pdf;
	
	            var viewer = document.getElementById('viewer');
	            viewer.innerHTML = '';
	            NUM_PAGES = pdf.pdfInfo.numPages;
	            $scope.no_of_pages = NUM_PAGES;
	            $scope.$apply();
	            for (var i = 0; i < NUM_PAGES; i++) {
	                var page = UI.createPage(i + 1);
	                viewer.appendChild(page);
	                UI.renderPage(i + 1, RENDER_OPTIONS).then(([pdfPage, annotations]) => {
	                    var viewport = pdfPage.getViewport(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate);
	                    PAGE_HEIGHT = viewport.height;
	                });
	            }
	
	
	            document.getElementById('loadingpdf').style.display = 'none';
	
	            // UI.renderPage(1, RENDER_OPTIONS).then(([pdfPage, annotations]) => {
	            //     let viewport = pdfPage.getViewport(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate);
	            //     PAGE_HEIGHT = viewport.height;
	            // });
	
	            if (vm.selectedNode != null) {
	                setTimeout(function () {
	                    setrectColor("transparent");
	                    setHeilight(vm.selectedNode.regions[0].uuid);
	                    handleannotationrightclick(vm.selectedNode.regions[0], vm.selectedNode);
	                }, 300)
	
	            }
	            UI.disableEdit();
	
	        });
	    }
	
	    function enableDrawRect(type) {
	        switch (type) {
	            case 'cursor':
	                UI.enableEdit();
	                break;
	            case 'draw':
	                UI.enablePen();
	                break;
	            case 'text':
	                UI.enableText();
	                break;
	            case 'point':
	                UI.enablePoint();
	                break;
	            case 'area':
	            case 'highlight':
	            case 'strikeout':
	                UI.enableRect(type);
	                break;
	        }
	    };
	
	    function disableDrawRect(tooltype) {
	        switch (tooltype) {
	            case 'cursor':
	                UI.disableEdit();
	                break;
	            case 'draw':
	                UI.disablePen();
	                break;
	            case 'text':
	                UI.disableText();
	                break;
	            case 'point':
	                UI.disablePoint();
	                break;
	            case 'area':
	            case 'highlight':
	            case 'strikeout':
	                UI.disableRect();
	                break;
	        }
	    };
	
	    function setrectColor(colortype) {
	        var allrect = document.querySelectorAll("rect");
	        allrect.forEach(function (rect) {
	            if (colortype == "transparent") {
	                //rect.setAttribute("stroke", colortype);
	                rect.style.display = "none";
	            }
	            else {
	                rect.style.display = "block";
	            }
	        });
	    }
	
	    function setHeilight(annotationid) {
	        var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + annotationid + "']")
	        var firstrect = false;
	        allrect.forEach(function (rect) {
	            if (firstrect == false) {
	                rect.style.display = "block";
	                firstrect = true;
	
	                var stroke = rect.getAttribute("stroke");
	                if (stroke) {
	                    //rect.setAttribute("fill", stroke);
	                    rect.setAttribute("stroke-width", '16px');
	                    //rect.style.opacity = 0.2;
	                }
	            } else {
	                rect.remove();
	            }
	        });
	    }
	
	    function setbackground() {
	        var allrect = document.querySelectorAll("rect");
	        allrect.forEach(function (rect) {
	            var stroke = rect.getAttribute("stroke");
	            if (stroke) {
	                rect.setAttribute("fill", stroke);
	                rect.style.opacity = 0.6;
	            }
	        });
	    }
	    function filterRect(type, isshow) {
	        var allrect = document.querySelectorAll("rect[status='" + type + "']")
	        allrect.forEach(function (rect) {
	            //rect.setAttribute("stroke", "transparent");
	            if (isshow) {
	                rect.style.display = "block";
	            } else {
	                rect.style.display = "none";
	            }
	        });
	    }
	
	    function handleZoom(scale) {
	        scale = parseFloat(scale, 10);
	        let rotate = 0;
	
	        if (RENDER_OPTIONS.scale !== scale || RENDER_OPTIONS.rotate !== rotate) {
	            RENDER_OPTIONS.scale = scale;
	            RENDER_OPTIONS.rotate = rotate;
	
	            localStorage.setItem(`${RENDER_OPTIONS.documentId}/scale`, RENDER_OPTIONS.scale);
	            localStorage.setItem(`${RENDER_OPTIONS.documentId}/rotate`, RENDER_OPTIONS.rotate % 360);
	
	            vm.render();
	        }
	    }
	
	    vm.pdfinit = function(){
	
	    // Text stuff
	    (function () {
	        var textSize;
	        var textColor;
	
	        // function initText() {
	        //   var size = document.querySelector('.toolbar .text-size');
	        //   [8, 9, 10, 11, 12, 14, 18, 24, 30, 36, 48, 60, 72, 96].forEach((s) => {
	        //     size.appendChild(new Option(s, s));
	        //   });
	
	        //   setText(
	        //     localStorage.getItem(`${RENDER_OPTIONS.documentId}/text/size`) || 10,
	        //     localStorage.getItem(`${RENDER_OPTIONS.documentId}/text/color`) || '#000000'
	        //   );
	
	        //   initColorPicker(document.querySelector('.text-color'), textColor, function (value) {
	        //     setText(textSize, value);
	        //   });
	        // }
	
	        function setText(size, color) {
	            var modified = false;
	
	            if (textSize !== size) {
	                modified = true;
	                textSize = size;
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/text/size`, textSize);
	                document.querySelector('.toolbar .text-size').value = textSize;
	            }
	
	            if (textColor !== color) {
	                modified = true;
	                textColor = color;
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/text/color`, textColor);
	
	                var selected = document.querySelector('.toolbar .text-color.color-selected');
	                if (selected) {
	                    selected.classList.remove('color-selected');
	                    selected.removeAttribute('aria-selected');
	                }
	
	                selected = document.querySelector(`.toolbar .text-color[data-color="${color}"]`);
	                if (selected) {
	                    selected.classList.add('color-selected');
	                    selected.setAttribute('aria-selected', true);
	                }
	
	            }
	
	            if (modified) {
	                UI.setText(textSize, textColor);
	            }
	        }
	
	        function handleTextSizeChange(e) {
	            setText(e.target.value, textColor);
	        }
	
	        document.querySelector('.toolbar .text-size').addEventListener('change', handleTextSizeChange);
	
	        // initText();
	    })();
	
	    // Pen stuff
	    (function () {
	        var penSize;
	        var penColor;
	
	        function initPen() {
	            var size = document.querySelector('.toolbar .pen-size');
	            for (var i = 0; i < 20; i++) {
	                size.appendChild(new Option(i + 1, i + 1));
	            }
	
	            setPen(
	                1,
	                '#000000'
	            );
	
	            // initColorPicker(document.querySelector('.pen-color'), penColor, function (value) {
	            //   setPen(penSize, value);
	            // });
	        }
	
	        function setPen(size, color) {
	            var modified = false;
	
	            if (penSize !== size) {
	                modified = true;
	                penSize = size;
	                document.querySelector('.toolbar .pen-size').value = penSize;
	            }
	
	            if (penColor !== color) {
	                modified = true;
	                penColor = color;
	
	                var selected = document.querySelector('.toolbar .pen-color.color-selected');
	                if (selected) {
	                    selected.classList.remove('color-selected');
	                    selected.removeAttribute('aria-selected');
	                }
	
	                selected = document.querySelector(`.toolbar .pen-color[data-color="${color}"]`);
	                if (selected) {
	                    selected.classList.add('color-selected');
	                    selected.setAttribute('aria-selected', true);
	                }
	            }
	
	            if (modified) {
	                UI.setPen(penSize, penColor);
	            }
	        }
	
	        function handlePenSizeChange(e) {
	            setPen(e.target.value, penColor);
	        }
	
	        document.querySelector('.toolbar .pen-size').addEventListener('change', handlePenSizeChange);
	
	        initPen();
	    })();
	
	    // Toolbar buttons
	    (function () {
	        var tooltype = localStorage.getItem(`${RENDER_OPTIONS.documentId}/tooltype`) || 'cursor';
	        if (tooltype) {
	            setActiveToolbarItem(tooltype, document.querySelector(`.toolbar button[data-tooltype=${tooltype}]`));
	        }
	
	        function setActiveToolbarItem(type, button) {
	            var active = document.querySelector('.toolbar button.active');
	            if (active) {
	                active.classList.remove('active');
	
	                switch (tooltype) {
	                    case 'cursor':
	                        UI.disableEdit();
	                        break;
	                    case 'draw':
	                        UI.disablePen();
	                        break;
	                    case 'text':
	                        UI.disableText();
	                        break;
	                    case 'point':
	                        UI.disablePoint();
	                        break;
	                    case 'area':
	                    case 'highlight':
	                    case 'strikeout':
	                        UI.disableRect();
	                        break;
	                }
	            }
	
	            if (button) {
	                button.classList.add('active');
	            }
	            if (tooltype !== type) {
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/tooltype`, type);
	            }
	            tooltype = type;
	
	            switch (type) {
	                case 'cursor':
	                    UI.enableEdit();
	                    break;
	                case 'draw':
	                    UI.enablePen();
	                    break;
	                case 'text':
	                    UI.enableText();
	                    break;
	                case 'point':
	                    UI.enablePoint();
	                    break;
	                case 'area':
	                case 'highlight':
	                case 'strikeout':
	                    UI.enableRect(type);
	                    break;
	            }
	        }
	
	        function handleToolbarClick(e) {
	            if (e.target.nodeName === 'BUTTON') {
	                setActiveToolbarItem(e.target.getAttribute('data-tooltype'), e.target);
	            }
	        }
	
	        document.querySelector('.toolbar').addEventListener('click', handleToolbarClick);
	    })();
	
	    // Scale/rotate
	    (function () {
	        function setScaleRotate(scale, rotate) {
	            scale = parseFloat(scale, 10);
	            rotate = parseInt(rotate, 10);
	
	            if (RENDER_OPTIONS.scale !== scale || RENDER_OPTIONS.rotate !== rotate) {
	                RENDER_OPTIONS.scale = scale;
	                RENDER_OPTIONS.rotate = rotate;
	
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/scale`, RENDER_OPTIONS.scale);
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/rotate`, RENDER_OPTIONS.rotate % 360);
	
	                vm.render();
	            }
	        }
	
	        function handleScaleChange(e) {
	            setScaleRotate(e.target.value, RENDER_OPTIONS.rotate);
	        }
	
	        function handleRotateCWClick() {
	            setScaleRotate(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate + 90);
	        }
	
	        function handleRotateCCWClick() {
	            setScaleRotate(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate - 90);
	        }
	
	        document.querySelector('.toolbar select.scale').value = RENDER_OPTIONS.scale;
	        document.querySelector('.toolbar select.scale').addEventListener('change', handleScaleChange);
	        document.querySelector('.toolbar .rotate-ccw').addEventListener('click', handleRotateCCWClick);
	        document.querySelector('.toolbar .rotate-cw').addEventListener('click', handleRotateCWClick);
	    })();
	
	    // Clear toolbar button
	    (function () {
	        function handleClearClick(e) {
	            if (confirm('Are you sure you want to clear annotations?')) {
	                for (var i = 0; i < NUM_PAGES; i++) {
	                    document.querySelector(`div#pageContainer${i + 1} svg.annotationLayer`).innerHTML = '';
	                }
	
	                localStorage.removeItem(`${RENDER_OPTIONS.documentId}/annotations`);
	            }
	        }
	        document.querySelector('a.clear').addEventListener('click', handleClearClick);
	    })();
	
	    }
	
	
	
	    function handleAnnotationClick(target) {
	       if(target==null)
	            return;
	        $scope.rowHighlight = [];
	        if(!vm.annotatinclickfromjs && document.getElementsByClassName(target.dataset.pdfAnnotateId) && document.getElementsByClassName(target.dataset.pdfAnnotateId)[0]){
	            document.getElementsByClassName(target.dataset.pdfAnnotateId)[0].scrollIntoView();
	            var p = document.getElementsByClassName(target.dataset.pdfAnnotateId)[0];
	            if(!p.closest("ol").classList.contains("in")){
	                var s = p.closest("ol").closest("li");
	                s.querySelector(".nodetoggle").click();
	            };
	//            if(!p.parentElement.classList.contains("in")){
	//              p.parentElement.parentElement.querySelectorAll(".nodetoggle")[0].click();
	//            }
	
	            $scope.rowHighlight[target.dataset.pdfAnnotateId] = 'highlightClass';
	            UI.disableEdit();
	        }
	        if($scope.$root){
	            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	                    $scope.$apply();
	            }
	        }
	        disableDrawRect("area");
	    }
	
	    UI.addEventListener('annotation:click', handleAnnotationClick);
	
	    /* extractioncode ends */
	
	    vm.handleNewTabledata = function (obj) {
	        if (obj.new_cell) {
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].new_cell = false;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x1 = obj.regions[0].x1;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y1 = obj.regions[0].y1;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x2 = obj.regions[0].x2;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y2 = obj.regions[0].y2;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].page_num = obj.regions[0].page_num;
	        } else {
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x1 = obj.x;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y1 = obj.y;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x2 = obj.x + obj.width;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y2 = obj.y + obj.height;
	            vm.newElement.cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].page_num = obj.page;
	        }
	
	
	    }
	    vm.updaterightsideObject = function (obj, elements) {
	        var key;
	        if (vm.newElement == {}) {
	            vm.handleNewTabledata(obj);
	            vm.newcelldata = angular.copy({});
	            return;
	        }
	
	        for (var i = 0; i < elements.length; i++) {
	            if (elements[i].type == "section") {
	                key = vm.updaterightsideObject(obj, elements[i].elements);
	            } else {
	                if(elements[i].type =='list'){
	                   for(var j=0;j<elements[i].children.length;j++){
	                        if (elements[i].children[j].temp_id == obj.temp_id) {
	                                elements[i].children[j].regions[0].x1 = obj.x;
	                                elements[i].children[j].regions[0].y1 = obj.y;
	                                elements[i].children[j].regions[0].x2 = obj.x + obj.width;
	                                elements[i].children[j].regions[0].y2 = obj.y + obj.height;
	                                elements[i].children[j].regions[0].page_num = obj.page;
	                                break;
	
	
	                        }
	                   }
	                   key = elements[i];
	
	                  break;
	                }
	
	                if (elements[i].id == obj.id) {
	
	                    // console.log("need to update", elements[i]);
	                    if (elements[i].type != "table") {
	                        if(elements[i].type =='field'){
	                            if(vm.labelEditAnnotation){
	                                if(elements[i].temp_id_key == obj.uuid){
	                                    if(elements[i].key.regions.length==0 || elements[i].key.regions==undefined){
	                                        elements[i].key.regions = [{}];
	                                    }
	                                    elements[i].key.regions[0].x1 = obj.x;
	                                    elements[i].key.regions[0].y1 = obj.y;
	                                    elements[i].key.regions[0].x2 = obj.x + obj.width;
	                                    elements[i].key.regions[0].y2 = obj.y + obj.height;
	                                    elements[i].key.regions[0].page_num = obj.page;
	                                    elements[i].is_changed = true;
	                                }
	                            }
	                            else{
	                                elements[i].value.regions[0].x1 = obj.x;
	                                elements[i].value.regions[0].y1 = obj.y;
	                                elements[i].value.regions[0].x2 = obj.x + obj.width;
	                                elements[i].value.regions[0].y2 = obj.y + obj.height;
	                                elements[i].value.regions[0].page_num = obj.page;
	                                elements[i].is_changed = true;
	                            }
	                        }else{
	                            elements[i].regions[0].x1 = obj.x;
	                            elements[i].regions[0].y1 = obj.y;
	                            elements[i].regions[0].x2 = obj.x + obj.width;
	                            elements[i].regions[0].y2 = obj.y + obj.height;
	                            elements[i].regions[0].page_num = obj.page;
	                            elements[i].is_changed = true;
	                        }
	                    } else if (elements[i].type == "table") {
	                        if (obj.new_cell) {
	
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].new_cell = false;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x1 = obj.regions[0].x1;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y1 = obj.regions[0].y1;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x2 = obj.regions[0].x2;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y2 = obj.regions[0].y2;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].page_num = obj.regions[0].page_num;
	                        } else {
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x1 = obj.x ? obj.x:obj.regions[0].x1;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y1 = obj.y ? obj.x:obj.regions[0].y1;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].x2 = obj.x ?  (obj.x + obj.width) : obj.regions[0].x2;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].y2 = obj.y ?  (obj.y +obj.height) : obj.regions[0].y2;
	                            elements[i].cells_reconstructed[vm.newcelldata.line_no][vm.newcelldata.col_no].regions[0].page_num = obj.page? obj.page : obj.regions[0].page_num;
	                        }
	                    }
	
	                    key = elements[i];
	
	                    break;
	                }
	            }
	            if (key) {
	
	                return key;
	            }
	        }
	    };
	
	    function setOrderForAnnotations(){
	        var svgs = document.querySelectorAll("svg");
	        for(var k=0;k<svgs.length;k++){
	            var allrects = svgs[k].querySelectorAll("rect");
	            var tmpRects = [];
	             for(var i=0; i < allrects.length;i++){
	                  tmpRects.push(allrects[i]);
	             };
	             var sortedRects = tmpRects.sort(function(rect1,rect2){
	                return rect1.getAttribute("y") - rect2.getAttribute("y")
	             });
	
	             svgs[k].querySelectorAll("rect").forEach(function(rect){
	                rect.remove();
	             });
	
	             for(var i=sortedRects.length-1;i>=0;i--){
	                svgs[k].appendChild(sortedRects[i]);
	             };
	         }
	         document.getElementById('loadingpdf').style.display = 'none';
	
	
	
	    };
	
	    vm.editablenode = function (node) {
	        $scope.updatewithnewannotationNode = true;
	        $scope.updannotation = node;
	    }
	    vm.editablelabelnode = function (node) {
	        vm.newCoordinatesForUpdateNodeFlag = true;
	        vm.newCoordinatesForUpdateNodeObj = node;
	    }
	
	    vm.navigatePage = function (type) {
	
	        if (type == 'next') {
	            $scope.nextClass = 'nextCursor';
	            var rec_num = $scope.filter_obj.current_record_no + 1;
	            if (rec_num < $scope.recentRecords.length) {
	                var prop = 'none';
	                if ($scope.recentRecords[rec_num].is_digital) {
	                    prop = 'digital';
	                }
	                $scope.filter_obj.current_record_no = rec_num;
	                localStorage.setItem('filterObj', JSON.stringify($scope.filter_obj))
	                $state.go("app.review", { id: $scope.recentRecords[rec_num].doc_id, type: prop, queue: $stateParams.queue }, { reload: true })
	            }
	            else {
	                $scope.filter_obj.page_num = $scope.filter_obj.page_num + 1;
	                $scope.filter_obj.current_record_no = -1;
	                $scope.getDocumentsListData(type);
	
	            }
	        }
	        else if (type == 'prev') {
	            $scope.prevClass = 'prevCursor';
	            var rec_num = $scope.filter_obj.current_record_no - 1;
	            if (rec_num >= 0) {
	                var prop = 'none';
	                if ($scope.recentRecords[rec_num].is_digital) {
	                    prop = 'digital';
	                }
	                $scope.filter_obj.current_record_no = rec_num;
	                localStorage.setItem('filterObj', JSON.stringify($scope.filter_obj))
	                $state.go("app.review", { id: $scope.recentRecords[rec_num].doc_id, type: prop, queue: $stateParams.queue }, { reload: true })
	            }
	            else {
	                $scope.filter_obj.page_num = $scope.filter_obj.page_num - 1;
	                $scope.filter_obj.current_record_no = $scope.recentRecords.length;
	                $scope.getDocumentsListData(type);
	
	            }
	        }
	    };
	
	    $scope.updateFilterObj = function (type) {
	        $scope.filter_obj = JSON.parse(localStorage.getItem('filterObj'));
	        if ($scope.filter_obj == null || $scope.filter_obj == undefined) {
	            $scope.showNavigation = false;
	        }
	        else {
	            if ($scope.filter_obj.hasOwnProperty('current_record_no')) {
	                $scope.showNavigation = true;
	                $scope.recentRecords = JSON.parse(localStorage.getItem('recentRecords'));
	                if ($scope.recentRecords == null || $scope.recentRecords == undefined) {
	                } else {
	                    $scope.total_records = $scope.filter_obj.totalRecords;
	                    //vm.documentType = $scope.recentRecords[$scope.filter_obj.current_record_no].mime_type;
	                    $scope.no_of_records = (($scope.filter_obj.page_num - 1) * $scope.filter_obj.no_of_recs) + $scope.filter_obj.current_record_no + 1;
	                }
	            }
	            else {
	                $scope.showNavigation = false;
	            }
	
	        }
	
	        vm.navigatePage(type);
	    };
	
	    $scope.updateFilterObj('none');
	
	    if ($stateParams.type.toLowerCase() != "digital") {
	
	
	
	        $scope.colorCodes = {
	            'orange_border': '#fb9019',
	            'green_border': '#26ce3f',
	            'blue_border': '#4a90e2'
	        }
	
	        vm.storeAnnotations = function(type, item, fieldType){
	            if(item.regions!=undefined){
	                    for (var i = 0; i < item.regions.length; i++) {
	                        var obj = angular.copy(item);
	                        if (fieldType == "table")
	                            obj.type = fieldType;
	                        obj.x = obj.regions[i].x1;
	                        obj.width = obj.regions[i].x2 - obj.regions[i].x1;
	                        obj.y = obj.regions[i].y1;
	                        obj.height = obj.regions[i].y2 - obj.regions[i].y1;
	                        obj.is_display = true;
	                        obj.color = $scope.colorCodes.orange_border;
	                        obj.bgColor = $scope.colorCodes.orange_border;
	                        if (obj.temp_id == undefined) {
	                            obj.temp_id = $scope.uniqueIdGenerator();
	                        }
	                        item.temp_id = obj.temp_id;
	                        obj.class = "Annotation";
	                        obj.page = obj.regions[i].page_num;
	                        obj.typeoffield = angular.copy(obj.node_type);
	                        obj.type = "area";
	                        obj.uuid = obj.temp_id;
	                        obj.documentId = vm.pdfSrc;
	                        obj.status = "review";
	                        if (obj.is_accept) {
	                            obj.color = $scope.colorCodes.green_border;
	                            obj.bgColor = $scope.colorCodes.green_border;
	                            obj.status = "accept";
	                        }
	                        if (obj.is_corrected) {
	                            obj.color = $scope.colorCodes.blue_border;
	                            obj.bgColor = $scope.colorCodes.blue_border;
	                            obj.status = "correct";
	                        }
	
	                        obj.borderStyle = 'solid';
	                        if (item.type == 'section') {
	                            obj.is_display = false;
	                            obj.borderStyle = 'dashed';
	                        }
	                        obj.page_num = obj.regions[i].page_num; //obj.regions[i].page_num;
	
	                        //obj.index = $scope.drawer[obj.regions[i].page].length;
	                        // item.drawerIndexObj['value' + i] = obj.index;
	                        // $scope.drawer[obj.regions[i].page_num].push(obj);
	                        $scope.annotations.push(obj);
	                    }
	            }
	        };
	
	        vm.updateDrawer = function (type, item, fieldType) {
	
	            if (item.is_accept == undefined && item.is_corrected == undefined && item.need_review == undefined) {
	                item.need_review = true;
	            }
	            if(item.node_type =='field'){
	                if(item.key){
	                    if($scope.template_type!='unknown')
	                       item.key.name = item.name;
	                    if (item.key.name != undefined && item.key.name != '') {
	                        item.original_label = angular.copy(item.key.name);
	                    } else {
	                        if (item.key.text != undefined && item.key.text != '') {
	                            item.original_label = angular.copy(item.key.text);
	                        }
	                    }
	                }
	                if(item.value){
	                     if (item.value.text != undefined) {
	                            item.original_text = angular.copy(item.value.text);
	                     }
	                }
	            }
	            else if(item.node_type=='paragraph' || item.node_type=='sentence' || item.node_type=='heading' || item.node_type=='table'){
	                if (item.text != undefined) {
	                            item.original_text = angular.copy(item.text);
	                }
	            }
	            else if(item.node_type=='omr_field'){
	                if (item.text != undefined && item.text != '') {
	                            item.original_label = angular.copy(item.text);
	                }
	            }
	
	
	
	            if(fieldType == 'list' || fieldType == 'table'){
	                item.original_text = item.text;
	            }
	
	            if(item.regions!=undefined){
	                if(item.new_cell){
	                    item.coordinates_copy = [];
	                }
	                else{
	                  if(item.node_type=='field'){
	                     item.value.coordinates_copy = angular.copy(item.value.regions);
	                  }
	                  else{
	                     item.coordinates_copy = angular.copy(item.regions);
	                  }
	                }
	            }
	            if(item.node_type=='omr_field'){
	                item.groups_copy = angular.copy(item.fields);
	            }
	            if(item.node_type=='field'){
	                item.value.temp_id = item.temp_id;
	                vm.storeAnnotations(type, item.value, fieldType)
	            }else{
	               vm.storeAnnotations(type, item, fieldType)
	            }
	            if(item.node_type === 'field'){
	                vm.updateLabelAnnotation(item)
	            }
	        };
	
	        vm.updateLabelAnnotation = function(item){
	
	            item.temp_id_key = item.temp_id+'_key';
	            if(item.key.regions!=undefined){
	                item.label_coordinates_copy = angular.copy(item.key.regions);
	            }
	            if(item.key.regions!=undefined){
	                for (var i = 0; i < item.key.regions.length; i++) {
	                    var obj = angular.copy(item);
	                    obj.x = obj.key.regions[i].x1;
	                    obj.width = obj.key.regions[i].x2 - obj.key.regions[i].x1;
	                    obj.y = obj.key.regions[i].y1;
	                    obj.height = obj.key.regions[i].y2 - obj.key.regions[i].y1;
	                    obj.is_display = true;
	                    obj.color = $scope.colorCodes.orange_border;
	                    obj.bgColor = $scope.colorCodes.orange_border;
	                    if (obj.temp_id == undefined) {
	                        obj.temp_id = $scope.uniqueIdGenerator();
	                    }
	                    item.temp_id = obj.temp_id;
	                    obj.class = "Annotation";
	                    obj.page = obj.key.regions[i].page_num;
	                    obj.typeoffield = angular.copy(obj.node_type);
	                    obj.type = "area";
	                    obj.temp_id_key = item.temp_id_key;
	                    obj.uuid = obj.temp_id_key ;
	                    obj.documentId = vm.pdfSrc;
	                    obj.status = "review";
	                    if (obj.is_accept) {
	                        obj.color = $scope.colorCodes.green_border;
	                        obj.bgColor = $scope.colorCodes.green_border;
	                        obj.status = "accept";
	                    }
	                    if (obj.is_corrected) {
	                        obj.color = $scope.colorCodes.blue_border;
	                        obj.bgColor = $scope.colorCodes.blue_border;
	                        obj.status = "correct";
	                    }
	
	                    obj.borderStyle = 'solid';
	                    if (item.type == 'section') {
	                        obj.is_display = false;
	                        obj.borderStyle = 'dashed';
	                    }
	                    obj.page_num = obj.key.regions[i].page_num; //obj.regions[i].page_num;
	
	                    //obj.index = $scope.drawer[obj.regions[i].page].length;
	                    // item.drawerIndexObj['value' + i] = obj.index;
	                    // $scope.drawer[obj.regions[i].page_num].push(obj);
	                    $scope.annotations.push(obj);
	                }
	            }
	        };
	
	
	
	        vm.getAttributeByHierarchy = function (data) {
	
	                vm.updateDrawer('value', data);
	
	        };
	
	        vm.getListByHierarchy = function (data) {
	
	            vm.updateDrawer('value', data);
	            if (data.children != undefined) {
	                for (var i = 0; i < data.children.length; i++) {
	                        vm.updateDrawer('value', data.children[i],'list');
	                }
	            }
	
	        };
	
	        vm.getTableheadersCalculation = function (value) {
	            value.headings_copy = angular.copy(value.headings_reconstructed);
	            value.columnStart = 1;
	            value.columnEnd = $scope.headersDisplayLength;
	            var headersLength = value.headings_reconstructed.length;
	            var fraction = Math.ceil(headersLength / $scope.headersDisplayLength);
	            var totalScrolls = fraction * $scope.headersDisplayLength;
	            var missedHeadersLength = totalScrolls - headersLength;
	            for (var i = 0; i < missedHeadersLength; i++) {
	                value.headings_reconstructed.push([]);
	            }
	
	
	        };
	        vm.getTableByHierarchy = function (value) {
	            var j = 0;
	            //               angular.forEach(value.tables.headings,function(obj,index){
	            //                   value.tables.headings[index] = value.tables.headings[index].join("");
	            //               });
	            //               value.tables.headings = value.tables.headings.join();
	            angular.forEach(value.cells_reconstructed, function (value1, key1) {
	                var k = 0;
	
	                angular.forEach(value1, function (value2, key2) {
	                    if (key2 == "subheaders") {
	                        if (value2.regions != undefined) {
	
	                            if (value2.page_num != undefined)
	                                value2.page_num = value2.page_num;
	                            else
	                                value2.page_num = value.page_num;
	
	
	                            value2.id = value.id;
	                            vm.updateDrawer('value', value2, 'table');
	
	                        }
	                    }
	                    else {
	                        if (value2.regions != undefined) {
	                            if (value2.page_num != undefined)
	                                value2.page_num = value2.page_num;
	                            else
	                                value2.page_num = value.page_num;
	
	
	                            value2.id = value.id;
	                            vm.updateDrawer('value', value2, 'table');
	
	                        }
	                        k++;
	                    }
	                })
	                j++
	            })
	        };
	
	
	        vm.recursiveByHierarchy = function (data) {
	            for (var i = 0; i < data.length; i++) {
	                if (data[i].node_type == 'section' || data[i].node_type == 'default_section') {
	                    //vm.getAttributeByHierarchy(data[i]);
	                    if(data[i].children)
	                      vm.recursiveByHierarchy(data[i].children);
	
	                }
	                else {
	                    if (data[i].node_type == 'table') {
	                        vm.getTableheadersCalculation(data[i]);
	                        vm.getTableByHierarchy(data[i])
	                    }
	                    else if (data[i].node_type == 'list') {
	                        vm.getListByHierarchy(data[i]);
	                    }
	                    else
	                        vm.getAttributeByHierarchy(data[i]);
	                }
	
	            }
	        };
	
	        vm.getresultByHierarchy = function () {
	            vm.recursiveByHierarchy($scope.extractOutput);
	        };
	
	
	
	
	
	
	
	        vm.getGroups = function (type) {
	            extractionService.getListOfGroups($stateParams.id, vm.sess_id).then(function (data) {
	                if (data.data.status == "success") {
	                        $scope.extractedData = data.data;
	                        $scope.extractedElements = [];
	                        $scope.extractedElements = $scope.extractedData.data.elements;
	                        $scope.copyData = angular.copy($scope.extractedElements);
	                        $scope.deepCopyOfSectionsData = { 'data': $scope.copyData };
	                        $scope.volume = $scope.extractedData.volume;
	                        $scope.recordData = $scope.extractedData.data.metadata;
	                        $scope.reviewStatesList = $scope.extractedData.review_state;
	                        $scope.doc_id = $scope.extractedData.data.doc_id;
	                        $scope.root_id = $scope.extractedData.data.root_id;
	                        $scope.template_type = $scope.extractedData.data.template_type;
	                        $scope.showUnknown = false;
	                        if ($scope.recordData.properties.extension != "email") {
	                            if ($scope.extractedData.data.template_type != undefined) {
	                                if ($scope.extractedData.data.template_type == 'unknown' || $scope.extractedData.data.template_type == 'known') {
	                                    $scope.current_page = 1;
	                                    if ($scope.extractedData.data.doc_type == undefined || $scope.extractedData.data.doc_type == 'image') {
	                                        $scope.showUnknown = true;
	                                    } else {
	                                        vm.renderHtml = $scope.pagesInfo[$scope.current_page - 1].doc_html;
	                                    }
	                                    $scope.current_page = 1;
	                                    $scope.rowHighlight = [];
	                                    $scope.tableRow = [];
	                                    $scope.extractOutput = $scope.extractedElements;
	                                    vm.getresultByHierarchy();
	
	                                    RENDER_OPTIONS.documentId = "/static" + $scope.volume + $scope.recordData.properties.digital_pdf_resource.key;
	                                    vm.pdfSrc = "/static" + $scope.volume + $scope.recordData.properties.digital_pdf_resource.key;
	
	//                                    RENDER_OPTIONS.documentId = '/static/ref-app/app/sharedPDFJS/cms.pdf';
	//                                    vm.pdfSrc = "/static/ref-app/app/sharedPDFJS/cms.pdf";
	
	                                    vm.pdfinit();
	                                    vm.render();
	                                    $scope.setOrderForSpecificTime();
	
	                                }
	
	
	                            }
	
	                        }
	                        else {
	                            $scope.processListDetails = data.data;
	                            $scope.recordData = $scope.processListDetails.data;
	                            $scope.mime_type = data.data.data.data.extn;
	                            vm.documentType = data.data.data.data.doc_type;
	                            vm.docAttributes = data.data.data.data.doc_attributes;
	                            $scope.processListDetails = data.data.data;
	                            $scope.recordDataConfig = $scope.processListDetails.config.record_data;
	                            $scope.recordData = $scope.processListDetails.data;
	                            vm.emailAttachmentsArray = data.data.data.data.attachments;
	                            vm.emailEntities = data.data.data.data.elements;
	                        }
	                } else {
	                    $.UIkit.notify({
	                        message: data.data.msg,
	                        status: 'danger',
	                        timeout: 3000,
	                        pos: 'top-center'
	                    });
	                }
	            }, function (err) {
	
	            })
	        };
	        vm.getGroups('load');
	
	
	        $scope.fieldCriteria = function (node) {
	            if (node != undefined) {
	                if (node.is_accept) {
	                    return 'accepted1'
	                }
	                else if (node.is_corrected) {
	                    return 'corrected1'
	                }
	                else {
	                    return 'reviewed1'
	                }
	            }
	        };
	
	        $scope.excelBtnArr = [];
	        $scope.excelBtnArr[0] = 'excel-back';
	        $scope.getSheetData = function (index) {
	            $scope.excelBtnArr = [];
	            $scope.excelBtnArr[index] = 'excel-back';
	            vm.renderHtml = $scope.pagesInfo[index].doc_html;
	        };
	
	        $scope.openId = function (id) {
	            var str = id.split('_');
	            var id = '';
	            $('.collapse.in').removeClass('in');
	            // $(".group"+''+data.groupName).addClass('in');
	            // $(".group"+''+data.groupName).removeAttr( 'style' );
	            // $(".showRow"+ ''+data.indexObj.childIndex).addClass('in');
	            // $(".showRow"+''+data.indexObj.childIndex).removeAttr( 'style' );
	            for (var i = 0; i < str.length; i++) {
	                if (i == 0)
	                    id = id + '' + str[i];
	                else
	                    id = id + '_' + str[i];
	
	                $("." + id).addClass('in');
	                $("." + id).removeAttr('style');
	            }
	        };
	
	
	        vm.classLengths = function (node) {
	            if (node.node_type == 'field') {
	                return 'col-lg-6 col-md-6 col-sm-6 col-xs-6 image-padding';
	            }
	            else if (node.node_type == 'paragraph') {
	                return 'col-lg-12 col-md-12 col-sm-12 col-xs-12 image-padding';
	            }
	            else if (node.node_type == 'sentence') {
	                return 'col-lg-12 col-md-12 col-sm-12 col-xs-12 image-padding';
	            }
	            else if (node.node_type == 'heading') {
	                return 'col-lg-6 col-md-6 col-sm-6 col-xs-6 image-padding';
	            }
	            else {
	                return 'col-lg-12 col-md-12 col-sm-12 col-xs-12 image-padding';
	            }
	        }
	
	        vm.hideElement = function (node) {
	
	            if (node.is_deleted) {
	                return true;
	            }
	            if (node.is_accept && !$scope.checkObj.accept) {
	                return true
	            }
	            if (node.is_corrected && !$scope.checkObj.correct) {
	                return true
	            }
	            if (node.need_review && !$scope.checkObj.review) {
	                return true
	            }
	            return false
	        };
	
	        vm.changeIntaraction = function (type, value) {
	
	            filterRect(type, value);
	
	        };
	
	
	
	       $scope.setOrderForSpecificTime = function(){
	            setTimeout(function(){
	                document.getElementById('loadingpdf').style.display = 'block';
	                setOrderForAnnotations();
	            },3000);
	       };
	
	        vm.zoomIn = function () {
	            var zoom = '';
	            if (RENDER_OPTIONS.scale < 1.4) {
	                let zoom = RENDER_OPTIONS.scale + 0.1
	                handleZoom(zoom);
	            }
	            $scope.setOrderForSpecificTime();
	
	
	
	
	        };
	
	        vm.zoomReset = function(){
	            handleZoom(0.17);
	            $scope.setOrderForSpecificTime();
	        };
	
	        vm.zoomOut = function () {
	            var zoom = '';
	            if (RENDER_OPTIONS.scale > 0.1) {
	                zoom = RENDER_OPTIONS.scale - 0.1;
	                handleZoom(zoom);
	            }
	
	            $scope.setOrderForSpecificTime();
	
	
	        };
	
	
	
	
	
	        vm.showallAnnotations = function () {
	            setrectColor("yellow");
	            UI.disableEdit();
	        };
	
	        vm.disableSelector = function () {
	            vm.selectedNode=null;
	
	            setTimeout(() => {
	                vm.showallAnnotations();
	            }, 300);
	            $scope.setOrderForSpecificTime();
	
	        };
	
	
	        vm.changePageNumUnknown = function (type) {
	            if (type == 'next')
	                $scope.current_page++;
	            else
	                $scope.current_page--;
	            var zoomVal = $('.' + $scope.zoomDisplay).css("zoom");
	            setTimeout(function () {
	                document.getElementById('content-wrapper').scrollTop = ((parseInt($scope.current_page) - 1) * PAGE_HEIGHT);
	            }, 100);
	        };
	
	        vm.keyEnterUnknown = function (event) {
	            if (event.which === 13) {
	                if ($scope.current_page <= $scope.no_of_pages) {
	                    if ($scope.current_page > 0) {
	                        var zoomVal = $('.' + $scope.zoomDisplay).css("zoom");
	                        setTimeout(function () {
	                            var topPos = document.getElementById('page_' + $scope.current_page).offsetTop;
	                            var scrollingElement = angular.copy(topPos * zoomVal);
	                            document.getElementById('scrollImage').scrollTop = scrollingElement;
	                        }, 100);
	                    }
	                    else {
	                        $.UIkit.notify({
	                            message: 'Please Enter Page number',
	                            status: 'warning',
	                            timeout: 3000,
	                            pos: 'top-center'
	                        });
	                    }
	                }
	                else {
	                    $.UIkit.notify({
	                        message: 'Please Enter Page number less than no.of pages',
	                        status: 'warning',
	                        timeout: 3000,
	                        pos: 'top-center'
	                    });
	                }
	            }
	        };
	
	        vm.resetDeletedElement = function(){
	            if ($scope.updatewithnewannotationNode == true) {
	                document.querySelectorAll("[data-pdf-annotate-page='" + $scope.updannotation.page + "']")[0].appendChild($scope.existtarget);
	                $scope.annotations.push($scope.updannotation);
	                $scope.updannotation = {};
	                $scope.updatewithnewannotationNode = false;
	            }
	        };
	
	        vm.resetLabelDeletedElement = function(){
	            if (vm.newCoordinatesForUpdateNodeFlag == true) {
	                document.querySelectorAll("[data-pdf-annotate-page='" + vm.newCoordinatesForUpdateNodeObj.page + "']")[0].appendChild($scope.existtarget);
	                $scope.annotations.push(vm.newCoordinatesForUpdateNodeObj);
	                // $scope.MyStoreAdapter.addAnnotation(vm.pdfSrc,$scope.updannotation.page,$scope.updannotation);
	
	                vm.newCoordinatesForUpdateNodeObj = {};
	                vm.newCoordinatesForUpdateNodeFlag = false;
	            }
	        };
	
	        vm.getCurrentValue = function (node,type) {
	            vm.resetDeletedElement();
	            vm.resetLabelDeletedElement();
	            if(type==undefined){
	                vm.resetAllEvents();
	            }
	            $scope.rowHighlight = [];
	            $scope.rowHighlight[node.temp_id] = 'highlightClass';
	
	
	            var pageNum = 1;
	            $scope.current_page = 1;
	            if(node.node_type=='field'){
	                setrectColor("transparent");
	                setHeilight(node.value.temp_id);
	                let p = document.getElementById("pdf-annotate-edit-overlay");
	                if (p) {
	                    p.remove();
	                }
	                UI.disableEdit();
	                if(node.value.regions!=undefined){
	                    if (node.value.regions.length>0) {
	                        pageNum = node.value.regions[0].page_num;
	                        $scope.current_page = node.value.regions[0].page_num;
	                        var scalerender = RENDER_OPTIONS.scale * 100;
	                        var scaleheight = ((scalerender * node.value.regions[0].y1) / 100);
	                        var scalewidth = ((scalerender *  node.value.regions[0].x1)/100);
	                        document.getElementById('content-wrapper').scrollTop = ((parseInt(pageNum) - 1) * PAGE_HEIGHT) + scaleheight;
	                        document.getElementById('content-wrapper').scrollLeft = scalewidth ;
	                    }
	                }
	            }else{
	                setrectColor("transparent");
	                setHeilight(node.temp_id);
	                let p = document.getElementById("pdf-annotate-edit-overlay");
	                if (p) {
	                    p.remove();
	                }
	                UI.disableEdit();
	                if(node.regions!=undefined){
	                    if (node.regions.length>0) {
	                        pageNum = node.regions[0].page_num;
	                        $scope.current_page = node.regions[0].page_num;
	                        var scalerender = RENDER_OPTIONS.scale * 100;
	                        var scaleheight = ((scalerender * node.regions[0].y1) / 100);
	                        var scalewidth = ((scalerender *  node.regions[0].x1)/100);
	                        document.getElementById('content-wrapper').scrollTop = ((parseInt(pageNum) - 1) * PAGE_HEIGHT) + scaleheight;
	                        document.getElementById('content-wrapper').scrollLeft = scalewidth ;
	                    }
	                }
	            }
	            if(node.node_type==='field'){
	                if (node.key.regions.length>0) {
	                    setHeilight(node.temp_id_key);
	                }
	            }
	
	
	            return;
	
	        };
	
	
	
	
	
	
	
	
	
	
	        vm.deleteElementData = function (node,type) {
	            node.is_deleted = true;
	            node.is_changed = true;
	            if(type==='table'){
	                for (var i=0; i<node.cells_reconstructed.length; i++) {
	                    var size = Object.keys(node.cells_reconstructed[i]).length;
	                    for (var j=0; j<size; j++) {
	                        var index = -1;
	                        for (var k = 0; k < $scope.annotations.length; k++) {
	                            if ($scope.annotations[k].uuid == node.cells_reconstructed[i][j].temp_id) {
	                                index = k;
	                                break;
	                            }
	                        }
	                        if (index > -1) {
	                            $scope.annotations.splice(index, 1);
	                            var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.cells_reconstructed[i][j].temp_id + "']")
	                            allrect[0].remove();
	                        }
	                    }
	                }
	            }else{
	                var index = -1;
	                for (var i = 0; i < $scope.annotations.length; i++) {
	                    if ($scope.annotations[i].uuid == node.temp_id) {
	                        index = i;
	                        break;
	                    }
	                }
	                if (index > -1) {
	                    $scope.annotations.splice(index, 1);
	                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.temp_id + "']")
	                    allrect[0].remove();
	                }
	            }
	
	
	        }
	
	        $scope.deleteField = function (node,type) {
	            if (vm.showPopupConfirm) {
	                vm.deleteElementData(node);
	                vm.disableSelector();
	                //vm.sendFeedback(node, 'delete');
	            }
	            else {
	                ngDialog.open({
	                    template: 'confirmEntityBox',
	                    controller: ['$scope', '$state', function ($scope, $state) {
	                        $scope.activePopupText = 'Are you sure you want to delete the element  ?';
	                        $scope.onConfirmActivation = function (flag) {
	                            if (flag) {
	                                vm.showPopupConfirm = true;
	                            }
	                            ngDialog.close();
	                            vm.deleteElementData(node,type);
	                            //vm.disableSelector();
	                            //vm.sendFeedback(node, 'delete')
	
	
	                        };
	                    }]
	                });
	            }
	        };
	
	
	        $scope.saveField = function (node, type) {
	            if (type == undefined) {
	                if (node.text != node.original_text) {
	                    vm.sendFeedback(node, 'edit');
	                }
	
	            }
	            else if (type == 'key') {
	
	                if (node.name != undefined && node.name != '') {
	                    if (node.name != node.original_label) {
	                        vm.sendFeedback(node, 'edit');
	                    }
	                } else {
	                    if (node.label != undefined && node.label != '') {
	                        if (node.label != node.original_label) {
	                            vm.sendFeedback(node, 'edit');
	                        }
	                    }
	                }
	
	            }
	            else if (type == 'list') {
	                var nodeCopy = angular.copy(node);
	                if (nodeCopy.list_elements != undefined && nodeCopy.list_elements.length > 0) {
	                    for (var i = 0; i < nodeCopy.list_elements.length; i++) {
	                        nodeCopy.is_corrected = true;
	                        nodeCopy.is_accept = false;
	                        nodeCopy.need_review = false;
	                        delete nodeCopy.list_elements[i].drawerIndexObj;
	                        delete nodeCopy.list_elements[i].original_text;
	                        for (var j = 0; j < nodeCopy.list_elements[i].regions.length; j++) {
	                            delete nodeCopy.list_elements[i].regions[j].slice_id;
	                        }
	                    }
	                }
	                vm.sendFeedback(nodeCopy, 'edit', 'list');
	
	
	            }
	
	        };
	
	        $scope.saveTableField = function (node) {
	            node.is_corrected = true;
	            $scope.selectedEleId = '';
	            $scope.tableEleId = '';
	            if (node.tables != undefined) {
	                if (node.cells_reconstructed != undefined) {
	                    var obj = node.cells_reconstructed[$scope.rowObj.index][$scope.rowObj.key];
	                    obj.id = node.id;
	                    $scope.rowObj = {};
	                    $scope.tableEleId = '';
	                    vm.sendFeedback(obj, 'edit')
	                }
	            }
	        };
	
	        $scope.saveOMRField = function (node) {
	            node.is_corrected = true;
	            $scope.selectedEleId = '';
	            vm.sendFeedback(node, 'edit', 'omr');
	        };
	
	        vm.sendFeedback = function (node, type, fieldType) {
	            var temp = {}
	            temp.id = node.id;
	            temp.request_type = 'extract_text';
	            temp.doc_id = $scope.currentDocId;
	            temp.feedback = [];
	            var info = {}
	            info.insight_id = node.insight_id;
	            info.text = node.text;
	            var nodeCopy = angular.copy(node.regions);
	            info.regions = nodeCopy;
	            for (var i = 0; i < info.regions.length; i++) {
	                delete info.regions[i].slice_id
	            }
	            if (node.name != undefined && node.name != '') {
	                info.name = node.name
	            } else {
	                if (node.label != undefined && node.label != '') {
	                    info.label = node.label
	                }
	            }
	            info.feedback_type = type;
	            if (fieldType == 'omr') {
	                info.groups = node.groups;
	            }
	            if (fieldType == 'list') {
	                info.list_elements = node.list_elements;
	            }
	            if (type == 'delete') {
	                info.is_deleted = true;
	            }
	            if (node.slice_path != undefined) {
	                info.slice_path = node.slice_path
	            }
	            temp.feedback.push(info)
	            if ($scope.getDemo) {
	                temp.demo_mode = true;
	            }
	            extractionService.saveFeedback({ 'data': temp, 'sess_id': vm.sess_id }).then(function (resp) {
	                if (resp.data.status == "success") {
	
	                }
	                else {
	                    $.UIkit.notify({
	                        message: resp.data.msg,
	                        status: 'danger',
	                        timeout: 3000,
	                        pos: 'top-center'
	                    });
	                }
	            }, function (err) {
	                $.UIkit.notify({
	                    message: "Internal server error",
	                    status: 'warning',
	                    timeout: 3000,
	                    pos: 'top-center'
	                });
	            });
	        };
	        vm.formatTableForFeedback = function(table){
	           var flag = true;
	//            var table_flag = myForm.$dirty
	            if(table.is_changed || table.is_new){
	                var originalHeadingLength = table.headings_reconstructed.length - table.headings_copy.length;
	                for (var s = 0; s < originalHeadingLength; s++) {
	                   table.headings_reconstructed.splice(table.headings_reconstructed.length - 1, 1)
	                }
	                delete table.columnEnd;
	                delete table.columnStart;
	                delete table.headings_copy;
	                for(var i=0;i<table.cells_reconstructed.length;i++){
	                    var size = table.headings_reconstructed.length;
	                    for(var j=0;j<size;j++){
	                        table.cells_reconstructed[i][j].row_no = i;
	                        table.cells_reconstructed[i][j].col_no = j;
	                        table.cells_reconstructed[i][j].col_name = table.headings_reconstructed[j][0];
	                        delete table.cells_reconstructed[i][j].new_cell;
	
	                    }
	                }
	                var obj = {};
	                if(table.is_new){
	                    if(table.is_deleted)
	                               flag = false
	                    obj.parent_insight_id = table.parent_insight_id;
	                }
	                else{
	                    obj.insight_id = table.insight_id;
	                }
	
	                obj.action = 'upsert';
	                if(table.is_deleted)
	                    obj.action = 'delete';
	                else{
	                    obj.reformat = 'table';
	                    obj.data = {};
	                    obj.data.cells_reconstructed = table.cells_reconstructed;
	                    obj.data.headings_reconstructed = table.headings_reconstructed;
	                    obj.data.headers = table.headers;
	                }
	                if(flag)
	                  vm.feedbackObj.push(obj);
	            }
	        };
	
	        vm.formatElementsForFeedback = function(element){
	            var flag = true;
	            if(element.node_type == 'list'){
	                element.is_changed = true;
	            }
	            if(element.is_changed){
	                var obj = {};
	                obj.action = 'upsert';
	
	                if(element.is_new){
	                        if(element.is_deleted)
	                           flag = false
	                    obj.parent_insight_id = element.parent_insight_id;
	                }
	                else{
	                    obj.insight_id = element.insight_id;
	                }
	
	                if(element.is_deleted)
	                   obj.action = 'delete';
	                else{
	                    obj.data = {};
	                    if(element.regions!=undefined){
	                        obj.data.regions = [];
	                    }
	                    angular.forEach(element.regions,function(value,key){
	                        var coordinates_obj = {};
	                        coordinates_obj.x1 = value.x1;
	                        coordinates_obj.x2 = value.x2;
	                        coordinates_obj.y1 = value.y1;
	                        coordinates_obj.y2 = value.y2;
	                        coordinates_obj.page_num = value.page_num;
	                        obj.data.regions.push(coordinates_obj);
	                    })
	                    if(element.is_new)
	                        obj.data.node_type = element.node_type;
	                    if(element.node_type == 'field'){
	                        obj.data.key = {};
	                        obj.data.value = {};
	                        obj.data.key.text = element.key.text;
	                        obj.data.value.text = element.value.text;
	                        if(element.key.regions!=undefined){
	                            obj.data.key.regions = [];
	                            angular.forEach(element.key.regions,function(value,key){
	                                var coordinates_obj = {};
	                                coordinates_obj.x1 = value.x1;
	                                coordinates_obj.x2 = value.x2;
	                                coordinates_obj.y1 = value.y1;
	                                coordinates_obj.y2 = value.y2;
	                                coordinates_obj.page_num = value.page_num;
	                                obj.data.key.regions.push(coordinates_obj);
	                            })
	                        }
	                        if(element.value.regions!=undefined){
	                            obj.data.value.regions = [];
	                            angular.forEach(element.value.regions,function(value1,key){
	                                var coordinates_obj = {};
	                                coordinates_obj.x1 = value1.x1;
	                                coordinates_obj.x2 = value1.x2;
	                                coordinates_obj.y1 = value1.y1;
	                                coordinates_obj.y2 = value1.y2;
	                                coordinates_obj.page_num = value1.page_num;
	                                obj.data.value.regions.push(coordinates_obj);
	                            })
	                        }
	
	                    }
	                    else if(element.node_type == 'list'){
	                        if(element.children!=undefined){
	
	                          obj.data.children = [];
	                          for(var i=0;i<element.children.length;i++){
	                            var tempObj = {};
	                            if(element.children[i].text)
	                                tempObj.text = element.children[i].text;
	                            if(element.children[i].regions)
	                                tempObj.regions = element.children[i].regions;
	                            if(element.children[i].id)
	                                tempObj.id = element.children[i].id;
	                            if(element.children[i].is_deleted)
	                                tempObj.is_deleted = element.children[i].is_deleted;
	
	                            obj.data.children.push(tempObj);
	
	                          }
	                          angular.forEach(obj.data.children,function(value,key){
	                                value.node_type="sentence";
	                                if(value.regions!=undefined && value.regions.length>0){
	                                    $scope.coordinates_list = angular.copy(value.regions);
	                                    value.regions = [];
	                                    angular.forEach($scope.coordinates_list,function(value2,key2){
	                                        var coordinates_obj = {};
	                                        coordinates_obj.x1 = value2.x1;
	                                        coordinates_obj.x2 = value2.x2;
	                                        coordinates_obj.y1 = value2.y1;
	                                        coordinates_obj.y2 = value2.y2;
	                                        coordinates_obj.page_num = value2.page_num;
	                                        value.regions.push(coordinates_obj);
	                                    })
	
	                                }
	                          })
	                        }
	                    }
	                    else if(element.node_type == 'omr_field'){
	                        obj.data.regions = [];
	                        if(element.regions!=undefined){
	                            obj.data.regions = [];
	                            angular.forEach(element.regions,function(value1,key){
	                                var coordinates_obj = {};
	                                coordinates_obj.x1 = value1.x1;
	                                coordinates_obj.x2 = value1.x2;
	                                coordinates_obj.y1 = value1.y1;
	                                coordinates_obj.y2 = value1.y2;
	                                coordinates_obj.page_num = value1.page_num;
	                                obj.data.regions.push(coordinates_obj);
	                            })
	                            obj.data.fields = element.fields;
	                        }
	                    }
	                    else{
	                    obj.data.text = element.text;
	                    }
	
	                }
	                if(flag)
	                  vm.feedbackObj.push(obj);
	            }
	        };
	
	        vm.recursiveForFeedback = function (data) {
	            for (var i = 0; i < data.length; i++) {
	                if (data[i].node_type == 'section' || data[i].node_type == 'default_section') {
	                    vm.formatElementsForFeedback(data[i]);
	                    if(data[i].children)
	                       vm.recursiveForFeedback(data[i].children);
	
	
	                }
	                else {
	                    if (data[i].node_type == 'table') {
	                        vm.formatTableForFeedback(data[i]);
	                    }
	                    else{
	                        vm.formatElementsForFeedback(data[i]);
	                    }
	
	                }
	
	            }
	        };
	
	
	
	
	
	
	        vm.completeFedBack = function(){
	            vm.feedbackObj = [];
	            $scope.extractOutputForFeedback = angular.copy($scope.extractOutput)
	            vm.recursiveForFeedback($scope.extractOutputForFeedback);
	            var temp = {}
	            temp.root_id = $scope.root_id;
	            temp.feedback = vm.feedbackObj;
	            temp.doc_id = $scope.doc_id;
	            console.log(temp);
	            extractionService.saveNewElement({ 'data': temp, 'sess_id': vm.sess_id }).then(function (resp) {
	                if (resp.data.status == "success") {
	                            $.UIkit.notify({
	                                message: resp.data.msg,
	                                status: 'success',
	                                timeout: 3000,
	                                pos: 'top-center'
	                            });
	                            vm.getGroups('load');
	
	//                            if (vm.loginDataObj.role == "sv") {
	//                                $state.go("app.supervisorDocumentsList", { "id": $stateParams.queue });
	//                            }
	//                            else {
	//                                $state.go("app.agentDocumentsList", { "id": $stateParams.queue });
	//                            }
	                }
	                else {
	                    $.UIkit.notify({
	                        message: resp.data.msg,
	                        status: 'danger',
	                        timeout: 3000,
	                        pos: 'top-center'
	                    });
	                }
	            }, function (err) {
	                $.UIkit.notify({
	                    message: "Internal server error",
	                    status: 'warning',
	                    timeout: 3000,
	                    pos: 'top-center'
	                });
	            });
	        };
	
	
	
	
	
	
	    }
	    else {
	
	    }
	
	
	    vm.renderHTMLData = function () {
	        return $sce.trustAsHtml(vm.renderHtml);
	    };
	
	    vm.renderEmailHTMLData = function (data) {
	        return $sce.trustAsHtml(data);
	    };
	
	    vm.showEmailAttachment = function (attachmentObj) {
	        //alert(attachmentObj);
	        var doc_id = attachmentObj.doc_id;
	        var prop = "none";
	        //$state.reload();
	        $state.go("app.review", { id: doc_id, type: prop, queue: $stateParams.queue })
	    };
	
	    vm.updateNlp = function (obj, prop) {
	        var sendObj = { "elements": obj, "doc_id": $stateParams.id };
	        reviewService.sendEmailNlp({ 'data': sendObj, 'sess_id': vm.sess_id }).then(function (data) {
	            if (data.data.status == "success") {
	                $.UIkit.notify({
	                    message: data.data.msg,
	                    status: 'success',
	                    timeout: 3000,
	                    pos: 'top-center'
	                });
	            }
	        }, function (err) {
	            $.UIkit.notify({
	                message: "Internal server error",
	                status: 'warning',
	                timeout: 3000,
	                pos: 'top-center'
	            });
	        });
	    };
	
	    vm.newAttribute = function (action) {
	        vm.newAttributeObj = angular.copy({ "attribute": "", "value": "", "action": action });
	        vm.newAttributeShow = true;
	    };
	
	    vm.saveNewAttribute = function () {
	        if (vm.newAttribute.attribute != "" && vm.newAttribute.attribute != undefined) {
	            if (vm.newAttribute.value != "" && vm.newAttribute.value != undefined) {
	                vm.emailEntities.fields[0].nlp.attributes.push(vm.newAttribute);
	                reviewService.sendEmailNlp({ 'data': sendObj, 'sess_id': vm.sess_id }).then(function (data) {
	                    if (data.data.status == "success") {
	                        vm.newAttributeShow = false;
	                        vm.newAttrErr = "";
	                        $.UIkit.notify({
	                            message: data.data.msg,
	                            status: 'success',
	                            timeout: 3000,
	                            pos: 'top-center'
	                        });
	                    }
	                }, function (err) {
	                    vm.newAttrErr = "";
	                    $.UIkit.notify({
	                        message: "Internal server error",
	                        status: 'warning',
	                        timeout: 3000,
	                        pos: 'top-center'
	                    });
	                });
	            }
	            else {
	                vm.newAttrErr = "Please enter the value";
	            }
	        }
	        else {
	            vm.newAttrErr = "Please enter the attribute";
	        }
	    };
	
	    vm.getAttributesList = function () {
	        reviewService.getDomainObjects({ 'sess_id': vm.sess_id }).then(function (resp) {
	            $scope.entitiesList = resp.data;
	        }, function (err) {
	            console.log(err)
	            $.UIkit.notify({
	                message: "Internal server error",
	                status: 'warning',
	                timeout: 3000,
	                pos: 'top-center'
	            });
	        });
	    };
	    vm.getAttributesList();
	
	    $scope.url = $location.protocol() + '://' + $location.host() + ':' + $location.port();
	    $scope.download = function () {
	        var downloadUrl = $scope.url + '/api/download/json/' + $scope.doc_id + '/';
	        window.location.assign(downloadUrl);
	    };
	
	
	    vm.keyOptions = { "field": "Field", "paragraph": "Paragraph", "sentence": "Sentence", "heading": "Heading", "list":"List", "table": "Table" };
	    $scope.uniqueIdGenerator = function () {
	        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	    };
	
	    function s4() {
	        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	    };
	
	    vm.elementObj = function(type){
	
	        vm.newElement.coordinates_copy = [];
	        vm.newElement.original_label = '';
	        vm.newElement.original_text = '';
	        vm.newElement.is_changed = true;
	        vm.newElement.is_new = true;
	        vm.newElement.regions = [];
	        if(type){
	            vm.newElement.key = {};
	            vm.newElement.value = {};
	            vm.newElement.node_type = "field";
	            vm.newElement.label_coordinates_copy = [];
	            vm.newElement.key.confidence = 100;
	            vm.newElement.key.regions = [];
	            vm.newElement.value.confidence = 100;
	            vm.newElement.value.regions = [];
	            vm.newElement.key.text = '';
	            vm.newElement.value.text = '';
	            vm.newElement.key.is_corrected = true;
	            vm.newElement.key.is_accept = false;
	            vm.newElement.key.need_review = false;
	            vm.newElement.value.is_corrected = true;
	            vm.newElement.value.is_accept = false;
	            vm.newElement.value.need_review = false;
	        }else{
	            delete vm.newElement.key;
	            delete vm.newElement.value;
	            vm.newElement.text = '';
	            vm.newElement.confidence = 100;
	            vm.newElement.is_corrected = true;
	            vm.newElement.is_accept = false;
	            vm.newElement.need_review = false;
	        }
	    };
	
	    vm.addNewNode = function (node) {
	        $scope.rowHighlight = [];
	        $scope.croppingError = false;
	        $scope.cropMsg = '';
	        $scope.newNode = node.insight_id;
	        vm.newElement = {};
	        vm.newElement.id = $scope.uniqueIdGenerator();
	        vm.newElement.temp_id = node.insight_id + "_" + vm.newElement.id;
	        vm.newElement.parent_insight_id = node.insight_id;
	        vm.elementObj('field');
	        UI.disableEdit();
	        setrectColor("transparent");
	
	
	
	    };
	
	    vm.cancelNewnode = function () {
	        $scope.croppingError = false;
	        $scope.cropMsg = '';
	        vm.showLabelCrop = false;
	        vm.showCrop = false;
	        var index = -1;
	        if(vm.newElement.label_id!=undefined){
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == vm.newElement.label_id) {
	                    index = i;
	                    break;
	                }
	            }
	            if (index > -1) {
	                $scope.annotations.splice(index, 1);
	                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + vm.newElement.label_id + "']")
	                allrect[0].remove();
	            }
	
	
	        }
	        var index =-1;
	        if(vm.newElement.value_id!=undefined){
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == vm.newElement.value_id) {
	                    index = i;
	                    break;
	                }
	            }
	            if (index > -1) {
	                $scope.annotations.splice(index, 1);
	                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + vm.newElement.value_id + "']")
	                allrect[0].remove();
	            }
	
	
	        }
	        if(vm.newElement.node_type=='table'){
	            if(vm.newElement.cells_reconstructed!=undefined){
	                if(vm.newElement.cells_reconstructed.length>0){
	                    var originalHeadingLength = vm.newElement.headings_reconstructed.length - vm.newElement.headings_copy.length;
	                    for (var s = 0; s < originalHeadingLength; s++) {
	                       vm.newElement.headings_reconstructed.splice(vm.newElement.headings_reconstructed.length - 1, 1)
	                    }
	                    for(var i=0;i<vm.newElement.cells_reconstructed.length;i++){
	                        var size = vm.newElement.headings_reconstructed.length;
	                        for(var j=0;j<size;j++){
	                            var index = -1;
	                            for (var m = 0; m<$scope.annotations.length; m++) {
	                                    if ($scope.annotations[m].uuid == vm.newElement.cells_reconstructed[i][j].temp_id) {
	                                        index = m;
	                                        break;
	                                    }
	                            }
	                            if (index > -1) {
	                                $scope.annotations.splice(index, 1);
	                                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + vm.newElement.cells_reconstructed[i][j].temp_id + "']")
	                                allrect[0].remove();
	                            }
	
	
	
	                        }
	                    }
	                }
	            }
	        }
	        if(vm.newElement.node_type=='list'){
	           for(var i=0;i<vm.newElement.children.length;i++){
	                            var index = -1;
	                            for (var m = 0; m<$scope.annotations.length; m++) {
	                                    if ($scope.annotations[m].uuid == vm.newElement.children[i].temp_id) {
	                                        index = m;
	                                        break;
	                                    }
	                            }
	                            if (index > -1) {
	                                $scope.annotations.splice(index, 1);
	                                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + vm.newElement.children[i].temp_id + "']")
	                                allrect[0].remove();
	                            }
	           }
	        }
	        vm.newElement = {};
	        $scope.newNode = '';
	        vm.disableSelector();
	        vm.resetAllEvents();
	
	    };
	
	    vm.addNewListItem = function(node,index){
	            $scope.croppingError = false;
	            $scope.cropMsg = '';
	            var obj = {};
	            obj.text = '';
	            obj.regions = [];
	            obj.temp_id = vm.newElement.temp_id+"_"+$scope.uniqueIdGenerator();
	            obj.confidence = 100;
	            vm.newElement.children.splice(index+1, 0, obj);
	    };
	
	    vm.addNewExistingListItem = function(node,index){
	            $scope.croppingError = false;
	            $scope.cropMsg = '';
	            var obj = {};
	            obj.text = '';
	            obj.regions = [];
	            obj.temp_id = node.temp_id+"_"+$scope.uniqueIdGenerator();
	            obj.confidence = 100;
	            node.children.splice(index+1, 0, obj);
	    };
	
	    vm.deleteNewListItem = function(node,indexVal){
	            if(vm.newElement.children.length>1){
	                var index = -1;
	                for (var i = 0; i < $scope.annotations.length; i++) {
	                    if ($scope.annotations[i].uuid == vm.newElement.children[indexVal].temp_id) {
	                        index = i;
	                        break;
	                    }
	                }
	                if (index > -1) {
	                    $scope.annotations.splice(index, 1);
	                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" +vm.newElement.children[indexVal].temp_id+ "']")
	                    allrect[0].remove();
	                }
	
	                vm.newElement.children.splice(indexVal,1);
	            }else{
	                $scope.croppingError = true;
	                $scope.cropMsg = 'At least on list item is needed';
	            }
	    };
	    vm.deleteExistingListItem = function(node,indexVal){
	            if(node.children.length>1){
	                var index = -1;
	                for (var i = 0; i < $scope.annotations.length; i++) {
	                    if ($scope.annotations[i].uuid ==node.children[indexVal].temp_id) {
	                        index = i;
	                        break;
	                    }
	                }
	                if (index > -1) {
	                    $scope.annotations.splice(index, 1);
	                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" +node.children[indexVal].temp_id+ "']")
	                    allrect[0].remove();
	                }
	
	                node.children[indexVal].is_deleted = true;
	            }else{
	                $scope.croppingError = true;
	                $scope.cropMsg = 'At least on list item is needed';
	            }
	    };
	
	    vm.cropLabelText = function () {
	        if(vm.newElement.key.regions!=undefined){
	            if(vm.newElement.key.regions.length>0){
	                vm.editLabelCoordinates(vm.newElement);
	                return;
	            }
	        }
	        setrectColor("transparent");
	        enableDrawRect("area");
	        vm.newElement.clickType = 'label';
	        //vm.enableSelector('new');
	
	    };
	
	    vm.cropText = function () {
	//        var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + vm.newElement.temp_id + "']")
	//        allrect.forEach(function (rect) {
	//               rect.remove();
	//        });
	        if(vm.newElement.node_type==='field'){
	            if(vm.newElement.value.regions!=undefined){
	                if(vm.newElement.value.regions.length>0){
	                    vm.editCoordinates(vm.newElement);
	                    return;
	                }
	            }
	        }
	        else{
	            if(vm.newElement.regions!=undefined){
	                if(vm.newElement.regions.length>0){
	                    vm.editCoordinates(vm.newElement);
	                    return;
	                }
	            }
	        }
	        setrectColor("transparent");
	        enableDrawRect("area");
	        vm.newElement.clickType = 'value';
	
	        //       vm.showCrop = true;
	        //       vm.enableSelector('new');
	
	    };
	
	    vm.cropListText = function(data,index){
	        if(vm.newElement.children[index].regions!=undefined){
	            if(vm.newElement.children[index].regions.length>0){
	                vm.newElement.children[index].node_type = 'sentence';
	                vm.editCoordinates(vm.newElement.children[index]);
	                return;
	            }
	        }
	        setrectColor("transparent");
	        enableDrawRect("area");
	        vm.newElement.clickType = 'list';
	        for(var i=0;i<vm.newElement.children.length;i++){
	            if(vm.newElement.children[i].temp_id == data.temp_id){
	                vm.newElement.children[i].is_changed = true;
	            }else{
	                vm.newElement.children[i].is_changed = false;
	            }
	        }
	    }
	
	
	
	    vm.adddatatoTable = function (newtableannotation) {
	        var annotation = newtableannotation;
	        var value_coordinates = {};
	        value_coordinates = {};
	        value_coordinates.x1 = annotation.x;
	        value_coordinates.y1 = annotation.y;
	        value_coordinates.x2 = annotation.x + annotation.width;
	        value_coordinates.y2 = annotation.y + annotation.height;
	        value_coordinates.page_num = annotation.page;
	        vm.newcelldata.regions.push(value_coordinates);
	        vm.updateDrawer('value',vm.newcelldata);
	        vm.updaterightsideObject(vm.newcelldata, $scope.extractOutput);
	        var newcell = vm.newcelldata;
	        if (vm.clickedtype == false) {
	            //vm.saveCell(newcell.line_no, newcell.col_no, annotation, annotation);
	            vm.newcelldata = angular.copy({});
	        }
	    };
	
	    vm.adddatatoNode = function (newtableannotation) {
	        var annotation = newtableannotation;
	        var value_coordinates = {};
	        value_coordinates = {};
	        value_coordinates.x1 = annotation.x;
	        value_coordinates.y1 = annotation.y;
	        value_coordinates.x2 = annotation.x + annotation.width;
	        value_coordinates.y2 = annotation.y + annotation.height;
	        value_coordinates.page_num = annotation.page;
	
	        if(vm.labelEditAnnotation){
	          vm.newCoordinatesForUpdateNodeObj.key.regions = [];
	          vm.newCoordinatesForUpdateNodeObj.key.regions.push(value_coordinates);
	          vm.updateLabelAnnotation(vm.newCoordinatesForUpdateNodeObj);
	         }
	        else{
	          vm.newCoordinatesForUpdateNodeObj.regions = [];
	          vm.newCoordinatesForUpdateNodeObj.regions.push(value_coordinates);
	          vm.updateDrawer('value',vm.newCoordinatesForUpdateNodeObj);
	        }
	        vm.updaterightsideObject(vm.newCoordinatesForUpdateNodeObj, $scope.extractOutput);
	
	    }
	
	    vm.addnewAnnotation = function (newannotation) {
	        var annotation = newannotation;
	        var value_coordinates = {};
	        value_coordinates = {};
	        value_coordinates.x1 = annotation.x;
	        value_coordinates.y1 = annotation.y;
	        value_coordinates.x2 = annotation.x + annotation.width;
	        value_coordinates.y2 = annotation.y + annotation.height;
	        value_coordinates.page_num = annotation.page;
	        //vm.newElement.temp_id = newannotation.uuid;
	
	        // vm.newElement.type = vm.newElement.type;
	        if (vm.newElement.clickType == 'label') {
	            vm.newElement.key.regions = [];
	            vm.newElement.key.regions.push(value_coordinates);
	            newannotation.uuid =  vm.newElement.temp_id+'_key';
	            vm.newElement.label_id = newannotation.uuid;
	            vm.newElement.temp_id_key = newannotation.uuid;
	            newannotation.temp_id_key = vm.newElement.temp_id_key;
	            $scope.annotations.push(newannotation);
	        }else if(vm.newElement.clickType == 'value') {
	            if(vm.newElement.node_type=='field'){
	                vm.newElement.value.regions = [];
	                vm.newElement.value.regions.push(value_coordinates);
	                newannotation.uuid =  vm.newElement.temp_id;
	                vm.newElement.value_id = newannotation.uuid;
	                vm.newElement.value.temp_id = vm.newElement.value_id;
	                $scope.annotations.push(newannotation);
	            }else{
	                vm.newElement.regions = [];
	                vm.newElement.regions.push(value_coordinates);
	                newannotation.uuid =  vm.newElement.temp_id;
	                vm.newElement.value_id = newannotation.uuid;
	                $scope.annotations.push(newannotation);
	            }
	        }else if(vm.newElement.clickType == 'list'){
	            for(var i=0;i<vm.newElement.children.length;i++){
	                if(vm.newElement.children[i].is_changed){
	                    vm.newElement.children[i].regions = [];
	                    vm.newElement.children[i].regions.push(value_coordinates);
	                    newannotation.uuid =  vm.newElement.children[i].temp_id;
	                    vm.newElement.children[i].value_id = newannotation.uuid;
	                    $scope.annotations.push(newannotation);
	                }
	            }
	        }
	        UI.disableRect();
	    };
	    vm.newcell = false;
	    vm.editTableCoordinates = function (node, fullnode, line, col, newtable) {
	        fullnode.is_changed = true;
	        vm.labelEditAnnotation = false;
	        vm.labelEditAnnotation = false;
	        let p = document.getElementById("pdf-annotate-edit-overlay");
	        if (p) {
	            p.remove();
	        }
	        vm.clickedtype = newtable;
	        vm.newcelldata = node;
	        vm.newcelldata.line_no = line;
	        vm.newcelldata.col_no = col;
	        if (node.regions.length == 0) {
	            enableDrawRect("area");
	            setrectColor("transparent");
	            vm.newcell = true;
	            vm.newcelldata.temp_id = node.temp_id;
	            return;
	        } else {
	            node.is_edit_coordinates = true;
	            var annotationnode = node.regions[0];
	            annotationnode.class = "Annotation";
	            annotationnode.page = node.regions[0].page_num;
	            annotationnode.type = "area";
	            annotationnode.line_no = line;
	            annotationnode.col_no = col;
	            if (annotationnode.uuid == undefined) {
	                annotationnode.uuid = node.temp_id;
	            }
	            annotationnode.documentId = vm.pdfSrc;
	            annotationnode.x = annotationnode.x1;
	            annotationnode.y = annotationnode.y1;
	            annotationnode.width = annotationnode.x2;
	            annotationnode.height = annotationnode.y2;
	            setrectColor("transparent");
	            disableDrawRect("area");
	            setHeilight(annotationnode.uuid);
	            vm.resetDeletedElement();
	
	            handleannotationrightclick(annotationnode, node);
	        }
	    }
	    vm.editCoordinates = function (node) {
	        vm.labelEditAnnotation = false;
	//        $scope.updannotation = {};
	//        $scope.updatewithnewannotationNode = false;
	        let p = document.getElementById("pdf-annotate-edit-overlay");
	        if (p) {
	            p.remove();
	        }
	        if(node.node_type=='field'){
	                if(node.value.regions==undefined || node.value.regions.length==0){
	                         enableDrawRect("area");
	                         setrectColor("transparent");
	                         vm.newCoordinatesForUpdateNodeFlag = angular.copy(true);
	                         vm.newCoordinatesForUpdateNodeObj = node.value;
	                }
	                else{
	                    node.is_edit_coordinates = true;
	                    var annotationnode = node.value.regions[0];
	                    annotationnode.class = "Annotation";
	                    annotationnode.page = node.value.regions[0].page_num;
	                    annotationnode.type = "area";
	                    if (annotationnode.uuid == undefined) {
	                        annotationnode.uuid = node.value.temp_id;
	                    }
	                    annotationnode.documentId = vm.pdfSrc;
	                    annotationnode.x = annotationnode.x1;
	                    annotationnode.y = annotationnode.y1;
	                    annotationnode.width = annotationnode.x2;
	                    annotationnode.height = annotationnode.y2;
	                    setrectColor("transparent");
	                    disableDrawRect("area");
	                    setHeilight(annotationnode.uuid);
	                    vm.resetDeletedElement();
	                    handleannotationrightclick(annotationnode, node.value);
	                }
	        }else{
	                if(node.regions==undefined || node.regions.length==0){
	                     enableDrawRect("area");
	                     setrectColor("transparent");
	                     vm.newCoordinatesForUpdateNodeFlag = angular.copy(true);
	                     vm.newCoordinatesForUpdateNodeObj = node;
	        //             $scope.updatewithnewannotationNode = true;
	        //             $scope.updannotation = node;
	                }
	                else{
	                    node.is_edit_coordinates = true;
	                    var annotationnode = node.regions[0];
	                    annotationnode.class = "Annotation";
	                    annotationnode.page = node.regions[0].page_num;
	                    annotationnode.type = "area";
	                    if (annotationnode.uuid == undefined) {
	                        annotationnode.uuid = node.temp_id;
	                    }
	                    annotationnode.documentId = vm.pdfSrc;
	                    annotationnode.x = annotationnode.x1;
	                    annotationnode.y = annotationnode.y1;
	                    annotationnode.width = annotationnode.x2;
	                    annotationnode.height = annotationnode.y2;
	                    setrectColor("transparent");
	                    disableDrawRect("area");
	                    setHeilight(annotationnode.uuid);
	                    vm.resetDeletedElement();
	                    handleannotationrightclick(annotationnode, node);
	                }
	        }
	    };
	
	   vm.editLabelCoordinates = function (node) {
	        vm.labelEditAnnotation = true;
	        vm.resetLabelDeletedElement();
	        let p = document.getElementById("pdf-annotate-edit-overlay");
	        if (p) {
	            p.remove();
	        }
	        if(node.key.regions==undefined || node.key.regions.length==0){
	             enableDrawRect("area");
	             setrectColor("transparent");
	             vm.newCoordinatesForUpdateNodeFlag = angular.copy(true);
	             vm.newCoordinatesForUpdateNodeObj = node;
	//             $scope.updatewithnewannotationNode = true;
	//             $scope.updannotation = node;
	        }
	        else{
	            node.is_edit_coordinates = true;
	            var annotationnode = node.key.regions[0];
	            annotationnode.class = "Annotation";
	            annotationnode.page = node.key.regions[0].page_num;
	            annotationnode.type = "area";
	            if (annotationnode.uuid == undefined) {
	                annotationnode.uuid = node.temp_id_key;
	            }
	            annotationnode.documentId = vm.pdfSrc;
	            annotationnode.x = annotationnode.x1;
	            annotationnode.y = annotationnode.y1;
	            annotationnode.width = annotationnode.x2;
	            annotationnode.height = annotationnode.y2;
	            setrectColor("transparent");
	            disableDrawRect("area");
	            setHeilight(annotationnode.uuid);
	
	
	            handleannotationrightclick(annotationnode, node);
	        }
	    };
	
	    vm.updateNode = function (annotation, type, obj) {
	        if(annotation.regions==undefined)
	        annotation.regions=[];
	        annotation.regions.push({});
	        annotation.regions[0].x1 = annotation.x;
	        annotation.regions[0].y1 = annotation.y;
	        annotation.regions[0].x2 = annotation.x + annotation.width;
	        annotation.regions[0].y2 = annotation.y + annotation.height;
	        annotation.regions[0].page_num = annotation.page;
	
	
	        //need to handle list of coordinate list annotations
	        // for (var i = 0; i < node.regions.length; i++) {
	        //     var page_num = node.regions[i].page_num
	        //     if ($scope.selector[page_num].x1 != undefined) {
	        //         node.regions[i].x1 = $scope.selector[page_num].x1;
	        //         node.regions[i].y1 = $scope.selector[page_num].y1;
	        //         node.regions[i].x2 = $scope.selector[page_num].x2;
	        //         node.regions[i].y2 = $scope.selector[page_num].y2;
	        //         node.changedField = true;
	        //     }
	        // }
	
	        if (type == "table") {
	            vm.updaterightsideObject(annotation, $scope.extractOutput);
	            //vm.saveCell(vm.newcelldata.line_no, vm.newcelldata.col_no, annotation, annotation);
	        }
	        else {
	            vm.updaterightsideObject(annotation, $scope.extractOutput);
	            // for (var i = 0; i < $scope.extractOutput.length; i++) {
	            //     if ($scope.extractOutput[i].section_id == annotation.section_id) {
	            //         for (var j = 0; j < $scope.extractOutput[i].elements.length; j++) {
	            //             if ($scope.extractOutput[i].elements[j].id == annotation.id) {
	            //                 $scope.extractOutput[i].elements[j].regions[0].x1 = annotation.x;
	            //                 $scope.extractOutput[i].elements[j].regions[0].y1 = annotation.y;
	            //                 $scope.extractOutput[i].elements[j].regions[0].x2 = annotation.x + annotation.width;
	            //                 $scope.extractOutput[i].elements[j].regions[0].y2 = annotation.y + annotation.height;
	            //                 $scope.extractOutput[i].elements[j].regions[0].page_num = annotation.page;
	            //             }
	            //         }
	            //     }
	            // }
	
	            //vm.sendFeedback(annotation, 'edit');
	            $scope.updatewithnewannotationNode = false;
	            vm.newCoordinatesForUpdateNodeFlag = false;
	        }
	    }
	
	   vm.resetAllEvents = function(){
	
	        $scope.updannotation = {};
	        $scope.updatewithnewannotationNode = false;
	        vm.newCoordinatesForUpdateNodeFlag = false;
	        vm.newCoordinatesForUpdateNodeObj = {};
	        vm.newElement = {};
	        $scope.newNode = '';
	        vm.newcell = false;
	        $scope.croppingError = false;
	        $scope.cropMsg = '';
	        disableDrawRect("area");
	   };
	
	    vm.saveNewElement = function (node) {
	        if (vm.newElement.node_type != 'table' && vm.newElement.node_type != 'list') {
	            if(vm.newElement.regions==undefined){
	                vm.newElement.regions = [];
	            }
	
	            node.children.unshift(vm.newElement);
	            vm.updateDrawer("value", vm.newElement);
	            $scope.rowHighlight = [];
	            $scope.rowHighlight[vm.newElement.temp_id] = 'highlightClass';
	            vm.newElement = {};
	            $scope.newNode = '';
	        }
	        else if (vm.newElement.node_type == 'table') {
	            for (var i=0; i<vm.newElement.cells_reconstructed.length; i++) {
	                var size = Object.keys(vm.newElement.cells_reconstructed[i]).length;
	                for (var j=0; j<size; j++) {
	                    if(vm.newElement.cells_reconstructed[i][j].regions!=undefined){
	                        vm.newElement.cells_reconstructed[i][j].coordinates_copy=vm.newElement.cells_reconstructed[i][j].regions;
	                        vm.newElement.cells_reconstructed[i][j].original_text = vm.newElement.cells_reconstructed[i][j].text;
	                    }
	                }
	            }
	            node.children.unshift(vm.newElement);
	            vm.newElement = {};
	            $scope.newNode = '';
	        }
	        else if(vm.newElement.node_type == 'list'){
	
	            for(var i=0;i<vm.newElement.children.length;i++){
	                delete vm.newElement.children[i].is_changed;
	                vm.updateDrawer("value", vm.newElement.children[i]);
	            }
	            node.children.unshift(vm.newElement);
	            vm.newElement = {};
	            $scope.newNode = '';
	        }
	        $scope.setOrderForSpecificTime();
	
	    }
	
	
	
	    vm.saveNewnode = function (node) {
	        vm.saveNewElement(node);
	
	    };
	
	    vm.completeReview = function () {
	        var text = $scope.recordData.properties.filename;
	        var doc_id = $scope.currentDocId;
	        vm.feedbackObj = [];
	        $scope.extractOutputForFeedback = angular.copy($scope.extractOutput)
	        vm.recursiveForFeedback($scope.extractOutputForFeedback);
	        var temp = {}
	        temp.root_id = $scope.root_id;
	        temp.feedback = vm.feedbackObj;
	        temp.doc_id = $scope.doc_id;
	        ngDialog.open({
	            template: 'confirmEntityBox',
	            controller: ['$scope', '$state', function ($scope, $state) {
	                $scope.activePopupText = 'Are you sure you want to complete the review for ' + "'" + text + "'" + ' ?';
	                $scope.onConfirmActivation = function () {
	                    ngDialog.close();
	                    extractionService.completeFedBack({ 'data': temp, 'sess_id': vm.sess_id }).then(function (resp) {
	                        if (resp.data.status == "success") {
	
	                            $.UIkit.notify({
	                                message: resp.data.msg,
	                                status: 'success',
	                                timeout: 3000,
	                                pos: 'top-center'
	                            });
	
	                            if (vm.loginDataObj.role == "sv") {
	                                $state.go("app.supervisorDocumentsList", { "id": $stateParams.queue });
	                            }
	                            else {
	                                $state.go("app.agentDocumentsList", { "id": $stateParams.queue });
	                            }
	                        }
	                        else {
	                            $.UIkit.notify({
	                                message: resp.data.msg,
	                                status: 'danger',
	                                timeout: 3000,
	                                pos: 'top-center'
	                            });
	                        }
	                    }, function (err) {
	                        $.UIkit.notify({
	                            message: "Internal server error",
	                            status: 'warning',
	                            timeout: 3000,
	                            pos: 'top-center'
	                        });
	                    });
	
	                };
	            }]
	        });
	    };
	
	
	    $scope.sample = { 'select': true };
	
	    $scope.changeCheckBoX = function (node) {
	       node.is_changed = true;
	       // vm.sendFeedback(node, 'edit', 'omr');
	    }
	    $scope.changeRadio = function (index, obj, options, node) {
	        for (var i = 0; i < options.length; i++) {
	            if (i != index) {
	                options[i].value.text = false;
	            }
	        }
	        node.is_changed = true;
	        //vm.sendFeedback(node, 'edit', 'omr');
	
	    };
	
	    $scope.goToCaseDashboard = function () {
	        if ($scope.loginData.role == "sv") {
	            $state.go("app.supervisorDocumentsList", { "id": $stateParams.queue });
	        }
	        else {
	            $state.go("app.agentDocumentsList", { "id": $stateParams.queue });
	        }
	    };
	
	    vm.stateChangeFunct = function (obj) {
	        extractionService.saveChangedState({ 'data': obj, 'sess_id': vm.sess_id }).then(function (resp) {
	            if (resp.data.status == "success") {
	                $.UIkit.notify({
	                    message: resp.data.msg,
	                    status: 'success',
	                    timeout: 3000,
	                    pos: 'top-center'
	                });
	                if ($scope.loginData.role == "sv") {
	                    $state.go("app.supervisorDocumentsList", { "id": $stateParams.queue });
	                }
	                else {
	                    $state.go("app.agentDocumentsList", { "id": $stateParams.queue });
	                }
	            }
	            else {
	                $.UIkit.notify({
	                    message: resp.data.msg,
	                    status: 'danger',
	                    timeout: 3000,
	                    pos: 'top-center'
	                });
	            }
	        }, function (err) {
	            $.UIkit.notify({
	                message: "Internal server error",
	                status: 'warning',
	                timeout: 3000,
	                pos: 'top-center'
	            });
	        });
	    };
	
	
	    vm.clearStateSelection = function(){
	        vm.changedState = "";
	        if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	            $scope.$apply();
	        }
	    };
	
	    vm.saveStateChange = function(){
	        var obj = {"doc_state": vm.changedState,"doc_id": $stateParams.id};
	        if(vm.changedState != ""){
	            ngDialog.open({ template: 'confirmEntityBox',
	              preCloseCallback:function(){ vm.clearStateSelection() },
	              controller: ['$scope','$state' ,function($scope,$state) {
	                  $scope.activePopupText = 'Would you like to send this document to '+vm.changedState+'?';
	                  $scope.onConfirmActivation = function (){
	                        vm.stateChangeFunct(obj);
	                        ngDialog.close();
	                  };
	              }]
	            });
	        }
	     };
	
	    /* Div horizontal scroll*/
	
	    vm.jumpLeft = function (value, node) {
	        event.preventDefault();
	        var width = $('.test' + node.temp_id).width();
	        if (value.columnStart > 1) {
	            value.columnStart = value.columnStart - $scope.headersDisplayLength;
	            value.columnEnd = value.columnStart + ($scope.headersDisplayLength - 1);
	        }
	        $('.content' + node.temp_id).animate({
	            scrollLeft: "-=" + width
	        }, "slow");
	    }
	    vm.jumpRight = function (value, node) {
	        event.preventDefault();
	        var width = $('.test' + node.temp_id).width();
	        //console.log("width" + width)
	        if (value.columnEnd < value.headings_copy.length) {
	            value.columnStart = value.columnStart + $scope.headersDisplayLength;
	            value.columnEnd = value.columnStart + ($scope.headersDisplayLength - 1);
	            if (value.columnEnd > value.headings_copy.length) {
	                value.columnEnd = value.headings_copy.length;
	            }
	
	        }
	        $('.content' + node.temp_id).animate({
	            scrollLeft: "+=" + width
	        }, "slow");
	
	    }
	
	
	
	
	
	
	    $scope.targetValue = '';
	
	
	
	    vm.pickDeep = function (collection, identity, propValue, thisArg) {
	        var object;
	        var picked = _.pick(collection, identity, thisArg);
	        var collections = _.pick(collection, _.isObject, thisArg);
	        _.each(collections, function (item, key, collection) {
	            if (_.isArray(item)) {
	                object = _.reduce(item, function (result, value) {
	                    var picked = vm.pickDeep(value, identity, propValue, thisArg);
	                    if (!_.isEmpty(picked)) {
	                        if (value[identity[0]] == propValue) {
	                            $scope.targetValue = value["text"];
	                        }
	
	                    }
	                    return result;
	                }, []);
	            } else {
	                object = vm.pickDeep(item, identity, propValue, thisArg);
	            }
	            if (!_.isEmpty(object)) {
	                picked[key] = object;
	            }
	
	        });
	        return collection;
	    }
	
	
	    vm.changedValue = function(node,type,value){
	        if(type=='field'){
	            if(value=='name'){
	                if(node.original_label===node.key.name){
	                   node.is_changed = false;
	                }
	                else{
	                   node.is_changed = true;
	                }
	            }
	            else if(value=='label'){
	               if(node.original_label===node.key.text){
	                   node.is_changed = false;
	               }
	               else{
	                   node.is_changed = true;
	               }
	            }
	            else{
	                if(node.original_text===node.value.text){
	                   node.is_changed = false;
	                }
	                else{
	                   node.is_changed = true;
	                }
	            }
	        }
	        else if(type=='list'){
	        }
	        else{
	            if(node.original_text===node.text){
	                   node.is_changed = false;
	            }
	            else{
	                   node.is_changed = true;
	            }
	        }
	    };
	
	    vm.getEXtractedValue = function (node, type, fullnode) {
	        //$scope.obj =  vm.pickDeep($scope.deepCopyOfSectionsData, ["insight_id"],node.insight_id);
	
	        if (type == 'field' || type == 'omr') {
	            if(type == 'field'){
	                if (node.key.name != undefined && node.key.name != '') {
	                    if (node.original_label != undefined)
	                        node.key.name = angular.copy(node.original_label);
	                }
	                else {
	                    if (node.key.text != undefined && node.key.text != undefined) {
	                        node.key.text = angular.copy(node.original_label);
	                    }
	                }
	            }
	            else if(type == 'omr'){
	                if (node.text != undefined && node.text != undefined) {
	                        node.text = angular.copy(node.original_label);
	                        node.fields = angular.copy(node.groups_copy);
	                }
	            }
	            if(type=='omr'){
	                if(node.coordinates_copy!=undefined){
	                    node.regions = angular.copy(node.coordinates_copy);
	                    var index= -1;
	                    for (var i = 0; i < $scope.annotations.length; i++) {
	                        if ($scope.annotations[i].uuid == node.temp_id) {
	                            if(node.regions.length>0){
	                                $scope.annotations[i].x = node.regions[0].x1;
	                                $scope.annotations[i].width = node.regions[0].x2 - node.regions[0].x1;
	                                $scope.annotations[i].y = node.regions[0].y1;
	                                $scope.annotations[i].height = node.regions[0].y2 - node.regions[0].y1;
	                                $scope.MyStoreAdapter.editAnnotation(vm.pdfSrc,$scope.annotations[i].page,$scope.annotations[i]);
	                                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.temp_id + "']");
	                                var p = allrect[0]
	                                p.setAttribute("x",$scope.annotations[i].x);
	                                p.setAttribute("y",$scope.annotations[i].y);
	                                p.setAttribute("width",$scope.annotations[i].width);
	                                p.setAttribute("height",$scope.annotations[i].height);
	                                break;
	                            }else{
	                                index = i;
	                                $scope.annotations.splice(index, 1);
	                                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.temp_id+ "']")
	                                allrect[0].remove();
	                                break;
	                            }
	                        }
	                    }
	
	
	
	                }
	                node.fields = angular.copy(node.groups_copy);
	
	
	            }
	
	            if(node.label_coordinates_copy!=undefined){
	                    node.key.regions = angular.copy(node.label_coordinates_copy);
	                    var index= -1;
	                    for (var i = 0; i < $scope.annotations.length; i++) {
	                        if ($scope.annotations[i].uuid == node.temp_id_key) {
	                            if(node.key.regions.length>0){
	                                $scope.annotations[i].x = node.key.regions[0].x1;
	                                $scope.annotations[i].width = node.key.regions[0].x2 - node.key.regions[0].x1;
	                                $scope.annotations[i].y = node.key.regions[0].y1;
	                                $scope.annotations[i].height = node.key.regions[0].y2 - node.key.regions[0].y1;
	                                $scope.MyStoreAdapter.editAnnotation(vm.pdfSrc,$scope.annotations[i].page,$scope.annotations[i]);
	                                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.temp_id_key + "']");
	                                var p = allrect[0]
	                                p.setAttribute("x",$scope.annotations[i].x);
	                                p.setAttribute("y",$scope.annotations[i].y);
	                                p.setAttribute("width",$scope.annotations[i].width);
	                                p.setAttribute("height",$scope.annotations[i].height);
	                                break;
	                            }else{
	                                index = i;
	                                $scope.annotations.splice(index, 1);
	                                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" +node.temp_id_key+ "']")
	                                allrect[0].remove();
	                                break;
	                            }
	                        }
	                    }
	
	
	
	            }
	
	        }
	
	        else {
	
	                if (node.original_text != undefined){
	                    if(type=='list' || type=='table'){
	                        node.text = angular.copy(node.original_text);
	                    }
	                    else{
	                       if(node.node_type=='field'){
	                         node.value.text = angular.copy(node.original_text);
	                       }
	                       else{
	                         node.text = angular.copy(node.original_text);
	                       }
	                    }
	                    node.is_changed = false;
	                }
	                if(node.node_type=='field'){
	                    if(node.value.coordinates_copy!=undefined){
	                        node.value.regions = angular.copy(node.value.coordinates_copy);
	                        var index= -1;
	                        for (var i = 0; i < $scope.annotations.length; i++) {
	                            if ($scope.annotations[i].uuid == node.value.temp_id) {
	                                if(node.value.regions.length>0){
	                                    $scope.annotations[i].x = node.value.regions[0].x1;
	                                    $scope.annotations[i].width = node.value.regions[0].x2 - node.value.regions[0].x1;
	                                    $scope.annotations[i].y = node.value.regions[0].y1;
	                                    $scope.annotations[i].height = node.value.regions[0].y2 - node.value.regions[0].y1;
	                                    $scope.MyStoreAdapter.editAnnotation(vm.pdfSrc,$scope.annotations[i].page,$scope.annotations[i]);
	                                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.value.temp_id + "']");
	                                    var p = allrect[0]
	                                    p.setAttribute("x",$scope.annotations[i].x);
	                                    p.setAttribute("y",$scope.annotations[i].y);
	                                    p.setAttribute("width",$scope.annotations[i].width);
	                                    p.setAttribute("height",$scope.annotations[i].height);
	                                    break;
	                                }else{
	                                    index = i;
	                                    $scope.annotations.splice(index, 1);
	                                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.value.temp_id+ "']")
	                                    allrect[0].remove();
	                                    break;
	                                }
	                            }
	                        }
	
	
	
	                    }
	                }else{
	                    if(node.coordinates_copy!=undefined){
	                        node.regions = angular.copy(node.coordinates_copy);
	                        var index= -1;
	                        for (var i = 0; i < $scope.annotations.length; i++) {
	                            if ($scope.annotations[i].uuid == node.temp_id) {
	                                if(node.regions.length>0){
	                                    $scope.annotations[i].x = node.regions[0].x1;
	                                    $scope.annotations[i].width = node.regions[0].x2 - node.regions[0].x1;
	                                    $scope.annotations[i].y = node.regions[0].y1;
	                                    $scope.annotations[i].height = node.regions[0].y2 - node.regions[0].y1;
	                                    $scope.MyStoreAdapter.editAnnotation(vm.pdfSrc,$scope.annotations[i].page,$scope.annotations[i]);
	                                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.temp_id + "']");
	                                    var p = allrect[0]
	                                    p.setAttribute("x",$scope.annotations[i].x);
	                                    p.setAttribute("y",$scope.annotations[i].y);
	                                    p.setAttribute("width",$scope.annotations[i].width);
	                                    p.setAttribute("height",$scope.annotations[i].height);
	                                    break;
	                                }else{
	                                    index = i;
	                                    $scope.annotations.splice(index, 1);
	                                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.temp_id+ "']")
	                                    allrect[0].remove();
	                                    break;
	                                }
	                            }
	                        }
	
	
	
	                    }
	                }
	
	        }
	
	        if(type=='table'){
	            fullnode.is_changed = true;
	        }
	    };
	
	    vm.getHeader = function (header) {
	        if (header.length > 0) {
	            return 'headerColor';
	        }
	        return 'emptyHeader';
	
	    }
	
	    vm.getColoumn = function (column) {
	        if (column == undefined) {
	            return 'emptyHeader'
	        }
	
	    }
	
	    vm.removeHeadersCalculation = function (node) {
	        var originalHeadingLength = node.tables.headings.length - node.tables.headings_copy.length;
	        for (var s = 0; s < originalHeadingLength; s++) {
	            node.tables.headings.splice(node.tables.headings.length - 1, 1)
	        }
	    };
	
	    vm.sendTableFeedBack = function (temp) {
	        extractionService.saveFeedback({ 'data': temp, 'sess_id': vm.sess_id }).then(function (resp) {
	            if (resp.data.status == "success") {
	
	            }
	            else {
	                $.UIkit.notify({
	                    message: resp.data.msg,
	                    status: 'danger',
	                    timeout: 3000,
	                    pos: 'top-center'
	                });
	            }
	        }, function (err) {
	            $.UIkit.notify({
	                message: "Internal server error",
	                status: 'warning',
	                timeout: 3000,
	                pos: 'top-center'
	            });
	        });
	    };
	
	    vm.saveCell = function (pindex, index, data, node) {
	        var obj = {
	            "col_no": index,
	            "line_no": pindex,
	            "text": data.text,
	            "coordinates": data.regions,
	            "feedback_type": "edit",
	            "insight_id": node.insight_id
	        }
	        var reqObj = {}
	        reqObj.id = node.id;
	        reqObj.doc_id = $scope.currentDocId;
	        reqObj.request_type = "save_cell";
	        reqObj.feedback = [];
	        reqObj.feedback.push(obj);
	
	        vm.sendTableFeedBack(reqObj);
	    };
	
	    vm.insertColumn = function (index, node, type, event) {
	        var index = index;
	        if (type == 'below')
	            index = index + 1;
	        var column_no = angular.copy(index);
	
	        var originalHeadingLength = node.headings_reconstructed.length - node.headings_copy.length;
	        for (var s = 0; s < originalHeadingLength; s++) {
	            node.headings_reconstructed.splice(node.headings_reconstructed.length - 1, 1)
	        }
	        node.headings_reconstructed.splice(index, 0, ['']);
	        vm.getTableheadersCalculation(node);
	        for (var i = 0; i < node.cells_reconstructed.length; i++) {
	            var copyObj = angular.copy(node.cells_reconstructed[i]);
	            var size = Object.keys(node.cells_reconstructed[i]).length + 1;
	            node.cells_reconstructed[i] = {};
	            for (var j = 0; j < size; j++) {
	                if (j >= index) {
	                    if (j == index) {
	                        node.cells_reconstructed[i][j] = { text: "", confidence: 100, temp_id: $scope.uniqueIdGenerator(), regions: [], id: $scope.uniqueIdGenerator(), new_cell: true };
	                    }
	                    else {
	                        node.cells_reconstructed[i][j] = angular.copy(copyObj[j - 1])
	                    }
	                }
	                else {
	                    node.cells_reconstructed[i][j] = angular.copy(copyObj[j])
	                }
	            }
	        }
	        node.is_changed = true;
	
	
	
	
	
	
	    }
	
	    vm.deleteColumn = function (index, node, event) {
	        var index = index;
	        var originalHeadingLength = node.headings_reconstructed.length - node.headings_copy.length;
	        for (var s = 0; s < originalHeadingLength; s++) {
	           node.headings_reconstructed.splice(node.headings_reconstructed.length - 1, 1)
	        }
	        node.headings_reconstructed.splice(index, 1);
	        vm.getTableheadersCalculation(node);
	        for (var i = 0; i < node.cells_reconstructed.length; i++) {
	            for (var j = 0; j < $scope.annotations.length; j++) {
	                if (node.cells_reconstructed[i][index].temp_id == $scope.annotations[j].uuid) {
	                    $scope.annotations.splice(j, 1);
	                    var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + node.cells_reconstructed[i][index].temp_id + "']")
	                    allrect[0].remove();
	                    break;
	                }
	            }
	        }
	        for (var i = 0; i < node.cells_reconstructed.length; i++) {
	            var copyObj = angular.copy(node.cells_reconstructed[i]);
	            var size = Object.keys(node.cells_reconstructed[i]).length - 1;
	            node.cells_reconstructed[i] = {};
	            for (var j = 0; j < size; j++) {
	                if (j >= index) {
	                    node.cells_reconstructed[i][j] = angular.copy(copyObj[j + 1])
	                }
	                else {
	                    node.cells_reconstructed[i][j] = angular.copy(copyObj[j])
	                }
	            }
	        }
	        node.is_changed = true;
	
	
	
	    };
	
	    vm.insertRow = function (index, node, type) {
	        var index = index;
	        if (type == 'below')
	            index = index + 1;
	        var row_no = angular.copy(index);
	        var size = Object.keys(node.headings_copy).length;
	        var obj = {};
	        for (var i = 0; i < size; i++) {
	            obj[i] = { text: "", confidence: 100, regions: [],  temp_id: $scope.uniqueIdGenerator(), id: $scope.uniqueIdGenerator(),  new_cell: true }
	        }
	        node.cells_reconstructed.splice(index, 0, obj);
	        node.is_changed = true;
	
	
	    };
	
	    vm.tableValueChange = function(node){
	        node.is_changed = true;
	    };
	    vm.omrValueChange = function(node){
	        node.is_changed = true;
	    };
	
	    vm.updateColumnName = function (node, name, index) {
	        if (node.insight_id != undefined) {
	            var obj = {
	                "col_no": index,
	                "col_name": name,
	                "feedback_type": "edit",
	                "insight_id": node.insight_id
	            }
	            var reqObj = {}
	            reqObj.id = node.id;
	            reqObj.doc_id = $scope.currentDocId;
	            reqObj.request_type = "save_col_name";
	            reqObj.feedback = [];
	            reqObj.feedback.push(obj);
	
	            vm.sendTableFeedBack(reqObj);
	
	        }
	    };
	
	    vm.deleteRow = function (index, node) {
	        var size1 = Object.keys(node.cells_reconstructed[index]).length
	        node.cells_reconstructed.splice(index, 1);
	        node.is_changed = true;
	
	    };
	
	    vm.changeNewElement = function (type) {
	        if(type=='field'){
	            vm.elementObj('field');
	        }else{
	            vm.elementObj();
	        }
	        delete vm.newElement.regions;
	        var index = 0;
	        if(vm.newElement.label_id!=undefined){
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == vm.newElement.label_id) {
	                    index = i;
	                    break;
	                }
	            }
	            if (index > -1) {
	                $scope.annotations.splice(index, 1);
	                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + vm.newElement.label_id + "']")
	                allrect[0].remove();
	            }
	
	
	        }
	        var index = 0;
	        if(vm.newElement.value_id!=undefined){
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == vm.newElement.value_id) {
	                    index = i;
	                    break;
	                }
	            }
	            if (index > -1) {
	                $scope.annotations.splice(index, 1);
	                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + vm.newElement.value_id + "']")
	                allrect[0].remove();
	            }
	
	
	        }
	        delete vm.newElement.label_id;
	        delete vm.newElement.value_id;
	
	        if(type == 'table') {
	            vm.newElement.cells_reconstructed = []
	            vm.newElement.headings_reconstructed = [];
	            for (var i = 0; i < 3; i++) {
	                vm.newElement.headings_reconstructed .push(['']);
	            }
	            vm.newElement.cells_reconstructed = [];
	            vm.getTableheadersCalculation(vm.newElement);
	            var size = Object.keys(vm.newElement.headings_copy).length;
	            for (var j = 0; j < 3; j++) {
	                var obj = {};
	                for (var i = 0; i < size; i++) {
	                    obj[i] = { text: "", confidence: 100, regions: [], original_text:'',coordinates_copy:[],  temp_id: $scope.uniqueIdGenerator(), id: $scope.uniqueIdGenerator(), new_cell: true }
	                }
	
	                vm.newElement.cells_reconstructed.push(obj);
	            }
	        }
	
	        if(type=='list'){
	            vm.newElement.children = [];
	            var obj = {};
	            obj.text = '';
	            obj.regions = [];
	            obj.coordinates_copy = [];
	            obj.original_text = '';
	            obj.temp_id = vm.newElement.temp_id+"_"+$scope.uniqueIdGenerator();
	            obj.confidence = 100;
	            vm.newElement.children.push(obj);
	
	        }
	    }
	
	    vm.myFunction = function (event, id) {
	        document.getElementsByClassName("myDropdown" + id)[0].classList.toggle("show");
	        if (!event.target.matches('.dropbtn')) {
	
	            var dropdowns = document.getElementsByClassName("dropdown-content");
	            var i;
	            for (i = 0; i < dropdowns.length; i++) {
	                var openDropdown = dropdowns[i];
	                if (openDropdown.classList.contains('show')) {
	                    openDropdown.classList.remove('show');
	                }
	            }
	        }
	    }
	
	    vm.myFunctionRow = function (event, id) {
	        document.getElementsByClassName("myDropdownRow" + id)[0].classList.toggle("show");
	        if (!event.target.matches('.dropbtn')) {
	
	            var dropdowns = document.getElementsByClassName("dropdown-content2");
	            var i;
	            for (i = 0; i < dropdowns.length; i++) {
	                var openDropdown = dropdowns[i];
	                if (openDropdown.classList.contains('show')) {
	                    openDropdown.classList.remove('show');
	                }
	            }
	        }
	    }
	    vm.collapsed = {};
	    $scope.chnageIcon =function(collapse,temp_id){
	        vm.collapsed[temp_id] = !vm.collapsed[temp_id];
	        console.log("collapse==>", vm.collapsed[temp_id]);
	    };
	
	    document.getElementById('content-wrapper').addEventListener('scroll', function (e) {
	        $scope.current_page = Math.round(e.target.scrollTop / PAGE_HEIGHT) + 1;
	
	//        if ($scope.current_page == 1) {
	//
	//           var disablePage = document.querySelectorAll("div[data-page-number='" + $scope.current_page + "']");
	//           if(disablePage){
	//               disablePage[0].style["border-color"] = "red";
	//           }else{
	//               disablePage[0].style["border-color"] = "transparent";
	//           }
	//        }
	        if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	            $scope.$apply();
	        }
	
	    });
	
	
	}];

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	module.exports = "<script type=\"text/ng-template\" id=\"tree1.html\">\n    {$data.name$}\n\n    <ul class=\"tree\">\n        <li ng-repeat=\"data in data.nodes\" ng-include=\"'tree1.html'\"></li>\n    </ul>\n</script>\n<script type=\"text/ng-template\" id=\"confirmEntityBox\">\n    <div class=\"popup-header\">\n        <label class=\"text-primary\"> Confirm Action </label>\n        <hr class=\"popup-hr\"/>\n    </div>\n    <div class=\"popup-body\">\n        <div class=\"text-info\" style=\"padding:10px;font-size:16px;\"> {$ activePopupText $} </div>\n        <br>\n        <label class=\"custom-checkbox\" style=\"margin-left:9px;\">\n            <span>Do not show this message again ?</span>\n          <input type=\"checkbox\" ng-model=\"ec.showPopup.popup\"/>\n          <span class=\"checkmark\" style=\"top:3px;\"></span>\n        </label>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n                <button class=\"btn btn-primary right\" ng-click=\"onConfirmActivation(ec.showPopup.popup)\"> Confirm</button>\n            </div>\n        </div>\n    </div>\n</script>\n<!--<div class=\"row custom-header\">-->\n<!--<div class=\"col-lg-12 col-md-12 col-sm-12 text-right\" style=\"margin-top:15px;\" ng-show=\"showNavigation\">-->\n<!--<span>{$ no_of_records $}</span> / {$ total_records $}<span></span>-->\n<!--<a style=\"text-decoration:none;\" ng-click=\"ec.navigatePage('prev')\" ng-class=\"no_of_records==1?'prevCursor':''\">< Previous</a>-->\n<!--<a style=\"margin-left:25px;text-decoration:none;\" ng-click=\"ec.navigatePage('next')\" ng-class=\"no_of_records==total_records?'nextCursor':''\">Next ></a>-->\n<!--</div>-->\n<!--</div>-->\n<div class=\"row custom-header\" style=\"padding-left:10px;\">\n    <div class=\"col-lg-3 col-md-3 col-sm-3 no-padding extraction-title-container review-breadcrumb\">\n        <!-- <ol class=\"breadcrumb\">\n                <li><a ui-sref=\"app.agentDashboard\">Queues</a></li>\n                <li class=\"breadcrumb-item \">\n                        <a class=\"breadcrumb-heading\" ng-click=\"goToCaseDashboard()\">{ $currentQueueName $}</a>\n                </li>\n                <li class=\"breadcrumb-item active\" >\n                        <div class=\"extraction-title\" title=\"{$ recordData.properties.filename $}\"><img src=\"./static/ref-app/app/images/cleanImage.png\" style=\"width:15px;\"/>\n                              {$ recordData.properties.filename $}</div>\n                </li>\n        </ol> -->\n\n        <ol class=\"breadcrumb\">\n            <li>\n                <a ui-sref=\"app.agentDashboard\">\n                        <span class=\"ext-title\">\n                                Queues\n                            </span>\n                </a> \n                <span class=\"ext-title\" style=\"width: 10px;color:#555\"> > </span>\n            </li>\n            <li class=\"breadcrumb-item \">\n                <a ng-click=\"goToCaseDashboard()\">\n                    <span class=\"ext-title\">\n                        {$ currentQueueName $}\n                    </span>\n                    <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                </a>\n            </li>\n            <li class=\"breadcrumb-item \" ng-if=\"parentfilename\">\n                   \n                        <span class=\"ext-title\">\n                            {$ parentfilename $}\n                        </span>\n                        <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                   \n                </li>\n            <li class=\"breadcrumb-item active\">\n                <span class=\"ext-title\">\n                    {$ recordData.properties.filename $}</span>\n                <span class=\"breadcrumbhover\">\n                    <img ng-if=\"recordData.properties.filename\" src=\"./static/ref-app/app/images/breadcrumb-1.png\" class=\"breadcrumbimg\" />\n                    <div id=\"breadcrumbdiv\" class=\"hoverbreadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li>Queues</li>\n                            <li class=\"breadcrumb-item \">\n                                {$ currentQueueName $}\n                            </li>\n                            <li class=\"breadcrumb-item\" ng-if=\"parentfilename\">\n                                {$ parentfilename $}\n                            </li>\n                            <li class=\"breadcrumb-item active\">\n                                <span class=\"ext-title\">\n                                    {$ recordData.properties.filename $}</span>\n                            </li>\n                        </ol>\n                    </div>\n                </span>\n            </li>\n        </ol>\n    </div>\n\n    <div class=\"col-lg-9 col-md-9 col-sm-9 text-right no-padding\">\n        <div class=\"row\" style=\"display:flex;align-items:center;margin-top: 3px;float:right\">\n            <div style=\"width: 140px;float: left;display: inline-block;\">\n                <span class=\"scoresHeading\">Confidence Score:</span>\n                <span class=\"label-style\">{$ extractedData.data.document_confidence_score | number:2 $}%</span>\n            </div>\n            <div style=\"width: 130px;float: left;display: inline-block;\">\n                <span class=\"scoresHeading\">Attributes Extracted:</span>\n                <span class=\"label-style\">{$extractedData.data.attributes_extracted $}</span>\n            </div>\n            <div style=\"width:50px;display: inline-block;float: left;text-align: center;color:#9e9e9e;\">\n                |\n            </div>\n            <div class=\"filter-cls\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"accepted\"></span>\n                    <label style=\"font-weight: 400;margin-bottom:0px;\">Accepted [{$extractedData.data.accept_count $}]</label>\n                    <input type=\"checkbox\" ng-model=\"checkObj.accept\" ng-change=\"ec.changeIntaraction('accept',checkObj.accept)\">\n                    <span class=\"checkmark\"></span>\n                </label>\n            </div>\n\n            <div class=\"filter-cls\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"corrected\"></span>\n                    <label style=\"font-weight: 400;margin-bottom:0px;\">Corrected [{$extractedData.data.correct_count\n                        $}]</label>\n                    <input type=\"checkbox\" ng-model=\"checkObj.correct\" ng-change=\"ec.changeIntaraction('correct',checkObj.correct)\" />\n                    <span class=\"checkmark\"></span>\n                </label>\n\n            </div>\n            <div class=\"filter-cls\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"reviewed\"></span>\n                    <label style=\"font-weight: 400;margin-bottom:0px;\">Needs Review\n                        <span class=\"reviewValue\">[{$extractedData.data.review_required $}]</span>\n                    </label>\n                    <input type=\"checkbox\" ng-model=\"checkObj.review\" ng-change=\"ec.changeIntaraction('review',checkObj.review)\" />\n                    <span class=\"checkmark\"></span>\n                </label>\n            </div>\n            <div style=\"width: 35px;float: left;display: inline-block;text-align:center;\" ng-click=\"ec.completeFedBack()\">\n                <i class=\"fa fa-floppy-o\" style=\"font-size:24px;color: #42aae1;\"></i>\n            </div>\n            <div style=\"width: 90px;float: left;display: inline-block;padding-left: 15px;\">\n                <select class=\"form-control headerSelectBox\" ng-model=\"ec.changedState\" ng-change=\"ec.saveStateChange()\"\n                    style=\"border: 1px solid #50b6e7;\">\n                    <option value=\"\">Move To </option>\n                    <option ng-repeat=\"(key,value) in reviewStatesList\" value=\"{$ value.doc_state $}\" ng-disabled=\"!value.active\">{$\n                        key $}</option>\n                </select>\n            </div>\n            <div style=\"width: 90px;float: left;display: inline-block;margin-left:15px;\">\n                <button class=\"btn btn-custom btn-subheader\" ng-click=\"ec.completeReview()\">DONE</button>\n\n            </div>\n        </div>\n    </div>\n\n    <!--key-->\n</div>\n\n\n\n<div class=\"row row-eq-height reviewPage extraction\" ng-show=\"(ec.documentType != 'digital' && ec.documentType != 'email')\"\n    style=\"height:{$ height $}px;overflow-y:auto;\">\n\n    <div class=\"col-sm-6 col-md-6 col-xs-12 col-lg-6 custom-rightPanel no-padding\" id=\"actual\">\n        <div class=\"row\" ng-if=\"showUnknown && recordData.doc_type!='excel'\">\n            <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 text-right\">\n                <div class=\"btn-group text-center\">\n                    <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"ec.zoomOut()\"><i class=\"fa fa-minus-circle\"\n                            aria-hidden=\"true\"></i></button>\n                    <button type=\"button\" class=\"btn btn-default btn-zoom btn-magnifier\" ng-click=\"ec.zoomReset()\"><img\n                            src=\"/static/ref-app/app/images/zoomIcon.png\" style=\"width: 18px;\" />\n                    </button>\n                    <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"ec.zoomIn()\"><i class=\"fa fa-plus-circle\"\n                            aria-hidden=\"true\"></i>\n                    </button>\n\n\n                </div>\n                <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"ec.disableSelector()\">\n                    Reset\n                </button>\n            </div>\n            <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 text-right\">\n                <div ng-if=\"showUnknown\" style=\"display: inline-block;\">\n                    <!--<div class=\"pagination\" ng-show=\"no_of_pages>1\">-->\n                    <!--<a ng-repeat=\"(key,value) in pagesInfo\" ng-click=\"ec.changeDocumentInfo(value.page_no)\" ng-class=\"current_page==value.page_no?'active':''\">{$ value.page_no $}</a>-->\n                    <!--</div>-->\n                    <div ng-show=\"no_of_pages>1\">\n                        <span>\n                            <button class=\"btn pagination-button\" ng-disabled=\"current_page==1\" ng-click=\"ec.changePageNumUnknown('prev')\"><i\n                                    class=\"fa fa-chevron-left\" style=\"color:white;font-size:12px;\"></i></button>\n                        </span>\n                        <span class=\"pagination-textBox\">\n                            <input type=\"number\" class=\"pagination-text\" ng-model=\"current_page\" ng-keyup=\"ec.keyEnterUnknown($event)\" />\n                        </span>\n                        <span>\n                            <button class=\"btn pagination-button\" ng-disabled=\"current_page==no_of_pages\" ng-click=\"ec.changePageNumUnknown('next')\"><i\n                                    class=\"fa fa-chevron-right\" style=\"color:white;font-size:12px;\"></i></button>\n                        </span>\n                        <span> of {$ no_of_pages $}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row pdf-extraction-new\" id=\"scrollImage\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12\">\n                <!--<div id=\"ImageLocation\">-->\n                <!--&lt;!&ndash;<div  ng-if=\"showUnknown\">&ndash;&gt;-->\n                <!--&lt;!&ndash;<div ng-repeat='path in imagePaths track by $index' id='page_{$ path.page_no $}' ng-class=\"(path.is_bad!=undefined && path.is_bad) ? 'errorImage' : ''\" name=\"{$ path.page_no $}\" class='post'>&ndash;&gt;-->\n                <!--&lt;!&ndash;{$ path.page_no $}&ndash;&gt;-->\n                <!--&lt;!&ndash;&lt;!&ndash;<div class=\"alert alert-danger\" ng-hide=\"false\" id=\"badImage{$ $index $}\">&ndash;&gt;&ndash;&gt;-->\n                <!--&lt;!&ndash;&lt;!&ndash;<p><i class=\"fa fa-exclamation-triangle\"></i> Looks like a low quality page found.Unable to extract elements</p>&ndash;&gt;&ndash;&gt;-->\n                <!--&lt;!&ndash;&lt;!&ndash;</div>&ndash;&gt;&ndash;&gt;-->\n                <!--&lt;!&ndash;<div class='panel panel-default' mr-image mr-src='path.file_path' mr-max width='auto' mr-selector='selector[$index+1]' mr-drawer='drawer[$index+1]'></div>&ndash;&gt;-->\n                <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                <!--</div>-->\n                <div class=\"toolbar\" style=\"display:none;\">\n                    <button class=\"cursor\" type=\"button\" title=\"Cursor\" data-tooltype=\"cursor\">➚</button>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"rectangle\" type=\"button\" title=\"Rectangle\" data-tooltype=\"area\">&nbsp;</button>\n                    <button class=\"highlight\" type=\"button\" title=\"Highlight\" data-tooltype=\"highlight\">&nbsp;</button>\n                    <button class=\"strikeout\" type=\"button\" title=\"Strikeout\" data-tooltype=\"strikeout\">&nbsp;</button>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"text\" type=\"button\" title=\"Text Tool\" data-tooltype=\"text\"></button>\n                    <select class=\"text-size\"></select>\n                    <div class=\"text-color\"></div>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"pen\" type=\"button\" title=\"Pen Tool\" data-tooltype=\"draw\">✎</button>\n                    <select class=\"pen-size\"></select>\n                    <div class=\"pen-color\"></div>\n\n                    <div class=\"spacer\"></div>\n\n                    <button class=\"comment\" type=\"button\" title=\"Comment\" data-tooltype=\"point\">🗨</button>\n\n                    <div class=\"spacer\"></div>\n\n                    <select class=\"scale\">\n                        <option value=\".17\">17%</option>\n                        <option value=\".25\">25%</option>\n                        <option value=\".33\">33%</option>\n                        <option value=\".5\">50%</option>\n                        <option value=\"1\">100%</option>\n                        <option value=\"1.33\">133%</option>\n                        <option value=\"1.5\">150%</option>\n                        <option value=\"2\">200%</option>\n                    </select>\n\n                    <a href=\"javascript://\" class=\"rotate-ccw\" title=\"Rotate Counter Clockwise\">⟲</a>\n                    <a href=\"javascript://\" class=\"rotate-cw\" title=\"Rotate Clockwise\">⟳</a>\n\n                    <div class=\"spacer\"></div>\n\n                    <a href=\"javascript://\" class=\"clear\" title=\"Clear\">×</a>\n                </div>\n                <div id=\"loadingpdf\" class=\"loadingdoc\">Please wait document is loading...\n                    <br />\n                    <center><i class=\"fa fa-cog fa-spin fa-2x fa-fw margin-bottom\"></i></center>\n                </div>\n                <div id=\"content-wrapper\" style=\"height:{$ pdfHeight $}px;overflow-y:scroll;\">\n                    <div id=\"viewer\" class=\"pdfViewer\"></div>\n                </div>\n                <div id=\"comment-wrapper\" style=\"display:none;\">\n                    <h4>Comments</h4>\n                    <div class=\"comment-list\">\n                        <div class=\"comment-list-container\">\n                            <div class=\"comment-list-item\">No comments</div>\n                        </div>\n                        <form class=\"comment-list-form\" style=\"display:none;\">\n                            <input type=\"text\" placeholder=\"Add a Comment\" />\n                        </form>\n                    </div>\n                </div>\n                <div id=\"annotationdiv\" class=\"annotation-wrapper\">\n\n                </div>\n            </div>\n            <div class=\"col-lg-12 col-md-12 col-sm-12\" ng-if=\"recordData.doc_type=='excel'\">\n                <div ng-bind-html=\"ec.renderHTMLData()\"></div>\n                <div class=\"row\" ng-if=\"recordData.doc_type=='excel'\">\n                    <div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12 excel-footer\" style=\"background-color:aliceblue;text-align:left;\">\n                        <div class=\"btn-group\" role=\"group\">\n                            <button type=\"button\" class=\"btn btn-sheet excel-btn\" ng-class=\"excelBtnArr[$index]\" style=\"\n            border-right: 1px solid black;\"\n                                ng-repeat=\"data in  pagesInfo\" ng-click=\"getSheetData($index)\">Sheet {$ $index+1 $}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm-6 col-md-6 col-lg-6 col-xs-12 image-style domainHierarchyDiv customColumnPadding\" id=\"scrollDiv2\"\n        style=\"background: #f4f4f4;\">\n\n        <script type=\"text/ng-template\" id=\"nodes_renderer2.html\">\n                              <div ui-tree-handle class=\"tree-node tree-node-content\"\n                                   data-nodrag style=\"padding:0px;margin-top:10px;\">\n                                    <div class=\"hoveredRow  {$ rowHighlight[node.temp_id] $}\"  ng-if=\"node.node_type=='field'\" ng-click=\"ec.getCurrentValue(node)\">\n                                        <i class=\"fa fa-trash hideOnHover\"  ng-click=\"deleteField(node);$event.stopPropagation();\" style=\"cursor:pointer;\"></i>\n                                        <div class=\"row\" ng-show=\"template_type=='unknown'\">\n                                             <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding\">\n                                                 <img src=\"/static/ref-app/app/images/key.png\" class=\"img-icons\"/>\n                                                 <span class=\"ExtractedHeading\">Key :</span>\n                                             </div>\n                                             <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 no-padding\">\n                                                <div class=\"show-image\">\n                                                    <div class=\"hover-div\">\n                                                         <div class=\"row\">\n                                                             <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                    <span  ng-click=\"ec.getEXtractedValue(node,'field');$event.stopPropagation();\">\n                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>\n                                                                    </span>\n                                                             </div>\n                                                             <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                    <span>\n                                                                        <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[node.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editLabelCoordinates(node);$event.stopPropagation();\"/>\n                                                                        <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[node.temp_id]\" ng-click=\"ec.acceptCoordinates(node);$event.stopPropagation();\"/>\n                                                                    </span>\n\n                                                             </div>\n                                                         </div>\n                                                     </div>\n                                                    <span>\n                                                        <input type=\"text\" class=\"textboxStyle\" ng-model=\"node.key.text\" ng-blur=\"ec.changedValue(node,'field','label')\"/>\n                                                    </span>\n                                                    <span ng-class=\"fieldCriteria(node)\" >{$ node.key.confidence | number:0 $}%</span>\n                                                </div>\n                                             </div>\n                                        </div>\n                                        <div class=\"row\" ng-show=\"template_type!='unknown'\">\n                                             <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding\">\n                                                 <img src=\"/static/ref-app/app/images/key.png\" class=\"img-icons\"/>\n                                                 <span class=\"ExtractedHeading\">Key :</span>\n                                             </div>\n                                             <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 no-padding\">\n                                                <div>\n                                                    <span>\n                                                        <span class=\"textboxStyle\">{$ node.key.name $} </span>\n                                                        <span ng-class=\"fieldCriteria(node)\" >{$ node.key.confidence | number:0 $}%</span>\n\n                                                    </span>\n                                                </div>\n                                             </div>\n                                        </div>\n                                        <div class=\"row\" style=\"margin-top:10px;\">\n                                            <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 no-padding\">\n                                                <img src=\"/static/ref-app/app/images/value.png\" class=\"img-icons\"/>\n                                                <span class=\"ExtractedHeading\">Value :</span>\n                                            </div>\n                                            <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 no-padding\">\n                                                <div class=\"show-image\">\n                                                     <div class=\"hover-div\">\n                                                         <div class=\"row\">\n                                                             <div class=\"col-lg-6 col-md-6 col-sm-6 no-padding\">\n                                                                    <span  ng-click=\"ec.getEXtractedValue(node);$event.stopPropagation();\">\n                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>\n                                                                    </span>\n                                                             </div>\n                                                             <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                    <span>\n                                                                        <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[node.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editCoordinates(node);$event.stopPropagation();\"/>\n                                                                        <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[node.temp_id]\" ng-click=\"ec.acceptCoordinates(node);$event.stopPropagation();\"/>\n                                                                    </span>\n\n                                                             </div>\n                                                         </div>\n                                                     </div>\n                                                    <input class=\"textboxStyle\" type=\"text\" ng-model=\"node.value.text\" ng-blur=\"ec.changedValue(node,'field','value')\"/>\n                                                    <span ng-class=\"fieldCriteria(node)\" >{$ node.value.confidence | number:0 $}%</span>\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"hoveredRow  {$ rowHighlight[node.temp_id] $} test{$ node.temp_id $}\" ng-if=\"node.node_type=='table'\" style=\"padding:0px;\">\n                                        <form name=\"myForm\">\n                                            <div class=\"row\">\n\n                                                     <div style=\"padding:10px;display: flex;justify-content: space-between;\">\n                                                         <div>\n                                                         <img src=\"/static/ref-app/app/images/table.png\" style=\"width:15px\">\n                                                         <sapn class=\"ExtractedHeading\"> Table </sapn>\n                                                             </div>\n                                                         <i class=\"fa fa-trash table-hover-i\"  ng-click=\"deleteField(node,'table');$event.stopPropagation();\"></i>\n                                                     </div>\n                                                     <div class=\"center content{$ node.temp_id $}\">\n                                                            <div class=\"internal \"  ng-class=\"ec.getHeader(heading)\" ng-repeat=\"heading in node.headings_reconstructed track by $index\" style=\"padding:10px;\">\n                                                                  <input type=\"text\" class=\"textboxStyle\" ng-model=\"heading[0]\" placeholder=\"column name\" ng-blur=\"ec.tableValueChange(node)\">\n                                                                  <div class=\"dropdown\" style=\"width: max-content !important;\">\n                                                                      <button class=\"btn btn-pagination dropdown-toggle\"  type=\"button\" data-toggle=\"dropdown\">\n                                                                          <img src=\"/static/ref-app/app/images/Table_menu.png\" style=\"width:20px;\"/>\n                                                                      </button>\n\n                                                                      <ul class=\"dropdown-menu\" ng-class=\"(($index+1)%headersDisplayLength)==0?'rightDropdown':''\">\n                                                                        <li>\n                                                                            <a ng-click=\"ec.insertColumn($index,node,'above',$event)\">Insert Column left</a>\n                                                                        </li>\n                                                                          <li>\n                                                                            <a ng-click=\"ec.insertColumn($index,node,'below',$event)\">Insert Column Right</a>\n                                                                        </li>\n                                                                          <li>\n                                                                            <a ng-click=\"ec.deleteColumn($index,node,$event)\">Delete Column</a>\n                                                                        </li>\n\n                                                                      </ul>\n                                                                    </div>\n                                                            </div>\n                                                            <div class=\"scroll\">\n                                                                 <div  ng-repeat=\"data in node.cells_reconstructed track by $index\" ng-class=\"node.cells_reconstructed.length-1 == $index ? 'sampleBottom' : ''\" style=\"line-height: 5px;\" ng-init=\"outerIndex = $index\">\n                                                                      <div class=\"internal\" ng-class=\"ec.getColoumn(data[$index])\" ng-repeat=\"heading in node.headings_reconstructed track by $index\" class=\"{$ tableRow[data[$index].insight_id] $}\" ng-init=\"innerIndex = $index\">\n\n                                                                          <div class=\"dropdown2\">\n                                                                              <button class=\"btn btn-pagination dropdown-toggle\"  type=\"button\" data-toggle=\"dropdown\" ng-show=\"$index==0 || ($index%headersDisplayLength==0)\">\n                                                                                  <img src=\"/static/ref-app/app/images/Table_menu.png\" style=\"width:20px;\"/>\n                                                                              </button>\n\n                                                                              <ul class=\"dropdown-menu\">\n                                                                                <li>\n                                                                                    <a ng-click=\"ec.insertRow($parent.$index,node,'above')\">Insert Row Above</a>\n                                                                                </li>\n                                                                                  <li>\n                                                                                    <a ng-click=\"ec.insertRow($parent.$index,node,'below')\">Insert Row below</a>\n                                                                                </li>\n                                                                                  <li>\n                                                                                    <a ng-click=\"ec.deleteRow($parent.$index,node)\">Delete Row</a>\n                                                                                </li>\n\n                                                                              </ul>\n                                                                          </div>\n                                                                          <div class=\"row {$ data[$index].temp_id $}\" style=\"padding:21px;\" ng-click=\"ec.getCurrentValue(data[$index]);$event.stopPropagation();\">\n                                                                              <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                                                                <div class=\"show-image\">\n                                                                                       <div class=\"hover-div\" style=\"width: 70%;left:25%;\">\n                                                                                         <div class=\"row\">\n                                                                                             <div class=\"col-lg-6 col-md-6 col-sm-6\" style=\"padding:0\">\n                                                                                                    <span ng-click=\"ec.getEXtractedValue(data[$index],'table',node);$event.stopPropagation();\">\n                                                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\" class=\"editImagesWidth\" style=\"width:60%;\"/>\n                                                                                                    </span>\n                                                                                             </div>\n                                                                                             <div class=\"col-lg-6 col-md-6 col-ms-6\"  style=\"padding:0\">\n                                                                                                    <span>\n                                                                                                        <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[data[$index].temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editTableCoordinates(data[$index],node,outerIndex,innerIndex,false);$event.stopPropagation();\"  style=\"width:60%;\"/>\n                                                                                                        <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[data[$index].temp_id]\" ng-click=\"ec.acceptCoordinates(data[$index],'table',node,outerIndex,innerIndex,true);$event.stopPropagation();\"  style=\"width:60%;\"/>\n                                                                                                    </span>\n                                                                                             </div>\n                                                                                         </div>\n                                                                                       </div>\n                                                                                       <span ng-if=\"data[$index].text!=undefined\" ng-hide=\"ec.hideElement(data[$index])\" class=\"{$ data[$index].temp_id $}\">\n                                                                                           <input type=\"text\" class=\"textboxStyle {$ rowHighlight[data[$index].temp_id] $}\" ng-model=\"data[$index].text\" ng-blur=\"ec.tableValueChange(node)\"/>\n                                                                                           <span ng-class=\"fieldCriteria(data[$index])\">{$ data[$index].confidence | number:0 $}\n                                                                                              <span ng-show=\"data[$index].confidence!=undefined\">%</span>\n                                                                                          </span>\n                                                                                       </span>\n                                                                                </div>\n                                                                              </div>\n                                                                          </div>\n                                                                      </div>\n                                                                 </div>\n                                                             </div>\n                                                     </div>\n                                                    <div class=\"row\">\n                                                        <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\">\n                                                            <!--<div ng-click=\"clickRow(node,data[$index],$parent.$index,heading[0])\">\n                                                                <span ng-show=\"data[$index].insight_id!=tableEleId\" >{$ data[$index].text $}</span>\n                                                                <input type=\"text\" ng-model=\"data[$index].text\" ng-show=\"data[$index].insight_id==tableEleId\" >\n                                                            </div> -->\n                                                            <div>\n                                                                <!--<a  ng-click=\"ec.AddNewRow(node)\">-->\n                                                                    <!--<i class=\"fa fa-plus\"></i>-->\n                                                                    <!--Add New Row-->\n                                                                <!--</a>-->\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 text-right\" ng-show=\"node.headings_copy.length>headersDisplayLength\">\n                                                            <span>\n                                                                showing {$ node.columnStart $} - {$ node.columnEnd $} of {$ node.headings_copy.length $} columns\n                                                            </span>\n                                                            <button class=\"btn btn-pagination\" ng-click=\"ec.jumpLeft(node,node)\" ng-disabled=\"node.columnStart==1\">\n                                                                <img src=\"/static/ref-app/app/images/left.png\"/>\n                                                            </button>\n                                                            <button class=\"btn btn-pagination\" ng-click=\"ec.jumpRight(node,node)\" ng-disabled=\"node.columnEnd==node.headings_copy.length\">\n                                                               <img src=\"/static/ref-app/app/images/right.png\"/>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                            </div>\n                                        </form>\n\n                                    </div>\n\n                                    <div class=\"hoveredRow  {$ rowHighlight[node.temp_id] $}\" ng-if=\"node.node_type=='list'\" ng-click=\"ec.getCurrentValue(node)\">\n                                        <div class=\"row\">\n                                            <i class=\"fa fa-trash hideOnHover2\" ng-click=\"deleteField(node); $event.stopPropagation();\" style=\"cursor:pointer;\"></i>\n                                        </div>\n                                        <div class=\"row\">\n                                            <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 no-padding\">\n                                                <img src=\"/static/ref-app/app/images/lists.png\" class=\"img-icons\"/>\n                                                <span class=\"ExtractedHeading\">List</span>\n                                            </div>\n                                            <div class=\"col-lg-10 col-md-10 col-sm-10 col-xs-10\">\n                                                <ul class=\"list-group\">\n                                                   <li class=\"list-group-item customListGroup  {$ data.temp_id $}\" ng-repeat=\"data in node.children\" ng-click=\"ec.getCurrentValue(data);$event.stopPropagation()\" ng-hide=\"ec.hideElement(data)\" >\n                                                       <div class=\"show-image\">\n                                                           <div class=\"hover-div\" style=\"width:17%;left: 63%;\">\n                                                             <div class=\"row\">\n                                                                 <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 no-padding\">\n                                                                        <span ng-click=\"ec.getEXtractedValue(data,'list');$event.stopPropagation();\">\n                                                                            <img src=\"/static/ref-app/app/images/rotateLeft.png\" class=\"editImagesWidth\"/>\n                                                                        </span>\n                                                                 </div>\n                                                                 <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 no-padding\">\n                                                                        <span>\n                                                                            <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[data.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editCoordinates(data);$event.stopPropagation();\"/>\n                                                                        <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[data.temp_id]\" ng-click=\"ec.acceptCoordinates(data,'list',node);$event.stopPropagation();\"/>\n                                                                        </span>\n                                                                 </div>\n\n                                                             </div>\n                                                         </div>\n                                                           <input class=\"textboxStyle {$ rowHighlight[data.temp_id] $}\" type=\"text\" ng-model=\"data.text\" style=\"width:80%;\"/>\n                                                            <span ng-class=\"fieldCriteria(data)\">{$ data.confidence | number:0 $}%</span>\n                                                           <i class=\"fa fa-plus-circle\" ng-click=\"ec.addNewExistingListItem(node,$index);$event.stopPropagation();\"></i>\n                                                           <i class=\"fa fa-trash\" ng-click=\"ec.deleteExistingListItem(node,$index);$event.stopPropagation();\"></i>\n                                                       </div>\n                                                   </li>\n                                                </ul>\n                                            </div>\n\n                                        </div>\n                                    </div>\n\n                                    <div class=\"hoveredRow  {$ rowHighlight[node.temp_id] $}\" ng-if=\"node.node_type=='paragraph'\" ng-click=\"ec.getCurrentValue(node)\">\n                                        <i class=\"fa fa-trash hideOnHover2\"  ng-click=\"deleteField(node);$event.stopPropagation();\"></i>\n                                        <div class=\"row\" style=\"display:flex;\">\n                                            <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-2 no-padding\">\n                                                <img src=\"/static/ref-app/app/images/paragraph.png\" class=\"img-icons\"/>\n                                                <span class=\"ExtractedHeading\">Paragraph :</span>\n                                            </div>\n                                            <div class=\"col-lg-9 col-sm-9 col-md-9 col-xs-9 no-padding\">\n                                                <div class=\"show-image\">\n                                                    <div class=\"hover-div\"  style=\"width:17%;left: 80%;\">\n                                                         <div class=\"row\">\n                                                             <div class=\"col-lg-6 col-md-6 col-sm-6 no-padding\">\n                                                                    <span  ng-click=\"ec.getEXtractedValue(node);$event.stopPropagation();\">\n                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>\n                                                                    </span>\n                                                             </div>\n                                                             <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                    <span>\n                                                                        <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[node.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editCoordinates(node);$event.stopPropagation();\"/>\n                                                                        <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[node.temp_id]\" ng-click=\"ec.acceptCoordinates(node);$event.stopPropagation();\"/>\n                                                                    </span>\n                                                             </div>\n\n                                                         </div>\n                                                     </div>\n                                                    <textarea cols=\"50\" rows=\"4\" class=\"textboxStyle\" type=\"text\" ng-model=\"node.text\" style=\"width:100%;margin-bottom:0px;\" ng-blur=\"ec.changedValue(node,'paragraph','value')\"></textarea>\n                                                </div>\n                                            </div>\n                                            <div class=\"col-lg-1 col-sm-1 col-md-1 col-xs-1 no-padding\">\n                                                <div style=\"bottom: 0;position: absolute;margin-bottom:12px;\">\n                                                    <span ng-class=\"fieldCriteria(node)\">{$ node.confidence | number:0 $}%</span>\n                                                </div>\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <div class=\"hoveredRow {$ rowHighlight[node.temp_id] $}\" ng-if=\"node.node_type=='sentence'\" ng-click=\"ec.getCurrentValue(node)\">\n                                        <i class=\"fa fa-trash hideOnHover2\"  ng-click=\"deleteField(node);$event.stopPropagation();\"></i>\n                                        <div class=\"row\"  style=\"display:flex;\">\n                                            <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 no-padding\">\n                                                <img src=\"/static/ref-app/app/images/sentence.jpg\" class=\"img-icons\"/>\n                                                <span  class=\"ExtractedHeading\">Sentence</span>\n                                            </div>\n                                            <div class=\"col-lg-9 col-sm-9 col-md-9 col-xs-9 no-padding\">\n                                                <div class=\"show-image\">\n                                                    <div class=\"hover-div\" style=\"width: 17%;left: 80%;\">\n                                                         <div class=\"row\">\n                                                             <div class=\"col-lg-6 col-md-6 col-sm-6 no-padding\">\n                                                                    <span  ng-click=\"ec.getEXtractedValue(node);$event.stopPropagation();\">\n                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>\n                                                                    </span>\n                                                             </div>\n                                                             <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                    <span>\n                                                                        <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[node.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editCoordinates(node);$event.stopPropagation();\"/>\n                                                                        <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[node.temp_id]\" ng-click=\"ec.acceptCoordinates(node);$event.stopPropagation();\"/>\n                                                                    </span>\n                                                             </div>\n\n                                                         </div>\n                                                     </div>\n                                                    <textarea class=\"textboxStyle\" row=\"2\" cols=\"50\" style=\"width:100%;margin-bottom:0px;\" ng-model=\"node.text\" ng-blur=\"ec.changedValue(node,'sentence','value')\"></textarea>\n                                                </div>\n                                            </div>\n                                            <div class=\"col-lg-1 col-sm-1 col-md-1 col-xs-1 no-padding\">\n                                                <div style=\"bottom: 0;position: absolute;margin-bottom:10px;\">\n                                                    <span ng-class=\"fieldCriteria(node)\">{$ node.confidence | number:0 $}%</span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"hoveredRow  {$ rowHighlight[node.temp_id] $}\" ng-if=\"node.node_type=='heading'\" ng-click=\"ec.getCurrentValue(node)\">\n                                        <i class=\"fa fa-trash hideOnHover2\"  ng-click=\"deleteField(node);$event.stopPropagation();\"></i>\n                                        <div class=\"row\">\n                                            <div class=\"col-lg-3 col-sm-3 col-md-3 col-xs-3 no-padding\">\n                                                <img src=\"/static/ref-app/app/images/key.png\" class=\"img-icons\"/>\n                                                <span class=\"ExtractedHeading\">Heading:</span>\n                                            </div>\n                                            <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\">\n                                                <div class=\"show-image\">\n                                                    <div class=\"hover-div\">\n                                                         <div class=\"row\">\n                                                             <div class=\"col-lg-6 col-md-6 col-sm-6 no-padding\">\n                                                                    <span  ng-click=\"ec.getEXtractedValue(node);$event.stopPropagation();\">\n                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\" style=\"width:65%;\"/>\n                                                                    </span>\n                                                             </div>\n                                                             <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                    <span>\n                                                                        <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[node.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editCoordinates(node);$event.stopPropagation(); \" />\n                                                                        <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[node.temp_id]\" ng-click=\"ec.acceptCoordinates(node);$event.stopPropagation();\" />\n                                                                    </span>\n                                                             </div>\n                                                         </div>\n                                                     </div>\n                                                    <input class=\"textboxStyle\" type=\"text\" ng-model=\"node.text\" ng-blur=\"ec.changedValue(node,'heading','value')\"/>\n                                                <span ng-class=\"fieldCriteria(node)\">{$ node.confidence | number:0 $}%</span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"hoveredRow {$ rowHighlight[node.temp_id] $} omr\"  ng-if=\"node.node_type=='omr_field'\" ng-click=\"ec.getCurrentValue(node)\">\n                                        <div class=\"row\">\n                                            <div class=\"show-image2\">\n                                                        <div class=\"hover-div2\" style=\"width: 13%;left: 90%;\">\n                                                             <div class=\"row\">\n\n                                                                 <div class=\"col-lg-4 col-md-4 col-sm-4 no-padding\">\n                                                                       <span  ng-click=\"ec.getEXtractedValue(node,'omr');$event.stopPropagation();\">\n                                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>\n                                                                                    </span>\n                                                                 </div>\n                                                                 <div class=\"col-lg-4 col-md-4 col-sm-4 no-padding\">\n                                                                       <span>\n                                                                            <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[node.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editCoordinates(node);$event.stopPropagation(); \"/>\n                                                                            <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[node.temp_id]\" ng-click=\"ec.acceptCoordinates(node);$event.stopPropagation();\" />\n                                                                        </span>\n                                                                 </div>\n                                                                 <div class=\"col-lg-4 col-md-4 col-sm-4\" style=\"padding-left:5px;\">\n                                                                        <i class=\"fa fa-trash \"  ng-click=\"deleteField(node);$event.stopPropagation();\"></i>\n                                                                 </div>\n                                                             </div>\n                                                         </div>\n\n                                                        <div class=\"row\" ng-show=\"template_type=='unknown'\">\n                                                            <div class=\"col-lg-3 col-sm-3 col-md-3 col-xs-3 no-padding\">\n                                                                <img src=\"/static/ref-app/app/images/key.png\" class=\"img-icons\"/>\n                                                                <span class=\"ExtractedHeading\">Key</span>\n                                                            </div>\n                                                            <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\">\n                                                                <div>\n                                                                    <!--<div class=\"hover-div\" style=\"width: 10%;left: 65%;\">-->\n                                                                         <!--<div class=\"row\">-->\n                                                                             <!--<div class=\"col-lg-12 col-md-12 col-sm-12 no-padding\">-->\n                                                                                    <!--<span  ng-click=\"ec.getEXtractedValue(node,'omr');$event.stopPropagation();\">-->\n                                                                                        <!--<img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>-->\n                                                                                    <!--</span>-->\n                                                                             <!--</div>-->\n                                                                         <!--</div>-->\n                                                                     <!--</div>-->\n\n                                                                    <input class=\"textboxStyle\" type=\"text\"  ng-model=\"node.text\"/>\n                                                                    <span ng-class=\"fieldCriteria(node)\">{$ node.confidence | number:0 $}%</span>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"row\" ng-show=\"template_type!='unknown'\">\n                                                            <div class=\"col-lg-3 col-sm-3 col-md-3 col-xs-3 no-padding\">\n                                                                <img src=\"/static/ref-app/app/images/key.png\" class=\"img-icons\"/>\n                                                                <span class=\"ExtractedHeading\">Key</span>\n                                                            </div>\n                                                            <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\">\n                                                                <div>\n                                                                    <!--<div class=\"hover-div\" style=\"width: 10%;left: 65%;\">-->\n                                                                         <!--<div class=\"row\">-->\n                                                                             <!--<div class=\"col-lg-12 col-md-12 col-sm-12 no-padding\">-->\n                                                                                    <!--<span  ng-click=\"ec.getEXtractedValue(node,'omr');$event.stopPropagation();\">-->\n                                                                                        <!--<img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>-->\n                                                                                    <!--</span>-->\n                                                                             <!--</div>-->\n                                                                         <!--</div>-->\n                                                                     <!--</div>-->\n                                                                    <span class=\"textboxStyle\"> {$ node.name $} </span>\n\n                                                                    <span ng-class=\"fieldCriteria(node)\">{$ node.confidence | number:0 $}%</span>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"row\">\n                                                            <div class=\"col-lg-3 col-sm-3 col-md-3 col-xs-3 no-padding\">\n                                                                <img src=\"/static/ref-app/app/images/value.png\" class=\"img-icons\"/>\n                                                                <span class=\"ExtractedHeading\">Value</span>\n                                                            </div>\n                                                            <div class=\"col-lg-9 col-sm-9 col-md-9 col-xs-9 omrreviewlabel no-padding\">\n\n                                                                <div class=\"row\">\n                                                                    <div class=\"col-lg-4 col-sm-4 col-md-4 col-xs-4 omrAlign\" ng-repeat=\"options in node.fields\"\n                                                                                     ng-if=\"node.is_multiselect\">\n                                                                        <input type=\"checkbox\"  ng-model=\"options.value.text\"   style=\"margin-right: 5px;\" ng-change=\"changeCheckBoX(node);$event.stopPropagation();\"/>\n                                                                        <input class=\"textboxStyle\" type=\"text\" ng-model=\"options.key.text\" ng-blur=\"ec.omrValueChange(node)\">\n                                                                    </div>\n                                                                    <div class=\"col-lg-4 col-sm-4 col-md-4 col-xs-4 omrAlign\" ng-repeat=\"options in node.fields\"\n                                                                                     ng-if=\"!node.is_multiselect\">\n                                                                        <input type=\"radio\"  name=\"options + {$node.temp_id$}\" ng-checked=\"options.value.text\" ng-value=\"sample.select\" ng-model=\"options.value.text\" ng-click=\"changeRadio($index,options,node.fields,node);$event.stopPropagation();\"  id=\"sample{$node.temp_id $}\" style=\"margin-right: 5px;\">\n                                                                        <input class=\"textboxStyle\" type=\"text\" ng-model=\"options.key.text\" ng-blur=\"ec.omrValueChange(node)\" >\n                                                                    </div>\n                                                                </div>\n\n\n                                                                 <!--<div ng-repeat=\"options in node.groups[0].options\" ng-if=\"node.groups[0].is_multiOption\">-->\n                                                                     <!--<span>-->\n                                                                         <!--<input type=\"checkbox\"  ng-model=\"options.ischecked\"  ng-show=\"node.temp_id==selectedEleId\"/>-->\n                                                                     <!--</span>-->\n                                                                     <!--<span>-->\n                                                                        <!--<input class=\"textboxStyle\" type=\"text\" ng-model=\"options.label\" ng-show=\"node.temp_id==selectedEleId\"/>-->\n                                                                     <!--</span>-->\n\n                                                                 <!--</div>-->\n                                                                 <!--<div ng-repeat=\"options in node.groups[0].options\" ng-show=\"!node.groups[0].is_multiOption\">-->\n                                                                    <!--<span>-->\n                                                                            <!--<input type=\"radio\"  name=\"optionsedit + {$node.temp_id$}\" ng-checked=\"options.ischecked\" ng-value=\"sample.select\" ng-model=\"options.ischecked\" ng-change=\"changeRadio($index,options,node.groups[0].options)\" ng-show=\"node.temp_id==selectedEleId\" id=\"{$node.temp_id $}\">-->\n                                                                    <!--</span>-->\n                                                                     <!--<span>-->\n                                                                        <!--<input class=\"textboxStyle\" type=\"text\" ng-model=\"options.label\" ng-show=\"node.temp_id==selectedEleId\"/>-->\n                                                                     <!--</span>-->\n\n                                                                 <!--</div>-->\n                                                            </div>\n                                                        </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div ng-if=\"node.node_type=='section'\">\n                                        <div ui-tree-handle class=\"tree-node tree-node-content\"\n                                        data-nodrag ng-include=\"'nodes_renderer1.html'\" style=\"padding:0px;\">\n\n                                        </div>\n                                    </div>\n\n                              </div>\n                        </script>\n        <script type=\"text/ng-template\" id=\"nodes_renderer1.html\">\n                              <div ui-tree-handle class=\"tree-node tree-node-content\"\n                              <div ui-tree-handle class=\"tree-node tree-node-content\"\n                                   data-nodrag>\n                                  <div class=\"row row-eq-height\" style=\"height:30px;\">\n                                      <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 no-padding\">\n\n                                              <span ng-if=\"node.node_type!='attribute'\" style=\"padding-top:5px;cursor:pointer;margin-bottom:0px;\" ng-click=\"ec.getCurrentValue(node)\" >\n                                                     {$ node.name $}\n                                              </span>\n                                      </div>\n                                      <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 text-right no-padding\">\n                                          <a ng-click=\"ec.addNewNode(node)\" style=\"font-weight:600;color:#2aa8e8;font-size:10px;padding-right:10px;\" ng-show=\"template_type=='unknown'\">\n                                              <i class=\"fa fa-plus\" style=\"font-size:10px !important;\"></i>\n                                              Add Element\n                                          </a>\n                                          <a data-nodrag data-toggle=\"collapse\" class=\"nodetoggle\" ng-click=\"chnageIcon(ec.collapsed,node.temp_id)\" data-target=\".toggle{$ node.temp_id $}\" style=\"padding:7px;border-left:1px solid #ddd;\">\n                                              <span  ng-class=\"{'fa fa-caret-up': !ec.collapsed[node.temp_id],'fa fa-caret-down': ec.collapsed[node.temp_id]}\"></span>\n                                          </a>\n                                      </div>\n                                  </div>\n                              </div>\n                              <ol ui-tree-nodes=\"\" ng-model=\"node.children\" class=\"listedStyle collapse in olStyle1 toggle{$ node.temp_id $} row\" >\n                                  <li class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 \" ng-show=\"newNode==node.insight_id\" style=\"padding-left: 8px;padding-right: 8px;padding-top: 8px;\">\n                                     <div style=\"border:1px solid #ececec;\">\n                                      <div class=\"row\" style=\"padding-top:10px;\">\n                                            <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                                <div class=\"ExtractedHeading\">Select Type</div>\n                                            </div>\n                                            <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                                <!--<div class=\"ExtractedHeading\">Value</div>-->\n                                            </div>\n                                            <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                            </div>\n                                      </div>\n                                     <div class=\"row row-eq-height\" style=\"margin: 5px 0px 10px 0px;\">\n                                            <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-5\">\n                                                <select class=\"newattributeSelect\" style=\"width:100%;border:none;\" ng-model=\"ec.newElement.node_type\" ng-change=\"ec.changeNewElement(ec.newElement.node_type)\">\n                                                    <option ng-repeat=\"(d,key) in ec.keyOptions\" value=\"{$ d $}\">{$ key $}\n\t\t\t\t\t\t\t\t\t\t\t       </option>\n                                                </select>\n                                                <br>\n                                            </div>\n                                         <span ng-show=\"croppingError\" style=\"color:red\">{$ cropMsg $}</span>\n                                     </div>\n                                      <div ng-if=\"ec.newElement.node_type == 'field' || ec.newElement.node_type == 'heading' || ec.newElement.node_type == 'paragraph' || ec.newElement.node_type == 'sentence'\">\n                                          <div class=\"row row-eq-height\"  ng-show=\"ec.newElement.node_type == 'field'\">\n                                              <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8\">\n                                                  <div class=\"row row-eq-height\">\n                                                      <div class=\"col-lg-2 col-sm-2 col-xs-2 col-md-2 no-padding\">\n                                                          <img src=\"/static/ref-app/app/images/key.png\" class=\"img-icons\"/>\n                                                            <span class=\"ExtractedHeading\">Key :</span>\n                                                      </div>\n                                                      <div class=\"col-sm-8 col-md-8 col-xs-8 col-lg-8\">\n                                                          <div class=\"show-image\">\n                                                               <div class=\"hover-div\" style=\"width:35%;left:65%;\">\n                                                                 <div class=\"row\">\n                                                                     <div class=\"col-lg-6 col-md-6 col-sm-6 no-padding\">\n                                                                            <span ng-click=\"ec.getEXtractedValue(ec.newElement,'field');$event.stopPropagation();\">\n                                                                                <img src=\"/static/ref-app/app/images/rotateLeft.png\" class=\"editImagesWidth\"/>\n                                                                            </span>\n                                                                     </div>\n                                                                     <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                            <span>\n                                                                                <img src=\"/static/ref-app/app/images/Crop.png\" ng-click=\"ec.cropLabelText()\" ng-show=\"!ec.showLabelCrop\" style=\"width:20px;cursor:pointer;\"/>\n                                                                                <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"ec.showLabelCrop\" ng-click=\"ec.doneLabelCrop()\" style=\"width:20px;cursor:pointer;\"/>\n\n                                                                            </span>\n                                                                     </div>\n                                                                 </div>\n                                                             </div>\n                                                                <input class=\"newattributeSelect\" type=\"text\" placeholder=\"Type key Name\" ng-model=\"ec.newElement.key.text\" />\n                                                           </div>\n                                                      </div>\n                                                  </div>\n                                              </div>\n                                          </div>\n                                          <br>\n                                          <div class=\"row\">\n                                              <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8\">\n                                                  <div class=\"row row-eq-height\">\n                                                      <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-2 no-padding\">\n                                                          <img src=\"/static/ref-app/app/images/value.png\" class=\"img-icons\"/>\n                                                            <span class=\"ExtractedHeading\">Value :</span>\n                                                      </div>\n\n                                                      <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8\">\n                                                          <div class=\"show-image\">\n                                                               <div class=\"hover-div\" style=\"width:35%;left:65%;\">\n                                                                 <div class=\"row\">\n                                                                     <div class=\"col-lg-6 col-md-6 col-sm-6 no-padding\">\n                                                                            <span ng-click=\"ec.getEXtractedValue(ec.newElement);$event.stopPropagation();\">\n                                                                                <img src=\"/static/ref-app/app/images/rotateLeft.png\" class=\"editImagesWidth\"/>\n                                                                            </span>\n                                                                     </div>\n                                                                     <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                            <span>\n                                                                                <img src=\"/static/ref-app/app/images/Crop.png\" ng-click=\"ec.cropText()\" ng-show=\"!ec.showCrop\"  style=\"width:20px;cursor:pointer;\"/>\n                                                                                <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"ec.showCrop\" ng-click=\"ec.doneCrop()\" style=\"width:20px;cursor:pointer;\"/>\n                                                                            </span>\n                                                                     </div>\n                                                                 </div>\n                                                             </div>\n                                                                <input class=\"newattributeSelect\" ng-model=\"ec.newElement.value.text\" type=\"text\" placeholder=\"Type the Value\" ng-show=\"ec.newElement.node_type=='field'\"/>\n                                                               <input class=\"newattributeSelect\" ng-model=\"ec.newElement.text\" type=\"text\" placeholder=\"Type the Value\" ng-show=\"ec.newElement.node_type=='heading'\"/>\n                                                                <textarea cols=\"50\" rows=\"4\" class=\"textboxStyle\" type=\"text\" ng-model=\"ec.newElement.text\" style=\"width:100%;\" placeholder=\"Type the Value\" ng-show=\"ec.newElement.node_type=='paragraph' || ec.newElement.node_type=='sentence'\"></textarea>\n                                                           </div>\n                                                      </div>\n                                                  </div>\n                                              </div>\n                                          </div>\n                                          <br>\n                                          <div class=\"row\">\n                                                <div class=\"col-lg-12 colsm-12 col-md-12 col-xs-12 text-right\">\n                                                    <button class=\"btn  btn-custom\" ng-click=\"ec.saveNewnode(node)\">\n                                                        <i class=\"fa fa-floppy-o\" aria-hidden=\"true\" style=\"margin-left:7px;\"></i>\n                                                        Add\n                                                    </button>\n                                                    <button class=\"btn btn-cancel\" ng-click=\"ec.cancelNewnode()\" style=\"background-color: transparent;color: black;\">\n                                                        <i class=\"fa fa-times-circle-o\"></i>\n                                                        Cancel\n                                                    </button>\n                                                </div>\n                                          </div>\n                                      </div>\n                                      <div ng-if=\"ec.newElement.node_type == 'list'\">\n                                          <div>\n                                             <div class=\"row row-eq-height\">\n                                                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\n                                                    <img src=\"/static/ref-app/app/images/lists.png\" class=\"img-icons\"/>\n                                                    <span class=\"ExtractedHeading\">List</span>\n                                                </div>\n                                                <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8\">\n                                                    <ul class=\"list-group\">\n                                                       <li class=\"list-group-item customListGroup\" ng-repeat=\"data in ec.newElement.children\" ng-click=\"ec.getCurrentValue(data,'new');\">\n                                                           <div class=\"show-image\">\n                                                               <div class=\"hover-div\" style=\"width:17%;left:63%;\">\n                                                                 <div class=\"row\">\n                                                                     <div class=\"col-lg-6 col-md-6 col-sm-6 no-padding\">\n                                                                            <span ng-click=\"ec.getEXtractedValue(data,'list');$event.stopPropagation();\">\n                                                                                <img src=\"/static/ref-app/app/images/rotateLeft.png\" class=\"editImagesWidth\"/>\n                                                                            </span>\n                                                                     </div>\n                                                                     <div class=\"col-lg-6 col-md-6 col-ms-6 no-padding\">\n                                                                            <span>\n                                                                                <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[data.temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.cropListText(data,$index);$event.stopPropagation();\"$event.stopPropagation();\"/>\n                                                                            <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[data.temp_id]\" ng-click=\"ec.acceptCoordinates(data,'list',node);$event.stopPropagation();\"/>\n                                                                            </span>\n                                                                     </div>\n                                                                 </div>\n                                                             </div>\n                                                               <input class=\"textboxStyle\" type=\"text\" ng-model=\"data.text\" style=\"width:80%;height:20px;\" />\n                                                                <i class=\"fa fa-plus-circle\" style=\"font-size:18px;\" ng-click=\"ec.addNewListItem(ec.newElement,$index)\"></i>\n                                                                <i class=\"fa fa-trash\" style=\"font-size:18px;margin-left:10px;\" ng-click=\"ec.deleteNewListItem(ec.newElement,$index)\"></i>\n                                                           </div>\n                                                       </li>\n                                                    </ul>\n                                                </div>\n\n                                            </div>\n                                        </div>\n\n                                        <div class=\"row\">\n                                                <div class=\"col-lg-12 colsm-12 col-md-12 col-xs-12 text-right\">\n                                                    <button class=\"btn  btn-custom\" ng-click=\"ec.saveNewnode(node)\">\n                                                        <i class=\"fa fa-floppy-o\" aria-hidden=\"true\" style=\"margin-left:7px;\"></i>\n                                                        Add\n                                                    </button>\n                                                    <button class=\"btn btn-cancel\" ng-click=\"ec.cancelNewnode()\" style=\"background-color: transparent;color: black;\">\n                                                        <i class=\"fa fa-times-circle-o\"></i>\n                                                        Cancel\n                                                    </button>\n                                                </div>\n                                        </div>\n                                      </div>\n                                      <div ng-if=\"ec.newElement.node_type == 'table'\" class=\"test{$ ec.newElement.temp_id $}\">\n                                          <div class=\"row\">\n\n                                                 <div class=\"center content{$ ec.newElement.temp_id $}\">\n                                                          <div class=\"internal \"  ng-class=\"ec.getHeader(heading)\" ng-repeat=\"heading in ec.newElement.headings_reconstructed track by $index\" style=\"padding:10px;\" >\n                                                              <input type=\"text\" class=\"textboxStyle\" ng-model=\"heading[0] \" placeholder=\"column name\">\n                                                              <div class=\"dropdown\" style=\"width: max-content !important;\">\n                                                                  <button class=\"btn btn-pagination dropdown-toggle\"  type=\"button\" data-toggle=\"dropdown\">\n                                                                      <i class=\"fa fa-ellipsis-v\" ></i>\n                                                                  </button>\n\n                                                                  <ul class=\"dropdown-menu\" ng-class=\"(($index+1)%headersDisplayLength)==0?'rightDropdown':'something'\">\n                                                                    <li>\n                                                                        <a ng-click=\"ec.insertColumn($index,ec.newElement,'above',$event)\">Insert Column left</a>\n                                                                    </li>\n                                                                      <li>\n                                                                        <a ng-click=\"ec.insertColumn($index,ec.newElement,'below',$event)\">Insert Column Right</a>\n                                                                    </li>\n                                                                      <li>\n                                                                        <a ng-click=\"ec.deleteColumn($index,ec.newElement,$event)\">Delete Column</a>\n                                                                    </li>\n\n                                                                  </ul>\n                                                                </div>\n                                                          </div>\n                                                        <div class=\"scroll\">\n                                                             <div  ng-repeat=\"data in ec.newElement.cells_reconstructed track by $index\" ng-class=\"ec.newElement.cells_reconstructed.length-1 == $index ? 'sampleBottom2' : ''\" ng-init=\"outerIndex = $index\">\n                                                                      <div class=\"internal\" ng-class=\"ec.getColoumn(data[$index])\" ng-repeat=\"heading in ec.newElement.headings_reconstructed track by $index\" class=\"{$ tableRow[data[$index].insight_id] $}\" ng-init=\"innerIndex = $index\">\n\n                                                                          <div class=\"dropdown\" style=\"float: left;left:10px;\">\n                                                                  <button class=\"btn btn-pagination dropdown-toggle\"  type=\"button\" data-toggle=\"dropdown\" ng-show=\"$index==0 || ($index%headersDisplayLength==0)\">\n                                                                      <img src=\"/static/ref-app/app/images/Table_menu.png\" style=\"width:20px;\"/>\n                                                                  </button>\n\n                                                                  <ul class=\"dropdown-menu\" style=\"left:0px;\">\n                                                                                <li>\n                                                                                    <a ng-click=\"ec.insertRow($parent.$index,ec.newElement,'above')\">Insert Row Above</a>\n                                                                                </li>\n                                                                                <li>\n                                                                                    <a ng-click=\"ec.insertRow($parent.$index,ec.newElement,'below')\">Insert Row below</a>\n                                                                                </li>\n                                                                                  <li>\n                                                                                    <a ng-click=\"ec.deleteRow($parent.$index,ec.newElement)\">Delete Row</a>\n                                                                                </li>\n\n                                                                  </ul>\n                                                                </div>\n                                                                          <div class=\"row\" style=\"padding:16px;\" ng-click=\"ec.getCurrentValue(data[$index],'new');\">\n                                                                              <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n\n                                                                                <div class=\"show-image\">\n                                                                                       <div class=\"hover-div\" style=\"width: 70%;left:25%;\">\n                                                                                             <div class=\"row\">\n                                                                                                 <div class=\"col-lg-6 col-md-6 col-sm-6\" style=\"padding:0\">\n                                                                                                        <span ng-click=\"ec.getEXtractedValue(data[$index],'table');$event.stopPropagation();\">\n                                                                                                            <img src=\"/static/ref-app/app/images/rotateLeft.png\" class=\"editImagesWidth\" style=\"width:60%;\"/>\n                                                                                                        </span>\n                                                                                                 </div>\n                                                                                                 <div class=\"col-lg-6 col-md-6 col-ms-6\"  style=\"padding:0\">\n                                                                                                        <span>\n                                                                                                            <img src=\"/static/ref-app/app/images/Crop.png\"  ng-show=\"!coordinatesDisplay[data[$index].temp_id]\" class=\"editImagesWidth\" ng-click=\"ec.editTableCoordinates(data[$index],ec.newElement,outerIndex,innerIndex,true);$event.stopPropagation();\"  style=\"width:60%;\"/>\n                                                                                                            <img src=\"/static/ref-app/app/images/checked.png\"  class=\"editImagesWidth\" ng-show=\"coordinatesDisplay[data[$index].temp_id]\" ng-click=\"ec.acceptCoordinates(data[$index],'table');$event.stopPropagation();\"  style=\"width:60%;\"/>\n                                                                                                        </span>\n                                                                                                 </div>\n                                                                                             </div>\n                                                                                       </div>\n                                                                                       <span ng-if=\"data[$index].text!=undefined\" ng-hide=\"ec.hideElement(data[$index])\">\n                                                                                           <input type=\"text\" class=\"textboxStyle\" ng-model=\"data[$index].text\"/>\n                                                                                           <span ng-class=\"fieldCriteria(data[$index])\">{$ data[$index].confidence | number:0 $}\n                                                                                              <span ng-show=\"data[$index].confidence!=undefined\">%</span>\n                                                                                          </span>\n                                                                                       </span>\n                                                                                </div>\n                                                                              </div>\n                                                                          </div>\n                                                                      </div>\n                                                             </div>\n                                                         </div>\n                                                 </div>\n                                                 <div class=\"row\">\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\">\n                                                        <!--<div ng-click=\"clickRow(node,data[$index],$parent.$index,heading[0])\">\n                                                            <span ng-show=\"data[$index].insight_id!=tableEleId\" >{$ data[$index].text $}</span>\n                                                            <input type=\"text\" ng-model=\"data[$index].text\" ng-show=\"data[$index].insight_id==tableEleId\" >\n                                                        </div> -->\n                                                        <div>\n\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 text-right\" ng-show=\"ec.newElement.headings_copy.length>headersDisplayLength\">\n                                                        <span>\n                                                            showing {$ ec.newElement.columnStart $} - {$ ec.newElement.columnEnd $} of {$ ec.newElement.headings_copy.length $} columns\n                                                        </span>\n                                                        <button class=\"btn btn-pagination\" ng-click=\"ec.jumpLeft(ec.newElement,ec.newElement)\" ng-disabled=\"ec.newElement.columnStart==1\">\n                                                            <img src=\"/static/ref-app/app/images/left.png\"/>\n                                                        </button>\n                                                        <button class=\"btn btn-pagination\" ng-click=\"ec.jumpRight(ec.newElement,ec.newElement)\" ng-disabled=\"ec.newElement.columnEnd==ec.newElement.headings_copy.length\">\n                                                           <img src=\"/static/ref-app/app/images/right.png\"/>\n                                                        </button>\n                                                    </div>\n                                                 </div>\n                                          </div>\n                                          <div class=\"row\">\n                                                <div class=\"col-lg-12 colsm-12 col-md-12 col-xs-12 text-right\">\n                                                    <button class=\"btn  btn-custom\" ng-click=\"ec.saveNewnode(node)\">\n                                                        <i class=\"fa fa-floppy-o\" aria-hidden=\"true\" style=\"margin-left:7px;\"></i>\n                                                        Add\n                                                    </button>\n                                                    <button class=\"btn btn-cancel\" ng-click=\"ec.cancelNewnode()\" style=\"background-color: transparent;color: black;\">\n                                                        <i class=\"fa fa-times-circle-o\"></i>\n                                                        Cancel\n                                                    </button>\n                                                </div>\n                                          </div>\n                                      </div>\n                                      <br>\n                                     </div>\n                                  </li>\n                                  <li ng-repeat=\"node in node.children\"  ng-class=\"ec.classLengths(node)\" class=\"{$ node.temp_id $}\" ui-tree-node ng-include=\"'nodes_renderer2.html'\"  ng-hide=\"ec.hideElement(node)\"></li>\n                              </ol>\n                        </script>\n        <div class=\"domainObjectBody\" id=\"rightSideDiv\">\n\n            <div class=\"row row-eq-height\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 no-padding\">\n                    <div ui-tree id=\"tree-root1\" data-empty-placeholder-enabled=\"false\">\n                        <ol ui-tree-nodes class=\"olStyle\" ng-model=\"extractOutput\">\n                            <li ng-repeat=\"node in extractOutput\" class=\"treeDomainObject sample{$ node.temp_id $}\"\n                                collapsed=\"true\" ng-class=\"{disabledStyle: isDisabled}\" ui-tree-node ng-include=\"'nodes_renderer1.html'\"></li>\n                        </ol>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!--<div class=\"btn  btn-custom btn-block \" ng-click=\"ec.completeReview()\">-->\n        <!--Complete review-->\n        <!--</div>-->\n\n\n    </div>\n</div>\n\n<div class=\"row borderEmail\" ng-if=\"ec.documentType == 'digital'\">\n    <div class=\"col-sm-7 col-md-7 col-xs-7 col-lg-7 dashboard-row\">\n        <div class=\"row image-style\" style=\"height:{$ height $}px\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12\" style=\"padding:5px;\">\n                <div id=\"ImageLocation1\">\n                    <ul class=\"nav nav-tabs custom-navTab\">\n                        <li class=\"active\"><a data-toggle=\"tab\" href=\".processed\">Processed</a></li>\n                        <li><a data-toggle=\"tab\" href=\".original\">Original</a></li>\n                    </ul>\n\n                    <div class=\"tab-content\" style=\"background:white\">\n                        <div class=\"tab-pane fade in active processed\">\n                            <!--<table class=\"table table-striped\">-->\n                            <!--<tbody class=\"emailTable\">-->\n                            <!--<tr>-->\n                            <!--<td>From</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ ec.emailDocumentData.attributes.header.from $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Sent</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ ec.emailDocumentData.attributes.header.sent $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>To</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ ec.emailDocumentData.attributes.header.to $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Subject</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ ec.emailDocumentData.attributes.header.subject $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Email Body</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>-->\n                            <!--<div ng-bind-html=\"emailBodyHtml()\">-->\n\n                            <!--</div>-->\n                            <!--</td>-->\n                            <!--</tr>-->\n                            <!--</tbody>-->\n                            <!--</table>-->\n                            <div ng-repeat=\"att in ec.digitalDocumentData\" ng-show=\"ec.digitalDocumentData.length!=0\">\n                                <div>\n                                    <!--<div class=\"attachmentClass\">-->\n                                    <!--<span>Attachment {$ $parent.$index+1 $} : </span><span style=\"color:black\">{$ key $}.{$ value.extn $}</span>-->\n                                    <!--</div>-->\n                                    <div style=\"padding: 13px 7px 25px 7px;\">\n                                        <div ng-bind-html=\"emailAttachments(att.html_data)\"></div>\n                                    </div>\n                                    <!--<div style=\"padding: 13px 7px 25px 7px;\" ng-show=\"value.extn=='pdf'\">-->\n                                    <!--<object data=\"static{$ value.pdf_path $}\" type=\"application/pdf\" width=\"100%\" height=\"300px\">-->\n                                    <!--</object>-->\n                                    <!--</div>-->\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"tab-pane fade original\" style=\"padding:10px\">\n                            <!--<div ng-bind-html=\"emailOriginalHtml()\" style=\"padding-top:10px;\">-->\n                            <!--</div>-->\n                            <div>\n                                <span></span><span style=\"#a4a4a4;\">click below to download</span>\n                            </div>\n                            <div ng-repeat=\"att in ec.digitalDocumentData\">\n                                <div>\n                                    <div style=\"padding-top:10px;\">\n                                        <span ng-click=\"downloadAttachment(att.file_path)\" style=\"color: #00a3e0;cursor:pointer\">{$\n                                            att.data[0].name $}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-margin \" style=\"background-color:white;\">\n        <ul class=\"nav nav-tabs nav-reviewTabs\">\n            <li class=\"active\"><a data-toggle=\"tab\" href=\".elements\">Elements</a></li>\n            <li><a data-toggle=\"tab\" href=\".outcomes\">Domain Objects</a></li>\n        </ul>\n        <div class=\"image-style1\" style=\"height:{$ height $}px;overflow-y:scroll;background-color:white;\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane in active elements\" style=\"position: relative;border:1px solid #eee;\">\n                </div>\n                <div class=\"tab-pane outcomes\" style=\"position: relative;border:1px solid #eee;\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n<div ng-if=\"ec.documentType == 'email'\">\n    <div class=\"row\" id=\"markerForm-tabs\">\n        <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n            <ul class=\"nav nav-tabs custom-navTab\">\n                <li class=\"active\"><a data-toggle=\"tab\" href=\".review\">Review Extraction</a></li>\n                <li><a data-toggle=\"tab\" href=\".recommend\">Review Recommendations</a></li>\n            </ul>\n        </div>\n    </div>\n    <div class=\"row row-eq-height\" style=\"background-color: #ebf2f5;\">\n        <div class=\"col-sm-7 col-md-7 col-xs-7 col-lg-7 no-padding\" style=\"height:{$ height $}px;background:white\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade in active review emailTable\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\" style=\"overflow-y: scroll;max-height: 350px;\">\n                            <table class=\"table table-striped\">\n                                <tbody class=\"emailTable\">\n                                    <tr>\n                                        <td>From</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ ec.docAttributes.from $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Sent</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ ec.docAttributes.sent $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>To</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ ec.docAttributes.to $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Subject</td>\n                                    </tr>\n                                    <tr>\n                                        <td>{$ ec.docAttributes.subject $}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Email Body</td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <div ng-bind-html=\"ec.renderEmailHTMLData(ec.docAttributes.body)\">\n\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                    <div class=\"attachments\" style=\"padding-bottom: 15px;\">\n\n                        <div class=\"row\">\n                            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\" style=\"top: -10px;\">\n                                <div>\n                                    <span style=\"font-size: 14px; background-color: #8399a5; padding: 0 10px;color:#fff;\">\n                                        Attachments\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <br>\n                        <div class=\"row\">\n                            <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-12 text-center\" style=\"cursor:pointer;\"\n                                ng-repeat=\"attachment in ec.emailAttachmentsArray\" ng-click=\"ec.showEmailAttachment(attachment)\">\n\n                                <img ng-if=\"attachment.mime_type == 'pdf'\" src=\"./static/ref-app/app/images/pdf.png\" style=\"width:60px;\" />\n                                <img ng-if=\"attachment.mime_type == 'excel-xlsx' || attachment.mime_type == 'excel-xls' || attachment.mime_type == 'xlsx'\"\n                                    src=\"./static/ref-app/app/images/excel.png\" style=\"width:60px;\" />\n                                <span style=\"color: #696161;font-size:12px;\">\n                                    {$ attachment.file_name $}\n                                </span>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-padding\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade in active review emailTable\">\n                    <div class=\"row borderEmail\">\n                        <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-margin \" style=\"background-color:white;\">\n\n                        </div>\n                    </div>\n                </div>\n                <div class=\"tab-pane fade recommend emailTable\">\n                    <div class=\"row borderEmail\">\n                        <div style=\"height:{$ height $}px;overflow-y:scroll;\">\n                            <fieldset class=\"right_content\">\n                                <legend>Email Body</legend>\n                                <div class=\"row\">\n                                    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding\">\n                                        <div class=\"email_body\">\n                                            <span ng-bind-html=\"ec.renderEmailHTMLData(ec.docAttributes.body)\" style=\"font-size: 15px;\">Email\n                                                Body here</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                                <div class=\"row\">\n                                    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding emailPanel\">\n                                        <span style=\"color: #373939;font-size:14px;\">Intent recommendations</span>\n                                        <div class=\"panel panel-default\" ng-repeat=\"emailEntitie in ec.emailEntities.fields[0].nlp\">\n                                            <div class=\"panel-heading\">\n                                                <div class=\"row\">\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-12\">\n                                                        <span data-ng-bind=\"emailEntitie.action\" ng-show=\"!showActionInput\">Action</span>\n                                                        <input type=\"text\" class=\"form-control\" ng-model=\"emailEntitie.action\"\n                                                            ng-show=\"showActionInput\" />\n                                                        <i class=\"fa fa-pencil\" ng-click=\"showActionInput=true\" ng-show=\"!showActionInput\"></i>\n                                                        <i class=\"fa fa-check\" ng-show=\"showActionInput\" ng-click=\"ec.updateNlp(ec.emailEntities,'action');showActionInput=false\"></i>\n                                                        <i class=\"fa fa-times\" ng-click=\"showActionInput=false\" ng-show=\"showActionInput\"></i>\n                                                    </div>\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-12\">\n                                                        <span data-ng-bind=\"emailEntitie.entity\" ng-show=\"!showEntityInput\">Provider</span>\n                                                        <select class=\"form-control\" ng-model=\"emailEntitie.entity\"\n                                                            ng-show=\"showEntityInput\">\n                                                            <option ng-repeat=\"(key,value) in entitiesList\" value=\"{$ key $}\">{$\n                                                                key $}</option>\n                                                        </select>\n                                                        <i class=\"fa fa-pencil\" ng-click=\"showEntityInput=true\" ng-show=\"!showEntityInput\"></i>\n                                                        <i class=\"fa fa-check\" ng-show=\"showEntityInput\" ng-click=\"ec.updateNlp(ec.emailEntities,'entity');showEntityInput=false\"></i>\n                                                        <i class=\"fa fa-times\" ng-click=\"showEntityInput=false\" ng-show=\"showEntityInput\"></i>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"panel-body\">\n                                                <div class=\"row\" style=\"padding:10px;\">\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding\">\n                                                        <span>Set</span>\n                                                    </div>\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding text-right\">\n                                                        <span style=\"color:#26aae2;cursor:pointer;\" ng-click=\"ec.newAttribute(emailEntitie.attributes,emailEntitie.action);\">\n                                                            <i class=\"fa fa-plus\"></i>\n                                                            New Attribute\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                                <table class=\"table table-responsive\" style=\"background-color: #fafafa;margin-bottom:0px;\">\n                                                    <thead>\n                                                        <th>Attribute</th>\n                                                        <th>Value </th>\n                                                    </thead>\n                                                    <tbody>\n                                                        <tr ng-show=\"ec.newAttributeShow\">\n                                                            <td>\n                                                                <input type=\"text\" class=\"form-control\" placeholder=\"Enter attribute\"\n                                                                    ng-model=\"ec.newAttributeObj.attribute\" />\n                                                            </td>\n                                                            <td>\n                                                                <input type=\"text\" class=\"form-control\" placeholder=\"Enter value\"\n                                                                    ng-model=\"ec.newAttributeObj.value\" />\n                                                                <span style=\"color:red\">{$ ec.newAttrErr $}</span>\n                                                                <span><i class=\"fa fa-check\" ng-click=\"ec.saveNewAttribute()\"></i></span>\n                                                                <span><i class=\"fa fa-times\" ng-click=\"ec.newAttributeShow=false;ec.newAttrErr = ''\"></i></span>\n                                                            </td>\n                                                        </tr>\n                                                        <tr data-ng-repeat=\"attr in emailEntitie.attributes\">\n                                                            <td>\n                                                                <span data-ng-bind=\"attr.attribute\">Phone Number</span>\n                                                                <span><i class=\"fa fa-pencil\" style=\"color:#F3F5F6;\"></i>\n                                                                </span>\n                                                            </td>\n                                                            <td>\n                                                                <span data-ng-bind=\"attr.value\" ng-show=\"!showValueInput\">Value\n                                                                    Here</span>\n                                                                <input type=\"text\" class=\"form-control\" ng-model=\"attr.value\"\n                                                                    ng-show=\"showValueInput\" />\n                                                                <span><i class=\"fa fa-pencil\" ng-click=\"showValueInput=true\"\n                                                                        ng-show=\"!showValueInput\"></i></span>\n                                                                <i class=\"fa fa-check\" ng-show=\"showValueInput\"\n                                                                    ng-click=\"ec.updateNlp(ec.emailEntities,'value');showValueInput=false\"></i>\n                                                                <i class=\"fa fa-times\" ng-click=\"showValueInput=false\"\n                                                                    ng-show=\"showValueInput\"></i>\n                                                            </td>\n                                                        </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </fieldset>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 120 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.extractionServices', [])
			.service('extractionService', function($state,$q, $http, httpPayload) {
	        var _getListOfGroups = function(recId,sess_id) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/extractiondata/'+recId,
	                  headers: {'sess_token': sess_id},
	                  data: recId
	            }
	             var deferred = $q.defer();
	//            deferred.resolve({
	//                data: data5
	//            });
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	        };
	
	        var _saveFeedback = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/feedback/',
	                  headers: {'sess_token': data.sess_id},
	                  data:data.data
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	        };
	
	        var _saveNewElement = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/feedback/text/',
	                  headers: {'sess_token': data.sess_id},
	                  data:data.data
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	        };
	
	        var _completeFedBack = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/completeReview/text/',
	                  headers: {'sess_token': data.sess_id},
	                  data:data.data
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	        };
	
	        var _saveChangedState = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/change/state/',
	                  headers: {'sess_token': data.sess_id},
	                  data:data.data
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	        };
	
	        var extractionService = {
	            getListOfGroups:_getListOfGroups,
	            saveFeedback:_saveFeedback,
	            saveNewElement:_saveNewElement,
	            completeFedBack:_completeFedBack,
	            saveChangedState:_saveChangedState
	        };
	
	          return extractionService;
			});
	})();

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		//require('./dashboard/dashboard.module.js');
	
		module.exports = angular.module('console.solution', ['ui.router'])
		    .controller('solutionController', __webpack_require__(122))
			//.directive('bodyContentContainer', require('./dashboard.controller.js'));
			 .config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.solution', {
					url: '/solution',
					views: {
						'pageContent@': {
							template: __webpack_require__(123),
							controller: 'solutionController',
							controllerAs: 'sl',
							cache:false,
							resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                        $state.go('login')
	                                 }
	                              },
	                        }
						}
					}
				});
			}]);
	})();

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	module.exports = ['$scope', '$state', '$rootScope', 'solutionService','ngDialog' ,function($scope, $state, $rootScope, solutionService,ngDialog) {
		'use strict';
		  $scope.solutionType = "";
	      $rootScope.currentState = 'solution';
	      $scope.classSolutionType={};
	      $scope.imgSolutionType={};
	      $rootScope.solutionName = '';
	      var vm = this;
	      $scope.showDeleteIcon=[];
	      window.scrollTo(0,0);
	
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	      $rootScope.inSolution = false;
	
	      solutionService.getSolutions(vm.sess_id).then(function(result){
	          if(result.data.status == "success"){
	              $scope.solutionsList=result.data.data;
	          }
	          else{
	              $.UIkit.notify({
	                   message : "Failed to get solutions",//'Solution name has not been updated',
	                   status  : 'danger',
	                   timeout : 2000,
	                   pos     : 'top-center'
	              });
	          }
	      },function(){
	          $.UIkit.notify({
	               message : "Internal server error",//'Solution name has not been updated',
	               status  : 'danger',
	               timeout : 2000,
	               pos     : 'top-center'
	          });
	      });
	
	
	    $scope.logout =function(){
	        localStorage.clear();
	        window.location.href = "http://"+ location.host+"/logout";
	    };
	
	      $scope.solutionSelection = function(obj){
	         console.log(obj);
	         var userData=localStorage.getItem('userInfo');
	         userData=JSON.parse(userData);
	         if(userData.user == undefined){
	            userData.user = {};
	         }
	         userData.user.solution_id = obj.solution_id;
	         userData.user.solution_name = obj.solution_name;
	         $rootScope.inSolution = true;
	         solutionService.postTenants({"solution_id":obj.solution_id},vm.sess_id).then(function(result){
	            if(result.data.status=="success"){
	               $rootScope.solutionName=obj.solution_name;
	               $rootScope.inSolution = true;
	               localStorage.removeItem('solutionName');
	               localStorage.setItem('solutionName',obj.solution_name);
	               userData.solutionName =  obj.solution_name;
	               userData.solutionId =  obj.solution_id;
	               localStorage.setItem('userInfo',JSON.stringify(userData))
	               if(userData.role == "bu"){
	                   $state.go('app.agentDashboard');
	               }
	               else{
	                   $state.go('app.supervisorDashboard');
	               }
	            }
	            else{
	              $.UIkit.notify({
	                   message : result.data.msg,//'Solution name has not been updated',
	                   status  : 'danger',
	                   timeout : 2000,
	                   pos     : 'top-center'
	              });
	            }
	         },function(){
	            $.UIkit.notify({
	                   message : "Internal server error",//'Solution name has not been updated',
	                   status  : 'danger',
	                   timeout : 2000,
	                   pos     : 'top-center'
	            });
	         });
	      };
	
	      $scope.deleteSolution = function(list,$event){
	          $event.stopPropagation();
	          var data = {"solution_id":list.solution_id};
	          ngDialog.open({ template: 'confirmBox',
	            controller: ['$scope','$state' ,function($scope,$state) {
	                $scope.activePopupText = 'Are you sure you want to delete ' +"'" +list.solution_name+ "'" +' ' + 'solution ?';
	                $scope.onConfirmActivation = function (){
	                    ngDialog.close();
	                    solutionService.delSolution(data,vm.sess_id).then(function(result){
	                        if(result.data.status=="success"){
	                           $.UIkit.notify({
	                               message : result.data.msg,
	                               status  : 'success',
	                               timeout : 2000,
	                               pos     : 'top-center'
	                            });
	                            $state.reload();
	                        }
	                        if(result.data.status=="failure"){
	                           $.UIkit.notify({
	                               message : result.data.msg,
	                               status  : 'danger',
	                               timeout : 2000,
	                               pos     : 'top-center'
	                           });
	                        }
	                    },function(){
	                        $.UIkit.notify({
	                               message : "Internal server error",
	                               status  : 'danger',
	                               timeout : 2000,
	                               pos     : 'top-center'
	                        });
	                    });
	                };
	            }]
	          });
	      };
	
	      $scope.showDeleteSolution=function(index){
	        $scope.showDeleteIcon[index]=true;
	      };
	      $scope.hideDeleteSolution=function(index){
	        $scope.showDeleteIcon[index]=false;
	      };
	
	}];

/***/ }),
/* 123 */
/***/ (function(module, exports) {

	module.exports = "<nav class=\"navbar navbar-fixed-top navbar-custom\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\">\n        <div class=\"sample-image\"></div>\n        <!--<span>-->\n          <!--<img class=\"header-image\" src=\"/static/ref-app/app/images/logo.png\"/>-->\n        <!--</span><br>-->\n        <!--<span class=\"text-heading\">Powered by-->\n          <!--<img class=\"header-image2\" src=\"/static/ref-app/app/images/xpms_logo.png\"/>-->\n        <!--</span>-->\n      </a>\n\n    </div>\n\n    <div class=\"collapse navbar-collapse\">\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li class=\"dropdown\">\n          <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              <img src=\"/static/ref-app/app/images/avatar.png\" alt=\"Avatar\" class=\"rounded-image\">\n          </a>\n          <ul class=\"dropdown-menu\">\n            <li>\n              <a>\n                <img src=\"/static/ref-app/app/images/avatar.png\" alt=\"Avatar\" class=\"rounded-image\">\n                {$ loginData.username $}\n              </a>\n            </li>\n            <li>\n              <a ng-click=\"logout()\">\n                <img src=\"/static/ref-app/app/images/logout.png\" class=\"logout-image\"/>\n                Logout\n              </a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n\n\n<script type=\"text/ng-template\" id=\"confirmBox\">\n  <div class=\"popup-header\">\n    <h3 class=\"text-primary\"> Confirm Action </h3>\n    <hr class=\"popup-hr\"/>\n    <p class=\"text-info\" style=\"padding:10px\"> {$ activePopupText $}  </p>\n    <br/>\n    <div class=\"row\">\n      <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n        <button class=\"btn btn-primary right\" ng-click=\"onConfirmActivation()\"> Confirm </button>\n      </div>\n    </div>\n  </div>\n</script>\n<div class=\"container\">\n  <div class=\"row customContainer\">\n    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n      <label>Your Solutions</label>\n    </div>\n  </div>\n  <br>\n  <div class=\"row services\">\n    <div class=\"col-lg-4 col-sm-4 col-md-4 col-xs-6 solutionsList\" ng-click=\"solutionSelection(listdata)\" ng-repeat=\"listdata in solutionsList track by $index\" >\n      <div class=\"engine-box enable\">\n        <div class=\"panel panel-custom\">\n          <div class=\"panel-heading\">\n            <p class=\"lbl-solution-name\">{$ listdata.solution_name $}</p>\n          </div>\n          <div class=\"panel-body\" style=\"border-bottom:1px solid #ddd;\">\n            <div class=\"lbl-solution-des textLimit\" style=\"-webkit-box-orient:vertical;\">{$ listdata.description $}</div>\n          </div>\n          <div class=\"panel-customFooter\">\n            <div class=\"row\">\n              <div class=\"col-lg-5 col-md-5 col-sm-5 col-xs-12 no-padding\">\n                <span>Services active</span>\n                <p>-</p>\n              </div>\n              <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-12 no-padding\">\n                <span>Documents Processed</span>\n                <p>-</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.solutionServices', [])
			.service('solutionService', function($state,$q, $http,httpPayload) {
	
	
	              var _postTenants = function(type,sess_id) {
	
	                var req = {
	                      method: 'POST',
	                      url: 'api/activeTenant/',
	                      headers: httpPayload.getHeader(),
	                      data: type
	                };
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	              };
	
	                var _getSolutions = function(sess_id) {
	
	                  var req = {
	                        method: 'GET',
	                        url: 'api/solutions/',
	                        headers: httpPayload.getHeader()
	                  };
	                  var deferred = $q.defer();
	
	                  $http(req).success(function(data) {
	                    deferred.resolve({
	                      data: data
	                    });
	                  }).error(function(data) {
	                    deferred.reject({
	                      error: data
	                    });
	                  });
	
	                  return deferred.promise;
	                };
	
	               var _delSolution = function(data,sessId) {
	
	                var req = {
	                      method: 'DELETE',
	                      url: 'api/soln/',
	                      data: data,
	                      headers: httpPayload.getHeader()
	                };
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	              };
	
	              var solutionService = {
	                postTenants:_postTenants,
	                getSolutions:_getSolutions,
	                delSolution:_delSolution
	              };
	
	              return solutionService;
			});
	})();

/***/ }),
/* 125 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.imageCropDirective', [])
	    .directive("mrImage",["$rootScope", function($rootScope) {
	    return {
	        restrict: "A",
	        scope: {
	            src: "=mrSrc",
	            maxWidth: "=?mrMaxWidth",
	            aspectRatio: "=?mrAspectRatio",
	            scale: "=?mrScale",
	            drawer: "=?mrDrawer",
	            selector: "=?mrSelector"
	        },
	        template: '<div mr-image-selector id="calImage" mr-model="selector" mr-aspect-ratio="aspectRatio" style="height: {{scaleValue(height, scale) + \'px\'}}; width: {{scaleValue(width, scale) + \'px\'}}"><img ng-src="{{src}}" width="{{scaleValue(width, scale)}}" height="{{scaleValue(height, scale)}}"></div><div mr-image-drawer mr-model="drawer" ng-class=\"$root.imageBlur\" style="height: {{scaleValue(height, scale) + \'px\'}}; width: {{scaleValue(width, scale) + \'px\'}}"></div>',
	        link: function(a, b) {
	            function c(c) {
	                a.image = new Image, a.image.onload = function() {
	                    a.$apply(function() {
	                        a.height = a.height || a.image.height, a.width = a.width || a.image.width, a.scale = angular.isUndefined(a.scale) && angular.isDefined(a.maxWidth) ? a.maxWidth >= a.width ? 1 : a.maxWidth / a.width : a.scale || 1, b.css("width", a.scaleValue(a.width, a.scale) + "px"), b.css("height", a.scaleValue(a.height, a.scale) + "px")
	                    })
	                }, a.image.src = c
	            }
	            b.addClass("mr-image"), c(a.src), a.scaleValue = function(a, b) {
	                return Math.floor(a * b)
	            }
	        }
	    }
	    }])
	    .directive("mrImageDrawer",["$rootScope", function(rootScope) {
	    return {
	        restrict: "A",
	        scope: {
	            rects: "=mrModel"
	        },
	        template: "<div ng-repeat=\"rect in rects\"  id= \"{{ rect.slice_id }}\" ng-show=\" showDrawer(rect) \" ng-class=\"$root.highlight[$index]\" ng-click=\"editItem(rect,$index)\" style=\"position: absolute;cursor: pointer;top:    {{ rect.y1 }}px;left:   {{ rect.x1 }}px;width:  {{ (rect.x2 - rect.x1)}}px;height: {{ (rect.y2 - rect.y1)}}px;border: {{ rect.stroke || 3 }}px {{rect.borderStyle}} {{ rect.color || '' }};background-color: {{ increaseBrightness(rect.bgColor || '', '0.3') }}\"ng-style='rectStyle'><i ng-show=\"rect.is_update\" class=\"fa  fa-pencil\" style=\"float:right;font-size:45px;color: #33ad85;\" ng-click=\"removeSelected($index)\"></i><i ng-show=\"rect.is_accept || rect.isAllAccept\" class=\"fa  fa-check \" style=\"float:right;font-size:45px; color: #33ad85;\" ng-click=\"removeSelected($index)\"></i></div>",
	        link: function(a) {
	            a.increaseBrightness = function(a, b) {
	                a = a.replace(/^\s*#|\s*$/g, ""), 3 == a.length && (a = a.replace(/(.)/g, "$1$1"));
	                var c = parseInt(a.substr(0, 2), 16),
	                    d = parseInt(a.substr(2, 2), 16),
	                    e = parseInt(a.substr(4, 2), 16);
	                return "rgba(" + c + "," + d + "," + e + "," + b + ")"
	            }
	            a.removeSelected = function(index){
	                rootScope.$broadcast("selected",index);
	            }
	            a.editItem = function(data,index){
	                rootScope.$broadcast("edited",data);
	            }
	            a.showDrawer = function(rect){
	
	                if(rootScope.selectedIndex.length==0 && rootScope.selectedPage.length==0 && rect.is_display){
	                    return true;
	                }
	                else{
	                    for(var i=0; i<rootScope.selectedIndex.length;i++){
	                        if(rect.index == rootScope.selectedIndex[i] && rect.page_no == rootScope.selectedPage[i] && rect.is_display){
	                            return true;
	                        }
	                    }
	                    return false;
	                }
	
	            }
	        }
	    }
	    }])
	    .directive("mrImageSelector",["$rootScope", function(rootScope) {
	    function a(a) {
	        var b, c = {
	                top: 0,
	                left: 0
	            },
	            d = a && a[0].ownerDocument;
	        return b = d.documentElement, void 0 !== typeof a[0].getBoundingClientRect && (c = a[0].getBoundingClientRect()), {
	            top: c.top + (window.pageYOffset || b.scrollTop) - (b.clientTop || 0),
	            left: c.left + (window.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)
	        }
	    }
	    return {
	        restrict: "A",
	        scope: {
	            selector: "=?mrModel",
	            src: "=?mrSrc",
	            aspectRatio: "=?mrAspectRatio"
	        },
	        link: function(b, c) {
	            function d(a, b, c) {
	                L.css("display", "block"), M.css("right", b - a.left + "px"), P.css("left", b - a.right + "px"), N.css("left", a.left + "px"), N.css("right", a.right + "px"), N.css("bottom", c - a.top + "px"), O.css("left", a.left + "px"), O.css("right", a.right + "px"), O.css("top", c - a.bottom + "px")
	            }
	
	            function e() {
	                H[0].documentElement.className = H[0].documentElement.className.replace(" mr-user-select", "")
	            }
	
	            function f() {
	                H[0].documentElement.className += " mr-user-select"
	            }
	
	            function g() {
	                H.bind("mousemove", j), H.bind("mouseup", k)
	            }
	
	            function h() {
	                H.unbind("mousemove", j), H.unbind("mouseup", k)
	            }
	
	            function i(b) {
	                f();
	                var d = a(c);
	                Q = b.pageX - d.left, R = b.pageY - d.top, S = !0, g()
	            }
	
	            function j(d) {
	                S = !1;
	                var e = a(c),
	                    f = d.pageX - e.left,
	                    g = d.pageY - e.top;
	                b.$apply(function() {
	                    l(Q, R, f, g)
	                })
	            }
	
	            function k() {
	                e(), S && b.$apply(z), h()
	            }
	
	            function l(a, b, d, e) {
	                var f = c.css("height").replace("px", ""),
	                    g = c.css("width").replace("px", "");
	                d = 0 > d ? 0 : d, d = d > g ? g : d, e = 0 > e ? 0 : e, e = e > f ? f : e;
	                var h = {
	                    top: e > b ? b : e,
	                    bottom: e > b ? f - e : f - b,
	                    left: d > a ? a : d,
	                    right: d > a ? g - d : g - a
	                };
	                w(h, g, f)
	            }
	
	            function m() {
	                H.bind("mousemove", p), H.bind("mouseup", q)
	            }
	
	            function n() {
	                H.unbind("mousemove", p), H.unbind("mouseup", q)
	            }
	
	            function o(a) {
	                a.stopPropagation(), f(), W = angular.element(a.target).attr("class").replace("mr-drag-handle", "").replace("mr-drag-line", "").trim(), T = a.pageX, U = a.pageY, V = {
	                    top: parseInt(I.css("top")),
	                    bottom: parseInt(I.css("bottom")),
	                    left: parseInt(I.css("left")),
	                    right: parseInt(I.css("right"))
	                }, m()
	            }
	
	            function p(a) {
	                var d = c.css("height").replace("px", ""),
	                    e = c.css("width").replace("px", ""),
	                    f = a.pageX - T,
	                    g = a.pageY - U,
	                    h = {
	                        top: V.top,
	                        bottom: V.bottom,
	                        left: V.left,
	                        right: V.right
	                    };
	                "n" == W[0] ? h.top += g : "s" == W[0] && (h.bottom -= g), "w" == W[0] || "w" == W[1] ? h.left += f : ("e" == W[0] || "e" == W[1]) && (h.right -= f);
	                var i;
	                (h.top >= d - h.bottom || h.bottom >= d - h.top) && (i = h.top, h.top = d - h.bottom, h.bottom = d - i), (h.left >= e - h.right || h.right >= e - h.left) && (i = h.left, h.left = e - h.right, h.right = e - i), h.top = h.top < 0 ? 0 : h.top, h.bottom = h.bottom < 0 ? 0 : h.bottom, h.left = h.left < 0 ? 0 : h.left, h.right = h.right < 0 ? 0 : h.right, G && ("n" == W && (h.left = e - (h.right + (d - h.top - h.bottom) * G)), "s" == W && (h.right = e - (h.left + (d - h.top - h.bottom) * G)), ("w" == W || "nw" == W || "ne" == W) && (h.top = d - (h.bottom + (e - h.left - h.right) / G), h.top < 0 && (h.top = 0, "w" == W[0] || "w" == W[1] ? h.left = e - (h.right + (d - h.top - h.bottom) * G) : h.right = e - (h.left + (d - h.top - h.bottom) * G))), ("e" == W || "se" == W || "sw" == W) && (h.bottom = d - (h.top + (e - h.left - h.right) / G), h.bottom < 0 && (h.bottom = 0, "e" == W[0] || "e" == W[1] ? h.right = e - (h.left + (d - h.top - h.bottom) * G) : h.left = e - (h.right + (d - h.top - h.bottom) * G)))), b.$apply(function() {
	                    w(h, e, d)
	                })
	            }
	
	            function q() {
	                e(), n()
	            }
	
	            function r() {
	                H.bind("mousemove", u), H.bind("mouseup", v)
	            }
	
	            function s() {
	                H.unbind("mousemove", u), H.unbind("mouseup", v)
	            }
	
	            function t(a) {
	                a.stopPropagation(), f(), T = a.pageX, U = a.pageY, V = {
	                    top: parseInt(I.css("top")),
	                    bottom: parseInt(I.css("bottom")),
	                    left: parseInt(I.css("left")),
	                    right: parseInt(I.css("right"))
	                }, r()
	            }
	
	            function u(a) {
	                var d = c.css("height").replace("px", ""),
	                    e = c.css("width").replace("px", ""),
	                    f = a.pageX - T,
	                    g = a.pageY - U,
	                    h = {
	                        top: V.top + g,
	                        bottom: V.bottom - g,
	                        left: V.left + f,
	                        right: V.right - f
	                    };
	                h.top < 0 && (h.bottom = h.bottom + h.top, h.top = 0), h.bottom < 0 && (h.top = h.bottom + h.top, h.bottom = 0), h.left < 0 && (h.right = h.right + h.left, h.left = 0), h.right < 0 && (h.left = h.left + h.right, h.right = 0), b.$apply(function() {
	                    w(h, e, d)
	                })
	            }
	
	            function v() {
	                e(), s()
	            }
	
	            function w(a, c, e) {
	                a && (G && (Q > a.left ? a.left = c - (a.right + (e - a.top - a.bottom) * G) : a.right = c - (a.left + (e - a.top - a.bottom) * G), a.top < 0 && (a.top = 0, a.left = c - (a.right + (e - a.top - a.bottom) * G)), a.bottom < 0 && (a.bottom = 0, a.right = c - (a.left + (e - a.top - a.bottom) * G)), a.left < 0 && (a.left = 0, a.top = e - (a.bottom + (c - a.left - a.right) / G)), a.right < 0 && (a.right = 0, a.bottom = e - (a.top + (c - a.left - a.right) / G))), d(a, c, e), I.css("display", "block"), I.css({
	                    top: a.top + "px",
	                    bottom: a.bottom + "px",
	                    left: a.left + "px",
	                    right: a.right + "px"
	                }), Y(), F.x1 = a.left, F.y1 = a.top, F.x2 = c - a.right, F.y2 = e - a.bottom, Y = b.$watch("selector", C, !0))
	                rootScope.$broadcast("selector",b.selector);
	            }
	
	            function x() {
	                X || (c.bind("mousedown", i), J.bind("mousedown", o), K.bind("mousedown", o), I.bind("mousedown", t), X = !0)
	            }
	
	            function y() {
	                X && (c.unbind("mousedown", i), J.unbind("mousedown", o), K.unbind("mousedown", o), I.unbind("mousedown", t), X = !1)
	            }
	
	            function z() {
	                F.x1 = F.x2 = F.y1 = F.y2 = void 0, I.css("display", "none"), L.css("display", "none")
	            }
	
	            function A() {
	                return angular.isUndefined(F.x1) && angular.isUndefined(F.x2) && angular.isUndefined(F.y1) && angular.isUndefined(F.y2)
	            }
	
	            function B() {
	                return isFinite(F.x1) && isFinite(F.x2) && isFinite(F.y1) && isFinite(F.y2)
	            }
	
	            function C(a, b) {
	                return D(a.enabled), angular.equals(a, b) || a.enabled != b.enabled || A() ? void 0 : B() ? void l(a.x1, a.y1, a.x2, a.y2) : void console.error("[ERROR]: Selector position value (x1, x2, y1, y2) is not a valid number.")
	            }
	
	            function D(a) {
	                F.enabled = "boolean" != typeof a ? !0 : a, F.enabled && B() ? (x(), c.css("z-index", 300), I.css("display", "block"), L.css("display", "block")) : F.enabled ? (x(), c.css("z-index", 300), z()) : (y(), c.css("z-index", 100), I.css("display", "none"), L.css("display", "none"))
	            }
	
	            function E() {
	                var a = document.createElement("canvas"),
	                    c = a.getContext("2d"),
	                    d = 1 / b.$parent.scale,
	                    e = (F.x2 - F.x1) * d,
	                    f = (F.y2 - F.y1) * d;
	                return a.width = e, a.height = f, c.drawImage(b.$parent.image, F.x1 * d, F.y1 * d, e, f, 0, 0, e, f), a.toDataURL("image/png")
	            }
	            b.selector = b.selector || {};
	            var F = b.selector,
	                G = b.aspectRatio;
	            b.$watch("aspectRatio", function(a) {
	                G = a
	            });
	            var H = angular.element(document),
	                I = angular.element('<div class="mr-box" style="top:0px;left:0px;"><div class="mr-line top"></div><div class="mr-line bottom"></div><div class="mr-line left"></div><div class="mr-line right"></div></div>'),
	                J = angular.element('<div class="mr-drag-line n"></div><div class="mr-drag-line s"></div><div class="mr-drag-line w"></div><div class="mr-drag-line e"></div>'),
	                K = angular.element('<div class="mr-drag-handle nw"></div><div class="mr-drag-handle n"></div><div class="mr-drag-handle ne"></div><div class="mr-drag-handle w"></div><div class="mr-drag-handle e"></div><div class="mr-drag-handle sw"></div><div class="mr-drag-handle s"></div><div class="mr-drag-handle se"></div>');
	            I.append(J).append(K), c.append(I);
	            var L = angular.element('<div class="mr-shadow">'),
	                M = angular.element('<div class="mr-shadow left">'),
	                N = angular.element('<div class="mr-shadow center top">'),
	                O = angular.element('<div class="mr-shadow center bottom">'),
	                P = angular.element('<div class="mr-shadow right">');
	            L.append(M).append(N).append(O).append(P), c.append(L);
	            var Q, R, S = !1;
	            c.bind("mousedown", i);
	            var T, U, V, W;
	            J.bind("mousedown", o), K.bind("mousedown", o), I.bind("mousedown", t);
	            var X = !0;
	            F.clear = z, F.enabled = "boolean" != typeof F.enabled ? !0 : F.enabled;
	            var Y = b.$watch("selector", C, !0);
	            F.crop = E
	        }
	    }
	    }]);
	
	
	})();

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	    //require('./services/module.js');
		//require('./dashboard/dashboard.module.js');
		//require('./entitygraph/entitygraph.module.js');
		//require('./solutionsetup/solutionsetup.module.js');
	
		module.exports = angular.module('console.processDetails', [
	        //'console.dashboard.entitygraph'
		    //'console.dashboard.solutionsetup'
		    //'console.layout.bodycontent.dashboard.services'
		])
	        .controller('processDetailsController', __webpack_require__(127))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.processDetails', {
	               url: '/processDetails/details/:id/:type',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(128),
	                        controller: 'processDetailsController',
	                        controllerAs: 'pdc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/";
	                                 }
	                              }
	//                              processListDetails: ['$stateParams', 'processDetailsServices', function($stateParams, processDetailsServices){
	//                                    var loginData = JSON.parse(localStorage.getItem('userInfo'));
	//                                    var sess_id= loginData.sess_id;
	//                                    return processDetailsServices.postProcessList($stateParams.id,sess_id);
	//                              }]
	                        }
	
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 127 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$stateParams','$compile','$rootScope','$sce','$location','processDetailsServices','dashboardService',function($scope,$state,$stateParams,$compile,$rootScope,$sce,$location,processDetailsServices,dashboardService) {
		'use strict';
	      var vm = this;
	      var url = $location.path();
	      var arr = url.split("/");
	      window.scrollTo(0,0);
	      $rootScope.currentState = 'dashboard';
	      $scope.url = $location.protocol() + '://'+ $location.host() +':'+  $location.port();
	      $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	      vm.sess_id= $scope.loginData.sess_id;
	      $scope.iframeHeight = window.innerHeight;
	      $scope.showIframe=false;
	      $rootScope.inSolution = true;
	      $scope.showIframeImage=false;
	      $scope.showNavigation = false;
	      $scope.current_page = 1;
	
	      vm.navigatePage = function(type){
	
	        if(type == 'next'){
	           var rec_num = $scope.filter_obj.current_record_no+1;
	           if(rec_num < $scope.recentRecords.length){
	              var prop = 'none';
	              if($scope.recentRecords[rec_num].is_digital){
	                    prop = 'digital';
	              }
	              $scope.filter_obj.current_record_no = rec_num;
	              localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	              $state.go("app.processDetails",{id:$scope.recentRecords[rec_num].doc_id, type:prop},{reload:true})
	           }
	           else{
	              $scope.filter_obj.page_no = $scope.filter_obj.page_no+1;
	              $scope.filter_obj.current_record_no = -1;
	              $scope.getDocumentsListData(type);
	
	           }
	        }
	        else if(type == 'prev'){
	          var rec_num = $scope.filter_obj.current_record_no-1;
	          if(rec_num >= 0){
	              var prop = 'none';
	              if($scope.recentRecords[rec_num].is_digital){
	                    prop = 'digital';
	              }
	              $scope.filter_obj.current_record_no = rec_num;
	              localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	              $state.go("app.processDetails",{id:$scope.recentRecords[rec_num].doc_id, type:prop},{reload:true})
	          }
	          else{
	              $scope.filter_obj.page_no = $scope.filter_obj.page_no-1;
	              $scope.filter_obj.current_record_no = $scope.recentRecords.length;
	              $scope.getDocumentsListData(type);
	
	          }
	        }
	      }
	
	      $scope.updateFilterObj = function(type){
	          $scope.filter_obj = JSON.parse(localStorage.getItem('filterObj'));
	          if($scope.filter_obj == null || $scope.filter_obj == undefined){
	            $scope.showNavigation = false;
	          }
	          else{
	            if($scope.filter_obj.hasOwnProperty('current_record_no')){
	                $scope.showNavigation = true;
	                $scope.recentRecords = JSON.parse(localStorage.getItem('recentRecords'));
	                if( $scope.recentRecords == null ||  $scope.recentRecords == undefined){
	                }else{
	                  $scope.total_records =  $scope.filter_obj.totalRecords;
	                  $scope.no_of_records =  (($scope.filter_obj.page_no-1) *$scope.filter_obj.no_of_recs) + $scope.filter_obj.current_record_no+1;
	                }
	            }
	            else{
	              $scope.showNavigation = false;
	            }
	
	          }
	
	          vm.navigatePage(type);
	      };
	
	      $scope.updateFilterObj('none');
	
	
	
	      if($stateParams.type.toLowerCase() != "digital"){
	          vm.getGroups = function () {
	              processDetailsServices.getListOfGroups($stateParams.id, vm.sess_id).then(function (data) {
	                   if (data.data.status == "success") {
	                       $scope.showlistDetails = true;
	                       $scope.processListDetails = data.data.data;
	                       $scope.no_of_pages = data.data.data.data.no_of_pages;
	                       $scope.pagesInfo = data.data.data.data.pages;
	                       $scope.volume = $scope.processListDetails.volume;
	                       $scope.entity = $scope.processListDetails.entity;
	                       $scope.fieldsDataConfig = $scope.processListDetails.config.fields_data;
	                       $scope.recordDataConfig = $scope.processListDetails.config.record_data;
	                       $scope.recordData = $scope.processListDetails.data;
	                       vm.changeDocumentInfo(1);
	                   }
	                   else{
	                       $.UIkit.notify({
	                          message: data.data.msg,
	                          status: 'danger',
	                          timeout: 3000,
	                          pos: 'top-center'
	                      });
	                   }
	              },function (err) {
	                  $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	                  });
	              })
	          };
	          vm.getGroups();
	
	          vm.changeDocumentInfo = function (page) {
	
	              $scope.current_page = page;
	              processDetailsServices.postProcessList($stateParams.id,$scope.current_page, vm.sess_id).then(function (data) {
	
	                  if (data.data.status == "success") {
	                      // $scope.showlistDetails = true;
	                      // $scope.processListDetails = data.data.data;
	                      // $scope.fieldsDataConfig = $scope.processListDetails.config.fields_data;
	                      $scope.page_details_Info = data.data.data.elements;
	                      $scope.tablesData = [];
	                      $scope.fieldsData = [];
	                      angular.forEach($scope.page_details_Info,function (value,key) {
	                          if(value.type == 'table'){
	                              $scope.tablesData.push(value);
	                          }
	                          else{
	                               $scope.fieldsData.push(value);
	                          }
	                      })
	
	                      if ($scope.tablesData.length > 0) {
	                          $scope.tableDataList = $scope.tablesData;
	                      }
	
	                      // $scope.recordDataConfig = $scope.processListDetails.config.record_data;
	                      // $scope.recordData = $scope.processListDetails.data;
	                  }
	                  else {
	                      $.UIkit.notify({
	                          message: data.data.msg,
	                          status: 'danger',
	                          timeout: 3000,
	                          pos: 'top-center'
	                      });
	                  }
	              }, function (err) {
	                  console.log(err)
	                  $.UIkit.notify({
	                      message: "Internal server error",
	                      status: 'warning',
	                      timeout: 3000,
	                      pos: 'top-center'
	                  });
	              });
	          };
	
	        vm.changePageNum = function (type) {
	            if(type == 'next')
	                $scope.current_page++;
	            else
	                $scope.current_page--;
	
	            vm.changeDocumentInfo($scope.current_page);
	
	        };
	
	        vm.keyEnter = function (event) {
	            if(event.which === 13) {
	               if($scope.current_page<=$scope.no_of_pages) {
	                   if($scope.current_page>0)
	                     vm.changeDocumentInfo($scope.current_page);
	                   else{
	                                $.UIkit.notify({
	                                     message : 'Please Enter  Valid Page number',
	                                     status  : 'warning',
	                                     timeout : 3000,
	                                     pos     : 'top-center'
	                                });
	                   }
	               }
	               else{
	                                $.UIkit.notify({
	                                     message : 'Please Enter Page number less than no.of pages',
	                                     status  : 'warning',
	                                     timeout : 3000,
	                                     pos     : 'top-center'
	                                });
	               }
	            }
	        };
	
	
	
	
	
	
	
	
	          $scope.backtolist= function(){
	             $state.go("app.dashboard")
	          };
	
	          $scope.backtoDetails= function(){
	             $scope.showIframe = false;
	             $scope.showIframeImage = false;
	             $scope.showEmail = false
	             $scope.showlistDetails=true;
	          };
	
	
	
	          $scope.iframeUrl="";
	
	
	
	
	
	          $scope.displayImage = function(value){
	
	              $scope.showlistDetails=false;
	              var str = $scope.pagesInfo[$scope.current_page-1].file_path;
	              var last = str.substring(str.lastIndexOf(".") + 1, str.length);
	              var last ='png'
	              if(last == 'pdf'){
	                $scope.iframeUrl = $sce.trustAsResourceUrl(value);
	                $scope.showIframe=true;
	                $scope.showIframeImage=false;
	              }
	              else{
	                $scope.iframeUrl = $scope.pagesInfo[$scope.current_page-1].file_path;
	                $scope.showIframe=false;
	                $scope.showIframeImage=true;
	              }
	
	
	          };
	
	          $scope.url = $location.protocol() + '://'+ $location.host() +':'+  $location.port();
	          $scope.download =function(){
	            var downloadUrl = $scope.url+'/api/download/json/'+$scope.processListDetails.data.doc_id+'/';
	            window.location.assign(downloadUrl);
	          };
	       }
	       else{
	          processDetailsServices.postProcessList($stateParams.id,vm.sess_id).then(function(data){
	               if(data.data.status=="success"){
	                  vm.documentType = $stateParams.type.toLowerCase();
	                  $scope.recordDataConfig = data.data.data.config.record_data;
	                  $scope.recordData =data.data.data.data;
	                  vm.digitalDocumentData =angular.copy(data.data.data.data.elements.digital);
	                  vm.heightOfWindow = $(window).height()-70;
	                  vm.heightOfWindow1 = $(window).height()-120;
	               }
	          },function(err){
	               console.log(err)
	               $.UIkit.notify({
	                       message : "Internal server error",
	                       status  : 'warning',
	                       timeout : 3000,
	                       pos     : 'top-center'
	               });
	          });
	
	          $scope.emailAttachments = function(htmldata){
	              return $sce.trustAsHtml(htmldata);
	          }
	
	       }
	
	
	
	      $scope.getDocumentsListData = function(type){
	
	         dashboardService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':$scope.filter_obj}}).then(function(data){
	                       if(data.data.status=="success"){
	                          $scope.processListData=data.data.data;
	                          $scope.processListDataList = $scope.processListData.data;
	                          $scope.filter_obj.totalRecords = data.data.data.total_count;
	                          $scope.recentRecords = [];
	                          angular.forEach($scope.processListDataList,function(value,key){
	                             var digital = false
	                            if(value.hasOwnProperty('is_digital'))
	                               digital = true;
	                            $scope.recentRecords.push({'doc_id':value.doc_id,'mime_type':value.mime_type,'is_digital':digital});
	                          });
	                          localStorage.setItem('recentRecords',JSON.stringify($scope.recentRecords))
	                          localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	                          //$scope.updateFilterObj(type);
	                          vm.navigatePage(type);
	
	                       }
	                       else{
	                         $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                         });
	
	                       }
	         },function(err){
	            console.log(err)
	           $.UIkit.notify({
	                   message : "Internal server error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	           });
	
	         });
	      };
	
	
	
	
	
	}];

/***/ }),
/* 128 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"row custom-header\">\n\t<div class=\"col-lg-8 col-md-8 col-sm-8 custom-breadcrumb\">\n\t\t<ol class=\"breadcrumb\">\n\t\t\t<li class=\"breadcrumb-item\"><a ui-sref=\"app.dashboard\" class=\"breadcrumbTitle\" href=\"#/app/dashboard\">Processing\n\t\t\t\tDashboard</a></li>\n\t\t\t<li class=\"breadcrumb-item active\">{$ recordData.file_name $}</li>\n\t\t</ol>\n\t</div>\n\t<div class=\"col-lg-4 col-md-4 col-sm-4 text-right\" style=\"margin-top:15px;\" ng-show=\"showNavigation\">\n\t\t<span>{$ no_of_records $}</span> / {$ total_records $}<span></span>\n       <a style=\"text-decoration:none;\" ng-click=\"pdc.navigatePage('prev')\" ng-class=\"no_of_records==1?'prevCursor':''\">< Previous</a>\n       <a style=\"margin-left:25px;text-decoration:none;\" ng-click=\"pdc.navigatePage('next')\" ng-class=\"no_of_records==total_records?'nextCursor':''\">Next ></a>\n    </div>\n\n</div>\n<br>\n<div ng-show=\"!showIframeImage\">\n\t<div class=\"row\">\n\t\t<div class=\"col-sm-12 col-md-12 col-xs-12 col-lg-12\" style=\"margin-bottom:20px;\">\n\t\t\t<div class=\"claim-bg\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n\t\t\t\t\t\t<h2>{$ recordData.file_name $} </h2>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\" style=\"margin-bottom:12px;\">\n\t\t\t\t\t<div class=\"col-lg-2 col-sm-2 col-md-2\" ng-repeat=\"value in recordDataConfig.columns\"\n\t\t\t\t\t\t style=\"margin-top: 35px;\">\n\t\t\t\t\t\t<span>{$ value.value $}</span>\n\t\t\t\t\t\t<div><b>{$ recordData[value.key] $}</b></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-lg-2 col-md-2 col-sm-2\" >\n\t\t\t\t\t\t<div ng-click=\"displayImage(recordData.processed_image_path)\" style=\"cursor:pointer;\" ng-if=\"recordData.doc_type=='image'\">\n\t\t\t\t\t\t\t<img ng-src=\"/static/ref-app/app/images/processdetailsview.png\" class=\"previewImage\"/>\n\t\t\t\t\t\t\t<span style=\"color:#1c7cb9;\">Preview Document</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div ng-click=\"download()\" style=\"cursor:pointer;\">\n\t\t\t\t\t\t\t<img ng-src=\"/static/ref-app/app/images/download.png\" class=\"previewImage\"/>\n\t\t\t\t\t\t\t<span style=\"color:#1c7cb9;\">Download JSON</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id=\"container\" style=\"display:none\"></div>\n            <div class=\"row row-eq-height\">\n                <div class=\"col-lg-6 col-md-6 col-sm-6\">\n                    <!--<div class=\"pagination\" ng-show=\"no_of_pages>1\">-->\n                      <!--<a ng-repeat=\"(key,value) in pagesInfo\" ng-click=\"pdc.changeDocumentInfo(value.page_no)\" ng-class=\"current_page==value.page_no?'active':''\">{$ value.page_no $}</a>-->\n                    <!--</div>-->\n\t\t\t\t\t<div ng-show=\"no_of_pages>1\">\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<button class=\"btn pagination-button\" ng-disabled=\"current_page==1\" ng-click=\"pdc.changePageNum('prev')\"><i class=\"fa fa-chevron-left\" style=\"color:white;font-size:12px;\"></i></button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span class=\"pagination-textBox\">\n\t\t\t\t\t\t\t<input type=\"number\" class=\"pagination-text\" ng-model=\"current_page\" ng-keyup=\"pdc.keyEnter($event)\"/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<button class=\"btn pagination-button\" ng-disabled=\"current_page==no_of_pages\" ng-click=\"pdc.changePageNum('next')\"><i class=\"fa fa-chevron-right\" style=\"color:white;font-size:12px;\"></i></button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span>  of {$ no_of_pages $}</span>\n\t\t\t\t\t</div>\n                </div>\n            </div>\n\n\t\t\t<br>\n\n\t\t\t<table class=\"table table-responsive table-hovered table-scroll\" ng-show=\"fieldsData.length>0\"\n\t\t\t\t   ng-if=\"pdc.documentType != 'digital'\">\n\t\t\t\t<thead class=\"tableHeading\">\n\t\t\t\t<th ng-repeat=\"heading in fieldsDataConfig.columns\">{$ heading.value $}</th>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t<tr ng-repeat=\"row in fieldsData\">\n\t\t\t\t\t<td ng-repeat=\"heading in fieldsDataConfig.columns\">\n\n\t\t\t\t\t\t<span ng-show=\"heading.type=='string'\">{$ row[heading.key] $}</span>\n\t\t\t\t\t\t<img ng-src=\"/static{$ volume$}{$ row[heading.key] $}\" ng-if=\"heading.type=='image'\">\n\t\t\t\t\t</td>\n\n\t\t\t\t</tr>\n\t\t\t</table>\n\n\t\t\t<table class=\"table table-responsive table-hovered table-striped table-scroll\" ng-show=\"tablesData.length>0\"\n\t\t\t\t   ng-if=\"pdc.documentType != 'digital'\" ng-repeat = \"table in tableDataList\">\n\t\t\t\t<thead class=\"tableHeading\">\n\t\t\t\t<th ng-repeat=\"heading in table.tables.headings\">{$ heading[0] $}</th>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t<tr ng-repeat=\"row in table.tables.table\">\n\t\t\t\t\t<td ng-repeat=\"heading in table.tables.headings\">\n\n\t\t\t\t\t\t<span>{$ row[heading[0]].text $}</span>\n\n\t\t\t\t\t</td>\n\n\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\n\n\t\t</div>\n\t</div>\n\t<div ng-repeat=\"att in pdc.digitalDocumentData\"\n\t\t ng-show=\"pdc.documentType == 'digital'\">\n\n\t\t<!--<div class=\"attachmentClass\">-->\n\t\t<!--<span>Attachment {$ $parent.$index+1 $} : </span><span style=\"color:black\">{$ key $}.{$ value.extn $}</span>-->\n\t\t<!--</div>-->\n\n\t\t<div style=\"padding: 13px 7px 25px 7px;\">\n\t\t\t<div ng-bind-html=\"emailAttachments(att.html_data)\"></div>\n\t\t</div>\n\t\t<!--<div style=\"padding: 13px 7px 25px 7px;\" ng-show=\"value.extn=='pdf'\">-->\n\t\t<!--<object data=\"static{$ value.pdf_path $}\" type=\"application/pdf\" width=\"100%\" height=\"300px\">-->\n\t\t<!--</object>-->\n\t\t<!--</div>-->\n\n\t</div>\n</div>\n<div class=\"row\" ng-show=\"showIframeImage\">\n\t<div class=\"col-sm-12 col-md-12 col-xs-12 col-lg-12 bg-div2\" style=\"margin-bottom:40px;border-radius:5px;\">\n\t\t<div class=\"btn-back right\">\n\t\t\t<button type=\"button\" class=\"btn right btn-cst-process ng-click-active\" alt=\"back\" title=\"back\"\n\t\t\t\t\tng-click=\"backtoDetails()\" style=\"background-color: #00A3E0;color:white;\">Back\n\t\t\t</button>\n\t\t</div>\n\t\t<image src=\"{$ config.base_url $}/static/ref-app/app/images/loader.gif\" ng-src=\"/static{$ iframeUrl $}\"></image>\n\t</div>\n</div>\n\n\n\n"

/***/ }),
/* 129 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.processDetailsServices', [])
			.service('processDetailsServices', function($state,$q, $http,httpPayload) {
	
	            var _getProcessList = function(data) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/getData/'+data.days+'/'+data.documentType+'/'+data.searchKey,
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _postProcessList = function(recId,page,sess_id) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/documents/'+recId+'/'+page+'/',
	                  headers: httpPayload.getHeader(),
	                  data: recId
	            };
	            var deferred = $q.defer();
	            //var data1 = {"status": "success", "data": [{"value_coordinates": {"x1": 81, "x2": 1546, "y1": 405, "y2": 509}, "has_label": false, "is_deleted": false, "is_variable_field": false, "page_no": 1, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.other_details.insurance_type", "type": "omr", "created_ts": "2018-04-05T08:44:39.604730", "groups": [{"is_multiOption": false, "options": [{"label": "MEDICARE", "value_coordinates": {"x1": 83, "x2": 131, "y1": 449, "y2": 498}}, {"label": "MEDICAID", "value_coordinates": {"x1": 284, "x2": 334, "y1": 450, "y2": 498}}, {"label": "TRICARE", "value_coordinates": {"x1": 495, "x2": 546, "y1": 450, "y2": 500}}, {"label": "CHAMPVA", "value_coordinates": {"x1": 767, "x2": 816, "y1": 448, "y2": 497}}, {"label": "GROUP HEALTH PLAN", "value_coordinates": {"x1": 975, "x2": 1024, "y1": 448, "y2": 499}}, {"label": "FECA BLK LUNG", "value_coordinates": {"x1": 1215, "x2": 1265, "y1": 446, "y2": 499}}, {"label": "OTHER", "value_coordinates": {"x1": 1395, "x2": 1446, "y1": 449, "y2": 499}}]}], "section_id": "default", "element_id": "a03be9e2-c97a-4f1f-a844-de217fd362d2", "is_doc_var": false, "domain_mapping": "Claim.other_details.insurance_type", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "is_multiGroup": false, "updated_ts": "2018-04-05T08:44:39.604722"}, {"value_coordinates": {"x1": 940, "x2": 1545, "y1": 638, "y2": 703}, "has_label": false, "is_deleted": false, "is_variable_field": false, "page_no": 1, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.relationship_to_insured", "type": "omr", "created_ts": "2018-04-05T08:46:29.100651", "groups": [{"is_multiOption": false, "options": [{"label": "Self", "value_coordinates": {"x1": 1039, "x2": 1088, "y1": 649, "y2": 699}}, {"label": "Spouse", "value_coordinates": {"x1": 1189, "x2": 1239, "y1": 648, "y2": 702}}, {"label": "Child", "value_coordinates": {"x1": 1305, "x2": 1357, "y1": 650, "y2": 702}}, {"label": "Other", "value_coordinates": {"x1": 1457, "x2": 1505, "y1": 646, "y2": 699}}]}], "section_id": "default", "element_id": "e1513e3c-d3d6-45d5-b447-0dfa3ee46af0", "is_doc_var": false, "domain_mapping": "Claim.Patient.relationship_to_insured", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "is_multiGroup": false, "updated_ts": "2018-04-05T08:46:29.100642"}, {"value_coordinates": {"x1": 1270, "x2": 1547, "y1": 541, "y2": 600}, "has_label": false, "is_deleted": false, "is_variable_field": false, "page_no": 1, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.sex", "type": "omr", "created_ts": "2018-04-05T08:47:33.664522", "groups": [{"is_multiOption": false, "options": [{"label": "M", "value_coordinates": {"x1": 1306, "x2": 1355, "y1": 547, "y2": 596}}, {"label": "F", "value_coordinates": {"x1": 1456, "x2": 1501, "y1": 548, "y2": 594}}]}], "section_id": "default", "element_id": "31d04f55-f2b9-4952-a6f4-fc0180fedfc1", "is_doc_var": false, "domain_mapping": "Claim.Patient.sex", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "is_multiGroup": false, "updated_ts": "2018-04-05T08:47:33.664512"}, {"value_coordinates": {"x1": 2030, "x2": 2457, "y1": 1037, "y2": 1107}, "has_label": false, "is_deleted": false, "is_variable_field": false, "page_no": 1, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Insured.sex", "type": "omr", "created_ts": "2018-04-05T08:48:35.090515", "groups": [{"is_multiOption": false, "options": [{"label": "M", "value_coordinates": {"x1": 2086, "x2": 2140, "y1": 1047, "y2": 1097}}, {"label": "F", "value_coordinates": {"x1": 2300, "x2": 2359, "y1": 1051, "y2": 1100}}]}], "section_id": "default", "element_id": "49c934fb-8273-44f1-aa23-d47ab887d193", "is_doc_var": false, "domain_mapping": "Claim.Insured.sex", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "is_multiGroup": false, "updated_ts": "2018-04-05T08:48:35.090506"}, {"value_coordinates": {"x1": 80, "x2": 945, "y1": 601, "y2": 704}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 80, "x2": 523, "y1": 602, "y2": 638}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.address", "type": "field", "created_ts": "2018-04-05T08:51:14.812790", "section_id": "default", "element_id": "2b689c85-f45d-41d8-a59e-4d8b145fbad7", "is_doc_var": false, "domain_mapping": "Claim.Patient.address", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T08:51:14.812782"}, {"value_coordinates": {"x1": 79, "x2": 834, "y1": 704, "y2": 800}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 79, "x2": 177, "y1": 703, "y2": 746}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.city", "type": "field", "created_ts": "2018-04-05T08:51:58.369792", "section_id": "default", "element_id": "f59fd9bb-4a64-49c9-b222-9e797d729dc9", "is_doc_var": false, "domain_mapping": "Claim.Patient.city", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T08:51:58.369784"}, {"value_coordinates": {"x1": 80, "x2": 946, "y1": 508, "y2": 603}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 81, "x2": 774, "y1": 507, "y2": 543}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.name", "type": "field", "created_ts": "2018-04-05T08:54:55.532637", "section_id": "default", "element_id": "d982a731-8cc8-4d30-99d7-4733f37901f9", "is_doc_var": false, "domain_mapping": "Claim.Patient.name", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T08:54:55.532629"}, {"value_coordinates": {"x1": 79, "x2": 472, "y1": 798, "y2": 906}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 80, "x2": 248, "y1": 799, "y2": 837}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.zip_code", "type": "field", "created_ts": "2018-04-05T08:55:36.747710", "section_id": "default", "element_id": "a82c4459-4798-4a30-a079-d6cb2c363064", "is_doc_var": false, "domain_mapping": "Claim.Patient.zip_code", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T08:55:36.747701"}, {"value_coordinates": {"x1": 830, "x2": 945, "y1": 701, "y2": 799}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 835, "x2": 941, "y1": 705, "y2": 740}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.state", "type": "field", "created_ts": "2018-04-05T08:56:14.838555", "section_id": "default", "element_id": "750d075e-ee56-47c2-92ee-fae6d2b3b075", "is_doc_var": false, "domain_mapping": "Claim.Patient.state", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T08:56:14.838546"}, {"value_coordinates": {"x1": 467, "x2": 943, "y1": 799, "y2": 907}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 470, "x2": 896, "y1": 801, "y2": 837}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Patient.telephone", "type": "field", "created_ts": "2018-04-05T08:57:19.787178", "section_id": "default", "element_id": "e4a3b991-b5ee-4af2-aa65-91ac706beea6", "is_doc_var": false, "domain_mapping": "Claim.Patient.telephone", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T08:57:19.787170"}, {"value_coordinates": {"x1": 1544, "x2": 1935, "y1": 802, "y2": 905}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 1543, "x2": 1696, "y1": 801, "y2": 835}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Insured.zip_code", "type": "field", "created_ts": "2018-04-05T08:58:55.448605", "section_id": "default", "element_id": "e75ef50b-d162-4b94-988b-9acc64051652", "is_doc_var": false, "domain_mapping": "Claim.Insured.zip_code", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T08:58:55.448598"}, {"value_coordinates": {"x1": 1541, "x2": 2260, "y1": 700, "y2": 800}, "has_label": true, "is_deleted": false, "label_coordinates": {"x1": 1542, "x2": 1656, "y1": 701, "y2": 741}, "page_no": 1, "is_variable_field": false, "solution_id": "ranger1_5f2a66b5-382a-4a37-8161-01a7491a06a7", "map_to": "Claim.Insured.city", "type": "field", "created_ts": "2018-04-05T09:00:40.949395", "section_id": "default", "element_id": "4f8da4c7-f1e5-4cb5-8ff2-072a70d9a1f4", "is_doc_var": false, "domain_mapping": "Claim.Insured.city", "template_id": "f2b50865-c9cb-4f6f-a625-246f36147438", "updated_ts": "2018-04-05T09:00:40.949385"}]};
	            // deferred.resolve({
	            //    data: data1
	            // });
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getListOfGroups = function(recId,sess_id) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/getInsights/'+recId,
	                  headers: httpPayload.getHeader(),
	                  data: recId
	            };
	            var deferred = $q.defer();
	
	//            deferred.resolve({
	//                data: tempObj
	//            });
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getFieldLevelData = function(obj) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/chart/one/'+obj.days,
	                  headers:httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getDocumentLevelData = function(obj) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/chart/two/'+obj.days,
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getListDays = function(obj) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/selectors/one/',
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getUrls = function(obj) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/pipeline/settings/',
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getNifiStatus = function(obj) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/pipeline/status/',
	                  headers: httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getDocumentTypesList = function(data) {
	            var req = {
	                  method: 'GET',
	                  url: 'api/documentTypes/',
	                  headers:httpPayload.getHeader()
	
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var processDetailsServices = {
	            getProcessList:_getProcessList,
	            postProcessList:_postProcessList,
	            getListOfGroups:_getListOfGroups,
	            getFieldLevelData:_getFieldLevelData,
	            getDocumentLevelData:_getDocumentLevelData,
	            getListDays:_getListDays,
	            getUrls:_getUrls,
	            getNifiStatus:_getNifiStatus,
	            getDocumentTypesList:_getDocumentTypesList
	          };
	
	          return processDetailsServices;
			});
	})();

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
	
		module.exports = angular.module('console.multiPage', [
	
		])
	        .controller('multiPageController', __webpack_require__(131))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.multiPage', {
	               url: '/multiPage/:id/:queue',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(132),
	                        controller: 'multiPageController',
	                        controllerAs: 'mpc',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/";
	                                 }
	                              }
	                        }
	
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$state','$stateParams','$rootScope','$sce','$location','documentsListService','$window',function($scope,$state,$stateParams,$rootScope,$sce,$location,documentsListService,$window) {
	    'use strict';
	    var vm = this;
	    $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	    vm.sess_id= $scope.loginData.sess_id;
	    $scope.multiImage = $window.innerHeight-148;
	    vm.i =0;
	    vm.displayMsg = [];
	    vm.displayFlag = false;
	    $scope.currentQueueName = localStorage.getItem("queueName");
	    $scope.parentfilename = localStorage.getItem("parentfilename");
	
	    vm.mutlicolumnsDefault = function () {
	        if(vm.no_of_pages >= 4){
	            vm.mutlicolumns = "col-lg-3 col-sm-3 col-md-3 col-xs-3";
	            vm.i = 3;
	        }
	
	        else if(vm.no_of_pages >=2){
	            vm.mutlicolumns = "col-lg-6 col-sm-6 col-md-6 col-xs-6";
	            vm.i = 2;
	        }
	        else {
	            vm.mutlicolumns = "col-lg-12 col-sm-12 col-md-12 col-xs-12";
	            vm.i = 1;
	        }
	    };
	    vm.zoominColumn = function () {
	        if(vm.i==2){
	            vm.mutlicolumns = "col-lg-12 col-sm-12 col-md-12 col-xs-12";
	            vm.i = 1;
	        }
	        else if(vm.i==3){
	            vm.mutlicolumns = "col-lg-6 col-sm-6 col-md-6 col-xs-6";
	            vm.i = 2;
	        }
	
	    };
	    vm.zoomoutColumn = function () {
	        if(vm.i==1){
	            vm.mutlicolumns = "col-lg-6 col-sm-6 col-md-6 col-xs-6";
	            vm.i = 2;
	
	        }
	        else if(vm.i==2){
	            if(vm.no_of_pages ==2){
	                vm.noZoom = true;
	            }
	            else{
	                vm.mutlicolumns = "col-lg-3 col-sm-3 col-md-3 col-xs-3";
	                vm.i = 3;
	            }
	        }
	
	    };
	
	
	    vm.range_validations = function (event,index,obj,type) {
	        vm.displayMsg = [];
	        vm.displayFlag = false;
	        if(type=='start_page'){
	            if(obj.start_page=='' || obj.start_page==null || obj.start_page==undefined){
	                vm.displayMsg[index] = 'Start Value Required';
	                vm.displayFlag = true;
	                return;
	            }
	            if(index == 0){
	                if(obj.start_page==1){
	
	                }
	                else{
	                    vm.displayMsg[index] = 'Start Value Must be 1';
	                    vm.displayFlag = true;
	                    return '';
	                }
	            }
	            else{
	                if(obj.start_page>vm.groups[index-1].end_page){
	
	                }
	                else{
	
	                    vm.displayMsg[index] = 'Start page value must be greater than previous row End page value';
	                    vm.displayFlag = true;
	                    return '';
	                }
	
	                if(obj.end_page!='' && obj.end_page!=null &&  obj.end_page!=undefined){
	                    if(obj.start_page<=obj.end_page){
	
	                    }
	                    else{
	                        vm.displayMsg[index] = 'Start page value must be less than or equal to End page value';
	                        vm.displayFlag = true;
	                        return;
	                    }
	                }
	                if(obj.start_page<vm.no_of_pages){
	
	                }
	                else{
	                    if(obj.start_page==vm.no_of_pages){
	
	                    }
	                    else {
	                        vm.displayMsg[index] = 'Start page value must be less than End page value';
	                        vm.displayFlag = true;
	                        return;
	                    }
	                }
	
	            }
	        }
	        if(type=='end_page'){
	            // if(!(obj.end_page>=obj.start_page )){
	            //     alert("it small then start_page");
	            // }
	            // else{
	            //     if(obj.end_page>vm.groups.length){
	            //         alert('exceed number');
	            //     }
	            //     else if(obj.end_page==vm.groups.length){
	            //         if(index+1<vm.groups.length){
	            //             alert("are you sure delete remaining items");
	            //             for(var i=index+1;i<vm.groups.length;i++){
	            //                 vm.groups.splice(i,1);
	            //             }
	            //
	            //         }
	            //     }
	            //
	            // }
	           if(obj.end_page=='' || obj.end_page==null || obj.end_page==undefined){
	                vm.displayMsg[index] = 'End page value Required';
	                vm.displayFlag = true;
	                return;
	            }
	           if(obj.end_page>vm.no_of_pages){
	               vm.displayMsg[index] = 'End page value must be less than or equal to last page count';
	               vm.displayFlag = true;
	               return;
	           }
	           else{
	             if(obj.end_page == vm.no_of_pages){
	                 if(index+1<vm.groups.length){
	                        // vm.displayMsg[index] = 'are you sure delete remaining below items';
	                        // vm.displayFlag = true;
	                        vm.groups.splice(index+1,vm.groups.length-(index+1));
	                        return;
	
	                 }
	             }
	             if(obj.start_page!='' && obj.start_page!=null &&  obj.start_page!=undefined){
	                 if(index+1<vm.groups.length){
	                    if(vm.groups[index+1].start_page!='' &&  vm.groups[index+1].start_page!=null && vm.groups[index+1].start_page!=undefined) {
	                        if (vm.groups[index + 1].start_page > obj.end_page) {
	
	                        }
	                        else {
	                            vm.displayMsg[index] = 'End page value must be less then below row Start page value';
	                            vm.displayFlag = true;
	                            //alert("end Value must be less then below row start value");
	                            return
	                        }
	                    }
	                 }
	             }
	             if(obj.start_page<=obj.end_page){
	
	             }
	             else{
	                 vm.displayMsg[index] = 'End page value must be less then or equal to  Start page value';
	                 vm.displayFlag = true;
	             }
	           }
	           if(obj.end_page<vm.no_of_pages){
	               if(index+1==vm.groups.length){
	                   vm.groups.push({
	                         "start_page": '',
	                         "end_page": '',
	                         "template_name": 'unknown',
	                         "template_id":'unknown'
	                   })
	                   vm.updateDocuments($scope.typesList);
	               }
	           }
	
	
	        }
	
	    };
	
	    vm.getClassificationDetails = function () {
	        documentsListService.getClassificationInfo({'sess_id':vm.sess_id,'id':$stateParams.id}).then(function (data) {
	            if(data.data.status=='success'){
	                vm.multi_page_info = data.data.data;
	                vm.images = vm.multi_page_info.pages;
	                vm.groups = vm.multi_page_info.page_groups;
	                vm.temp = Object.keys(vm.images).length;
	                vm.no_of_pages = vm.multi_page_info.metadata.properties.num_pages;
	                vm.volume = vm.multi_page_info.volume;
	                vm.mutlicolumnsDefault();
	                vm.getDocumentTypes();
	                console.log(data.data);
	
	
	            }
	            else{
	                $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                });
	            }
	        },function (err) {
	            $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	            });
	        })
	    };
	
	    vm.updateDocuments = function(data){
	        for(var i=0;i<vm.groups.length;i++){
	                    vm.listOfDocumentTypes[i] = angular.copy(data);
	                    vm.listOfDocumentTypes[i].unshift({'template_id':'unknown','template_name':'unknown'})
	                    vm.listOfDocumentTypes[i].push({'template_id':'Choose Domain Objects >','template_name':'Choose Domain Objects >'});
	                    vm.listOfDocumentTypesDup[i] = angular.copy(vm.listOfDocumentTypes[i]);
	                    vm.document_types_map = {};
	                    angular.forEach(vm.listOfDocumentTypes[0],function (value,key) {
	                        vm.document_types_map[value.template_id] = value;
	                    })
	        }
	    };
	    vm.getDocumentTypes = function () {
	        vm.listOfDocumentTypes = [];
	        vm.listOfDocumentTypesDup = [];
	
	        documentsListService.getDocumentTypesList({'sess_id':vm.sess_id}).then(function (data) {
	            if(data.data.status=='success'){
	                $scope.typesList = data.data.data;
	                vm.updateDocuments($scope.typesList);
	
	
	            }
	            else{
	                $.UIkit.notify({
	                                   message : data.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                });
	            }
	        },function (err) {
	            $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	            });
	        })
	    };
	    vm.change_classification = function (obj) {
	         if(obj.template_id=='Choose Domain Objects >'){
	            vm.listOfDocumentTypes[obj.index] = $scope.domainObjectsListDup;
	         }
	         else if(obj.template_id=='Choose Template <'){
	           vm.listOfDocumentTypes[obj.index] = vm.listOfDocumentTypesDup[obj.index];
	         }
	         else{
	             vm.displayMsg = [];
	             vm.displayFlag = false;
	             if(obj.start_page=='' || obj.start_page==null || obj.start_page==undefined){
	                 vm.displayMsg[index] = 'Start page value required';
	                 vm.displayFlag = true;
	                 return;
	             }
	             else{
	                  if(obj.end_page=='' || obj.end_page==null || obj.end_page==undefined){
	                    vm.displayMsg[index] = 'End page value required';
	                    vm.displayFlag = true;
	                    return;
	                 }
	                 var index = vm.getIndex(obj);
	                 if(index+1 == vm.groups.length) {
	                     if (obj.end_page < vm.no_of_pages) {
	                         vm.groups.push({
	                             "start_page": '',
	                             "end_page": '',
	                             "template_name": 'unknown',
	                             "template_id":'unknown'
	                         })
	                         vm.updateDocuments($scope.typesList);
	                     }
	                 }
	
	             }
	
	             if(vm.document_types_map[obj.template_id] == undefined){
	                obj.domain_mapping =  vm.domainObjectsMap[obj.template_id];
	             }
	             else{
	                obj.template_name = vm.document_types_map[obj.template_id].template_name;
	             }
	         }
	
	    };
	
	
	    vm.getClassificationDetails();
	    vm.getIndex = function (obj) {
	        for (var i = 0; i < vm.groups.length ; i++) {
	                if (vm.groups[i].template_id === obj.template_id) {
	                    return i;
	                }
	        }
	
	    };
	
	    vm.submitClassificationReview = function () {
	        console.log(vm.groups);
	        vm.displayMsg = [];
	        vm.displayFlag = false;
	        vm.count = 0
	        for(var i=0;i<vm.groups.length;i++){
	           if(vm.groups[i].start_page=='' || vm.groups[i].start_page==null || vm.groups[i].start_page==undefined || vm.groups[i].end_page=='' || vm.groups[i].end_page==null || vm.groups[i].end_page==undefined || vm.groups[i].template_name=='' || vm.groups[i].template_name==null || vm.groups[i].template_name==undefined){
	                vm.displayMsg[i] = 'Please Fill Empty Value';
	                vm.displayFlag = true;
	                return;
	           }
	           for(var j=vm.groups[i].start_page;j<=vm.groups[i].end_page;j++) {
	               vm.count++;
	           }
	        }
	        if(vm.count!=vm.no_of_pages){
	            vm.displayFlag = true;
	            vm.displayMsg[100] = 'Some Pages are Missing';
	            return;
	        }
	
	        for(var i=0;i<vm.groups.length;i++) {
	            delete vm.groups[i]['index'];
	            if(vm.groups[i].domain_mapping!=undefined){
	                vm.groups[i].template_name = 'unknown';
	                vm.groups[i].template_id = 'unknown';
	            }
	
	        }
	
	
	
	        documentsListService.reviewedClassification({'sess_id':vm.sess_id,'id':$stateParams.id,'data':{"page_groups":vm.groups}}).then(function (resp) {
	            if(resp.data.status=='success'){
	                $.UIkit.notify({
	                                   message : resp.data.msg,
	                                   status  : 'success',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                });
	                if($scope.loginData.role == "sv"){
	                    $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	                }
	                else{
	                    $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	                }
	            }
	            else{
	                $.UIkit.notify({
	                                   message : resp.data.msg,
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                });
	            }
	
	        },function (err) {
	             $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	            });
	        })
	    };
	
	    vm.getDomainObjectsInfo = function(){
	        $scope.sectionEntitiesList = [];
	        $scope.entitiesList = [];
	        documentsListService.getDomainObjectsList({'sess_id':vm.sess_id}).then(function(resp){
	          console.log(resp.data);
	          $scope.domainObjectsList = resp.data.domain_object;
	          $scope.domainObjectsListDup = [];
	          vm.domainObjectsMap = {};
	          angular.forEach($scope.domainObjectsList,function(value,key){
	                var obj = {'template_id':value,'template_name':value};
	                 vm.domainObjectsMap[obj.template_id] = obj.template_name;
	                $scope.domainObjectsListDup.push(obj);
	          })
	          $scope.domainObjectsListDup.push({'template_id':'Choose Template <','template_name':'Choose Template <'})
	
	        },function(err){
	             console.log(err)
	             $.UIkit.notify({
	                     message : "Internal server error",
	                     status  : 'warning',
	                     timeout : 3000,
	                     pos     : 'top-center'
	             });
	        });
	    };
	    vm.getDomainObjectsInfo();
	
	    $scope.goToCaseDashboard = function(){
	        if($scope.loginData.role == "sv"){
	            $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	        }
	        else{
	            $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	        }
	    };
	
	
	
	}];

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	module.exports = "\n\n<div class=\"row custom-header\" style=\"padding:10px;\">\n    <div class=\"col-lg-4 col-md-4 col-sm-4 no-padding extraction-title-container review-breadcrumb\">\n        <!-- <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item breadcrumb-heading\"><a ng-click=\"goToCaseDashboard()\">Dashboard</a></li>\n            <li class=\"breadcrumb-item active\">{$ mpc.multi_page_info.metadata.properties.filename $}</li>\n        </ol> -->\n        <ol class=\"breadcrumb\">\n                <li>\n                    <a ui-sref=\"app.agentDashboard\">\n                            <span class=\"ext-title\">\n                                    Queues\n                                </span>\n                    </a> \n                    <span class=\"ext-title\" style=\"width: 10px;color:#555\"> > </span>\n                </li>\n                <li class=\"breadcrumb-item \">\n                    <a ng-click=\"goToCaseDashboard()\">\n                        <span class=\"ext-title\">\n                            {$ currentQueueName $}\n                        </span>\n                        <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                    </a>\n                </li>\n                <li class=\"breadcrumb-item \" ng-if=\"parentfilename\">\n                       \n                            <span class=\"ext-title\">\n                                {$ parentfilename $}\n                            </span>\n                            <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                       \n                    </li>\n                <li class=\"breadcrumb-item active\">\n                    <span class=\"ext-title\">\n                        {$ mpc.multi_page_info.metadata.properties.filename $}</span>\n                    <span class=\"breadcrumbhover\">\n                        <img ng-if=\"mpc.multi_page_info.metadata.properties.filename\" src=\"./static/ref-app/app/images/breadcrumb-1.png\" class=\"breadcrumbimg\" />\n                        <div id=\"breadcrumbdiv\" class=\"hoverbreadcrumb\">\n                            <ol class=\"breadcrumb\">\n                                <li>Queues</li>\n                                <li class=\"breadcrumb-item \">\n                                    {$ currentQueueName $}\n                                </li>\n                                <li class=\"breadcrumb-item\" ng-if=\"parentfilename\">\n                                    {$ parentfilename $}\n                                </li>\n                                <li class=\"breadcrumb-item active\">\n                                    <span class=\"ext-title\">\n                                        {$ mpc.multi_page_info.metadata.properties.filename $}</span>\n                                </li>\n                            </ol>\n                        </div>\n                    </span>\n                </li>\n            </ol>\n    </div>\n\n</div>\n<div class=\"row multiPage row-eq-height\">\n    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 text-center multiImages\" style=\"max-height:{$ multiImage $}px;overflow:auto;\">\n        <div class=\"btn-group\" ng-hide=\"mpc.temp==1\">\n            <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"mpc.zoomoutColumn();\" ng-disabled=\"noZoom\">\n                <i class=\"fa fa-minus-circle\" aria-hidden=\"true\"></i>\n            </button>\n            <button type=\"button\" class=\"btn btn-default btn-zoom btn-magnifier\">\n                <img src=\"/static/ref-app/app/images/zoomIcon.png\" style=\"width: 18px;\"/>\n            </button>\n            <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"mpc.zoominColumn();\">\n                <i class=\"fa fa-plus-circle\"></i>\n            </button>\n        </div>\n        <div class=\"row\">\n            <a>\n                <div ng-class=\"mpc.mutlicolumns\" ng-repeat=\"(key,value) in mpc.images track by $index\" style=\"padding-bottom: 10px;\">\n                    <img src=\"/static{$ mpc.volume  $}{$ value['metadata']['raw'].key $}\" class=\"img-thumbnail\">\n                </div>\n            </a>\n        </div>\n    </div>\n    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\" style=\"background-color: #f3f7fb;max-height:{$ multiImage $}px;overflow:auto; \">\n        <h5>Provide page range and select document type to classify the document</h5>\n        <hr>\n        <div class=\"row\" >\n            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n                <div>\n                    <div class=\"row\" style=\"margin-bottom: 10px;border-bottom: 1px solid #dedede;\">\n                        <div class=\"col-lg-6 col-sm-6 col-xs-6 col-md-6\">\n                            <label>Page Range</label>\n                        </div>\n                        <div class=\"col-lg-6 col-sm-6 col-xs-6 col-md-6\">\n                            <label>Document Type</label>\n                        </div>\n                    </div>\n                    <div class=\"row custom_margin\" ng-repeat=\"obj in mpc.groups track by $index\" ng-init=\"obj.index=$index\">\n                        <div class=\"col-lg-2 col-sm-2 col-xs-2 col-md-2\">\n                            <input type=\"number\" class=\"form-control\" ng-model=\"obj.start_page\" ng-blur=\"mpc.range_validations($event,$index,obj,'start_page')\"/>\n                        </div>\n                        <div class=\"col-lg-2 col-sm-2 col-xs-2 col-md-2\">\n                            <input type=\"number\" class=\"form-control\" ng-model=\"obj.end_page\"   ng-blur=\"mpc.range_validations($event,$index,obj,'end_page')\"/>\n                        </div>\n                        <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8\">\n                            <select class=\"form-control\" ng-model=\"obj.template_id\" ng-change=\"mpc.change_classification(obj)\">\n                                  <option ng-repeat=\"(key,value) in mpc.listOfDocumentTypes[obj.index] track by $index\"  value=\"{$  value.template_id $}\">{$  value.template_name $}</option>\n\n                            </select>\n                        </div>\n                        <label class=\"errorClass\" ng-if=\"mpc.displayFlag\">{$ mpc.displayMsg[$index] $}</label>\n                    </div>\n\n                </div>\n            </div>\n\n        </div>\n            <span style=\"color:red\">{$ mpc.displayMsg[100] $}</span>\n        <br>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n                <button class=\"btn btn-custom btn-block\" ng-click=\"mpc.submitClassificationReview()\" ng-disabled=\"mpc.displayFlag\">Done</button>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 133 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.newDashboardService', [])
			.service('newDashboardService', function($state,$q, $http, httpPayload) {
	
	          var _getChartData = function(data) {
	            var req = {
	                  method: 'POST',
	                  url: 'api/dashboard/',
	                  headers: httpPayload.getHeader(),
	                  data:data.data
	            };
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var newDashboardService = {
	            getChartData:_getChartData
	          };
	
	          return newDashboardService;
			});
	})();

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	    //require('./services/module.js');
		//require('./dashboard/dashboard.module.js');
		//require('./entitygraph/entitygraph.module.js');
		//require('./solutionsetup/solutionsetup.module.js');
	
		module.exports = angular.module('console.entityLinking', [
	        //'console.dashboard.entitygraph'
		    //'console.dashboard.solutionsetup'
		    //'console.layout.bodycontent.dashboard.services'
		])
	        .controller('entityLinkingController', __webpack_require__(135))
	         .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.entityLinking', {
	               url: '/entityLinking/:id/:type/:queue',
	                views: {
	                    'bodyContentContainer@app': {
	                        template: __webpack_require__(136),
	                        controller: 'entityLinkingController',
	                        controllerAs: 'el',
	                        cache :false,
	                        resolve: {
	                              logedIn:function($state){
	                                 var loginData = JSON.parse(localStorage.getItem('userInfo'));
	                                 if(!loginData){
	                                         window.location.href = "http://"+ location.host+"/logout";
	                                 }
	                              }
	                        }
	
	                    }
	                },
	
					data: {
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
	            });
	        }]);
	})();

/***/ }),
/* 135 */
/***/ (function(module, exports) {

	module.exports = ['$scope','$rootScope','ngDialog','$state','$stateParams','$location','$anchorScroll','entityLinkingService','processDetailsServices','documentsListService','$window','$sce',
	function($scope,$rootScope,ngDialog,$state,$stateParams,$location,$anchorScroll,entityLinkingService,processDetailsServices,documentsListService,$window,$sce) {
		'use strict';
	
		 var vm = this;
	     window.scrollTo(0,0);
	     $scope.loginData = JSON.parse(localStorage.getItem('userInfo'));
	     vm.sess_id= $scope.loginData.sess_id;
	     vm.loginDataObj = $scope.loginData;
	     $scope.showDomainTab = false;
	     $scope.rightPanelHeight  =$window.innerHeight-150;
	     $scope.height = $window.innerHeight - 96;
	     $scope.pdfHeight = $window.innerHeight - 130;
	     $scope.elementHeight = $window.innerHeight - 240;
	     $scope.url = $location.protocol() + '://'+ $location.host() +':'+  $location.port();
	     $scope.getDemo = false;
	     $rootScope.inSolution = true;
	     $scope.showNavigation = false;
	     $scope.entitiesData=[];
	     $scope.rowHighlight = [];
	     $scope.rowHighlightAttr = [];
	     $scope.currentDocId = $stateParams.id;
	     $scope.newNode = '';
	     $scope.coordinatesDisplay=[];
	     $scope.checkObj = {};
	     $scope.checkObj.accept = true;
	     $scope.checkObj.correct = true;
	     $scope.checkObj.review = true;
	     vm.showPopup = {};
	     vm.showPopup.popup = false;
	     vm.showPopupConfirm = false;
	     vm.annotatinclickfromjs = false;
	     $scope.listOfNewAttributes = [];
	     $scope.displayNewEntity = false;
	     $scope.displayNewAttribute = false;
	     $scope.currentQueueName = localStorage.getItem("queueName");
	     $scope.parentfilename = localStorage.getItem("parentfilename");
	     /*  extraction code starts */
	
	    var pdfjsLib = window['PDFAnnotate'];
	    const { UI } = pdfjsLib;
	    var documentId = '';
	    vm.pdfSrc = "";
	    var PAGE_HEIGHT;
	    var RENDER_OPTIONS = {
	        documentId,
	        pdfDocument: null,
	        scale: parseFloat(localStorage.getItem(`${documentId}/scale`), 10) || 0.25,
	        rotate: parseInt(localStorage.getItem(`${documentId}/rotate`), 10) || 0
	    };
	    //var anno = document.getElementById("annotationdiv");
	    //anno.innerHTML = '';
	    $scope.annotations = [];
	
	    //pdfjsLib.setStoreAdapter(new pdfjsLib.LocalStoreAdapter());
	    function getAnnotations(documentId) {
	        return $scope.annotations;
	    }
	
	
	    function findAnnotation(documentId, annotationId) {
	        var index = -1;
	        var annotations = getAnnotations(documentId);
	        for (var i = 0, l = annotations.length; i < l; i++) {
	            if (annotations[i].uuid === annotationId) {
	                index = i;
	                break;
	            }
	        }
	        return index;
	    }
	
	    $scope.MyStoreAdapter = new pdfjsLib.StoreAdapter({
	        getAnnotations(documentId, pageNumber) {
	            return new Promise((resolve, reject) => {
	                var annotations = getAnnotations(documentId).filter((i) => {
	                    return i.page === pageNumber && i.class === 'Annotation';
	                });
	
	                resolve({
	                    documentId,
	                    pageNumber,
	                    annotations
	                });
	            });
	        },
	
	        getAnnotation(documentId, annotationId) {
	            var annotation;
	            for (var i = 0, l = $scope.annotations.length; i < l; i++) {
	                if ($scope.annotations[i].uuid === annotationId) {
	                    annotation = $scope.annotations[i];
	                    break;
	                }
	            }
	
	            return Promise.resolve(annotation);
	            //return  Promise.resolve(getAnnotations(documentId)[findAnnotation(documentId, annotationId)]);
	        },
	
	
	        // getAnnotation(documentId, annotationId) {
	        //     console.log("getannotation");
	        //     var anno;
	        //     for (var i = 0; i < $scope.annotations.length; i++) {
	        //         if ($scope.annotations[i].uuid == annotationId)
	        //             anno = $scope.annotations[i];
	        //     }
	        //     return Promise.resolve(anno);
	        // },
	
	        addAnnotation(documentId, pageNumber, annotation) {
	            annotation.class = 'Annotation';
	            annotation.uuid = $scope.uniqueIdGenerator();
	            annotation.page = pageNumber;
	
	            // var annotations = getAnnotations(documentId);
	            //$scope.annotations.push(annotation);
	            // updateAnnotations(documentId, annotations);
	            let existingnode = {};
	            if ($scope.updatewithnewannotationNode == true) {
	                existingnode = $scope.updannotation;
	                existingnode.x = annotation.x;
	                existingnode.y = annotation.y;
	                existingnode.width = annotation.width;
	                existingnode.height = annotation.height;
	                existingnode.page_num = annotation.page;
	                existingnode.page = annotation.page;
	
	                var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + existingnode.uuid + "']")
	                allrect.forEach(function (rect) {
	                    //rect.setAttribute("stroke", "yellow");
	                    rect.remove();
	                });
	
	
	                UI.disableEdit();
	                //vm.updateNode(existingnode, existingnode.typeoffield);
	
	            } else if (vm.newcell) {
	                console.log(vm.newcelldata);
	                annotation.uuid = vm.newcelldata.temp_id;
	                existingnode = annotation;
	                vm.adddatatoTable(existingnode);
	                $scope.annotations.push(existingnode);
	            }
	            else {
	                vm.addnewAnnotation(annotation);
	                existingnode = annotation;
	            }
	            return new Promise((resolve, reject) => {
	
	                resolve(existingnode);
	            });
	
	
	        },
	
	        editAnnotation(documentId, pageNumber, annotation) {
	            console.log("for first staart", Date.now());
	            vm.selectedNode = annotation;
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == annotation.uuid) {
	                    $scope.annotations[i] = annotation;
	                    break;
	                }
	            }
	            console.log("for first done", Date.now());
	            let p = document.getElementById("pdf-annotate-edit-overlay");
	            if (p) {
	                p.remove();
	            }
	            //vm.updateNode(annotation, annotation.typeoffield);
	
	            return new Promise((resolve) => {
	                resolve(true);
	            })
	
	            // return new Promise((resolve) => {
	            //     console.log("for resolve start", Date.now());
	            //     resolve(annotation);
	            //     //UI.disableEdit();
	
	            //     console.log("for resolve done", Date.now());
	            // });
	
	
	
	
	        },
	
	        deleteAnnotation(documentId, annotationId) {
	
	
	            // for (var i = 0; i < $scope.annotations.length; i++) {
	            //     if ($scope.annotations[i].uuid == annotationId) {
	            //         vm.editablenode($scope.annotations[i]);
	            //         break;
	            //     }
	            // }
	            // enableDrawRect("area");
	            // return false;
	
	            var index = -1;
	            for (var i = 0; i < $scope.annotations.length; i++) {
	                if ($scope.annotations[i].uuid == annotationId) {
	                    index = i;
	                    enableDrawRect("area");
	                    vm.editablenode($scope.annotations[i]);
	                    break;
	                }
	            }
	            if (index > -1) {
	                $scope.annotations.splice(index, 1);
	            }
	
	            return new Promise((resolve, reject) => {
	                resolve(true);
	            });
	
	
	
	        },
	
	        addComment(documentId, annotationId, content) {
	
	        },
	
	        deleteComment(documentId, commentId) {
	
	        },
	        getComments(documentId, annotationId) {
	            var comments = [];
	            return new Promise((resolve) => {
	                resolve(comments);
	            })
	        }
	    });
	
	    pdfjsLib.setStoreAdapter($scope.MyStoreAdapter);
	
	
	    PDFJS.workerSrc = '/static/ref-app/app/sharedPDFJS/pdf.worker.js';
	
	
	    // Render stuff
	    var NUM_PAGES = 0;
	
	    function handleannotationrightclick(e, node) {
	        vm.selectedNode = node;
	        var uuid = e.uuid; //(e.toElement.innerHTML).split("__")[0];
	        var pageNum = e.page; //(e.toElement.innerHTML).split("__")[1];
	        var target = document.querySelector("[data-pdf-annotate-id='" + uuid + "']");
	        $scope.existtarget = target;
	        let scalerender = RENDER_OPTIONS.scale * 100;
	        let scaleheight = ((scalerender * e.y) / 100);
	        let scalewidth = ((scalerender * e.x)/100);
	        $scope.current_page = pageNum;
	        document.getElementById('content-wrapper').scrollTop = ((parseInt(pageNum) - 1) * PAGE_HEIGHT) + scaleheight ;
	        document.getElementById('content-wrapper').scrollLeft = scalewidth ;
	
	        UI.enableEdit();
	        vm.annotatinclickfromjs = true;
	        UI.fireEvent('annotation:click', target);
	        setTimeout(function(){
	         vm.annotatinclickfromjs = false;
	        },2000);
	    }
	     vm.render = function() {
	        document.getElementById('loadingpdf').style.display = 'block';
	        PDFJS.getDocument(RENDER_OPTIONS.documentId).then((pdf) => {
	
	            RENDER_OPTIONS.pdfDocument = pdf;
	
	            var viewer = document.getElementById('viewer');
	            viewer.innerHTML = '';
	            NUM_PAGES = pdf.pdfInfo.numPages;
	            $scope.no_of_pages = NUM_PAGES;
	            $scope.$apply();
	            for (var i = 0; i < NUM_PAGES; i++) {
	                var page = UI.createPage(i + 1);
	                viewer.appendChild(page);
	                UI.renderPage(i + 1, RENDER_OPTIONS).then(([pdfPage, annotations]) => {
	                    var viewport = pdfPage.getViewport(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate);
	                    PAGE_HEIGHT = viewport.height;
	                });
	            }
	
	
	            document.getElementById('loadingpdf').style.display = 'none';
	            UI.disableEdit();
	
	            // UI.renderPage(1, RENDER_OPTIONS).then(([pdfPage, annotations]) => {
	            //     let viewport = pdfPage.getViewport(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate);
	            //     PAGE_HEIGHT = viewport.height;
	            // });
	//
	//            if (vm.selectedNode != null) {
	//                setTimeout(function () {
	//                    setrectColor("transparent");
	//                    setHeilight(vm.selectedNode.regions[0].uuid);
	//                    handleannotationrightclick(vm.selectedNode.regions[0], vm.selectedNode);
	//                }, 300)
	//
	//            }
	
	        });
	    }
	
	    function enableDrawRect(type) {
	        switch (type) {
	            case 'cursor':
	                UI.enableEdit();
	                break;
	            case 'draw':
	                UI.enablePen();
	                break;
	            case 'text':
	                UI.enableText();
	                break;
	            case 'point':
	                UI.enablePoint();
	                break;
	            case 'area':
	            case 'highlight':
	            case 'strikeout':
	                UI.enableRect(type);
	                break;
	        }
	    };
	
	    function disableDrawRect(tooltype) {
	        switch (tooltype) {
	            case 'cursor':
	                UI.disableEdit();
	                break;
	            case 'draw':
	                UI.disablePen();
	                break;
	            case 'text':
	                UI.disableText();
	                break;
	            case 'point':
	                UI.disablePoint();
	                break;
	            case 'area':
	            case 'highlight':
	            case 'strikeout':
	                UI.disableRect();
	                break;
	        }
	    };
	
	    function setrectColor(colortype) {
	        var allrect = document.querySelectorAll("rect");
	        allrect.forEach(function (rect) {
	            if (colortype == "transparent") {
	                //rect.setAttribute("stroke", colortype);
	                rect.style.display = "none";
	            }
	            else {
	                rect.style.display = "block";
	            }
	        });
	    }
	
	    function setHeilight(annotationid) {
	        var allrect = document.querySelectorAll("rect[data-pdf-annotate-id='" + annotationid + "']")
	        var firstrect = false;
	        allrect.forEach(function (rect) {
	            if (firstrect == false) {
	                rect.style.display = "block";
	                firstrect = true;
	
	                var stroke = rect.getAttribute("stroke");
	                if (stroke) {
	                    //rect.setAttribute("fill", stroke);
	                    rect.setAttribute("stroke-width", '16px');
	                    //rect.style.opacity = 0.2;
	                }
	            } else {
	                rect.remove();
	            }
	        });
	    }
	
	    function setbackground() {
	        var allrect = document.querySelectorAll("rect");
	        allrect.forEach(function (rect) {
	            var stroke = rect.getAttribute("stroke");
	            if (stroke) {
	                rect.setAttribute("fill", "transparent");
	                rect.style.opacity = 0.6;
	            }
	        });
	    }
	    function filterRect(type, isshow) {
	        var allrect = document.querySelectorAll("rect[status='" + type + "']")
	        allrect.forEach(function (rect) {
	            //rect.setAttribute("stroke", "transparent");
	            if (isshow) {
	                rect.style.display = "block";
	            } else {
	                rect.style.display = "none";
	            }
	        });
	    }
	
	    function handleZoom(scale) {
	        scale = parseFloat(scale, 10);
	        let rotate = 0;
	
	        if (RENDER_OPTIONS.scale !== scale || RENDER_OPTIONS.rotate !== rotate) {
	            RENDER_OPTIONS.scale = scale;
	            RENDER_OPTIONS.rotate = rotate;
	
	            localStorage.setItem(`${RENDER_OPTIONS.documentId}/scale`, RENDER_OPTIONS.scale);
	            localStorage.setItem(`${RENDER_OPTIONS.documentId}/rotate`, RENDER_OPTIONS.rotate % 360);
	
	            vm.render();
	        }
	    }
	
	    vm.pdfinit = function(){
	
	    // Text stuff
	    (function () {
	        var textSize;
	        var textColor;
	
	        // function initText() {
	        //   var size = document.querySelector('.toolbar .text-size');
	        //   [8, 9, 10, 11, 12, 14, 18, 24, 30, 36, 48, 60, 72, 96].forEach((s) => {
	        //     size.appendChild(new Option(s, s));
	        //   });
	
	        //   setText(
	        //     localStorage.getItem(`${RENDER_OPTIONS.documentId}/text/size`) || 10,
	        //     localStorage.getItem(`${RENDER_OPTIONS.documentId}/text/color`) || '#000000'
	        //   );
	
	        //   initColorPicker(document.querySelector('.text-color'), textColor, function (value) {
	        //     setText(textSize, value);
	        //   });
	        // }
	
	        function setText(size, color) {
	            var modified = false;
	
	            if (textSize !== size) {
	                modified = true;
	                textSize = size;
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/text/size`, textSize);
	                document.querySelector('.toolbar .text-size').value = textSize;
	            }
	
	            if (textColor !== color) {
	                modified = true;
	                textColor = color;
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/text/color`, textColor);
	
	                var selected = document.querySelector('.toolbar .text-color.color-selected');
	                if (selected) {
	                    selected.classList.remove('color-selected');
	                    selected.removeAttribute('aria-selected');
	                }
	
	                selected = document.querySelector(`.toolbar .text-color[data-color="${color}"]`);
	                if (selected) {
	                    selected.classList.add('color-selected');
	                    selected.setAttribute('aria-selected', true);
	                }
	
	            }
	
	            if (modified) {
	                UI.setText(textSize, textColor);
	            }
	        }
	
	        function handleTextSizeChange(e) {
	            setText(e.target.value, textColor);
	        }
	
	        document.querySelector('.toolbar .text-size').addEventListener('change', handleTextSizeChange);
	
	        // initText();
	    })();
	
	    // Pen stuff
	    (function () {
	        var penSize;
	        var penColor;
	
	        function initPen() {
	            var size = document.querySelector('.toolbar .pen-size');
	            for (var i = 0; i < 20; i++) {
	                size.appendChild(new Option(i + 1, i + 1));
	            }
	
	            setPen(
	                1,
	                '#000000'
	            );
	
	            // initColorPicker(document.querySelector('.pen-color'), penColor, function (value) {
	            //   setPen(penSize, value);
	            // });
	        }
	
	        function setPen(size, color) {
	            var modified = false;
	
	            if (penSize !== size) {
	                modified = true;
	                penSize = size;
	                document.querySelector('.toolbar .pen-size').value = penSize;
	            }
	
	            if (penColor !== color) {
	                modified = true;
	                penColor = color;
	
	                var selected = document.querySelector('.toolbar .pen-color.color-selected');
	                if (selected) {
	                    selected.classList.remove('color-selected');
	                    selected.removeAttribute('aria-selected');
	                }
	
	                selected = document.querySelector(`.toolbar .pen-color[data-color="${color}"]`);
	                if (selected) {
	                    selected.classList.add('color-selected');
	                    selected.setAttribute('aria-selected', true);
	                }
	            }
	
	            if (modified) {
	                UI.setPen(penSize, penColor);
	            }
	        }
	
	        function handlePenSizeChange(e) {
	            setPen(e.target.value, penColor);
	        }
	
	        document.querySelector('.toolbar .pen-size').addEventListener('change', handlePenSizeChange);
	
	        initPen();
	    })();
	
	    // Toolbar buttons
	    (function () {
	        var tooltype = localStorage.getItem(`${RENDER_OPTIONS.documentId}/tooltype`) || 'cursor';
	        if (tooltype) {
	            setActiveToolbarItem(tooltype, document.querySelector(`.toolbar button[data-tooltype=${tooltype}]`));
	        }
	
	        function setActiveToolbarItem(type, button) {
	            var active = document.querySelector('.toolbar button.active');
	            if (active) {
	                active.classList.remove('active');
	
	                switch (tooltype) {
	                    case 'cursor':
	                        UI.disableEdit();
	                        break;
	                    case 'draw':
	                        UI.disablePen();
	                        break;
	                    case 'text':
	                        UI.disableText();
	                        break;
	                    case 'point':
	                        UI.disablePoint();
	                        break;
	                    case 'area':
	                    case 'highlight':
	                    case 'strikeout':
	                        UI.disableRect();
	                        break;
	                }
	            }
	
	            if (button) {
	                button.classList.add('active');
	            }
	            if (tooltype !== type) {
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/tooltype`, type);
	            }
	            tooltype = type;
	
	            switch (type) {
	                case 'cursor':
	                    UI.enableEdit();
	                    break;
	                case 'draw':
	                    UI.enablePen();
	                    break;
	                case 'text':
	                    UI.enableText();
	                    break;
	                case 'point':
	                    UI.enablePoint();
	                    break;
	                case 'area':
	                case 'highlight':
	                case 'strikeout':
	                    UI.enableRect(type);
	                    break;
	            }
	        }
	
	        function handleToolbarClick(e) {
	            if (e.target.nodeName === 'BUTTON') {
	                setActiveToolbarItem(e.target.getAttribute('data-tooltype'), e.target);
	            }
	        }
	
	        document.querySelector('.toolbar').addEventListener('click', handleToolbarClick);
	    })();
	
	    // Scale/rotate
	    (function () {
	        function setScaleRotate(scale, rotate) {
	            scale = parseFloat(scale, 10);
	            rotate = parseInt(rotate, 10);
	
	            if (RENDER_OPTIONS.scale !== scale || RENDER_OPTIONS.rotate !== rotate) {
	                RENDER_OPTIONS.scale = scale;
	                RENDER_OPTIONS.rotate = rotate;
	
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/scale`, RENDER_OPTIONS.scale);
	                localStorage.setItem(`${RENDER_OPTIONS.documentId}/rotate`, RENDER_OPTIONS.rotate % 360);
	
	                vm.render();
	            }
	        }
	
	        function handleScaleChange(e) {
	            setScaleRotate(e.target.value, RENDER_OPTIONS.rotate);
	        }
	
	        function handleRotateCWClick() {
	            setScaleRotate(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate + 90);
	        }
	
	        function handleRotateCCWClick() {
	            setScaleRotate(RENDER_OPTIONS.scale, RENDER_OPTIONS.rotate - 90);
	        }
	
	        document.querySelector('.toolbar select.scale').value = RENDER_OPTIONS.scale;
	        document.querySelector('.toolbar select.scale').addEventListener('change', handleScaleChange);
	        document.querySelector('.toolbar .rotate-ccw').addEventListener('click', handleRotateCCWClick);
	        document.querySelector('.toolbar .rotate-cw').addEventListener('click', handleRotateCWClick);
	    })();
	
	    // Clear toolbar button
	    (function () {
	        function handleClearClick(e) {
	            if (confirm('Are you sure you want to clear annotations?')) {
	                for (var i = 0; i < NUM_PAGES; i++) {
	                    document.querySelector(`div#pageContainer${i + 1} svg.annotationLayer`).innerHTML = '';
	                }
	
	                localStorage.removeItem(`${RENDER_OPTIONS.documentId}/annotations`);
	            }
	        }
	        document.querySelector('a.clear').addEventListener('click', handleClearClick);
	    })();
	
	    }
	
	
	
	    function disableEdition(){
	    setTimeout(function(){
	        if(document.getElementById("pdf-annotate-edit-overlay"))
	        document.getElementById("pdf-annotate-edit-overlay").remove();
	        },100);
	
	    }
	    function handleAnnotationClick(target) {
	
	        //setrectColor("transparent");
	        if(vm.selectedElementFlag){
	             setbackground();
	             vm.selectedElementId = target.dataset.pdfAnnotateId;
	             target.setAttribute("fill","#3792c2");
	             target.setAttribute("fill-opactiy","0.4");
	             disableEdition();
	
	        }else{
	            $scope.rowHighlight = [];
	            if(!vm.annotatinclickfromjs && document.getElementsByClassName(target.dataset.pdfAnnotateId) && document.getElementsByClassName(target.dataset.pdfAnnotateId)[0]){
	                document.getElementsByClassName(target.dataset.pdfAnnotateId)[0].scrollIntoView();
	                var p = document.getElementsByClassName(target.dataset.pdfAnnotateId)[0];
	                if(!p.closest("ol").classList.contains("in")){
	                    var s = p.closest("ol").closest("li");
	                    s.querySelector(".nodetoggle").click();
	                };
	                $scope.rowHighlight[target.dataset.pdfAnnotateId] = 'highlightClass';
	                UI.disableEdit();
	            }
	            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	                    $scope.$apply();
	            }
	            disableDrawRect("area");
	
	        }
	
	
	    }
	
	    UI.addEventListener('annotation:click', handleAnnotationClick);
	
	    /* extractioncode ends */
	
	    function setOrderForAnnotations(){
	        var svgs = document.querySelectorAll("svg");
	        for(var k=0;k<svgs.length;k++){
	            var allrects = svgs[k].querySelectorAll("rect");
	            var tmpRects = [];
	             for(var i=0; i < allrects.length;i++){
	                  tmpRects.push(allrects[i]);
	             };
	             var sortedRects = tmpRects.sort(function(rect1,rect2){
	                return rect1.getAttribute("y") - rect2.getAttribute("y")
	             });
	
	             svgs[k].querySelectorAll("rect").forEach(function(rect){
	                rect.remove();
	             });
	
	             for(var i=sortedRects.length-1;i>=0;i--){
	                svgs[k].appendChild(sortedRects[i]);
	             };
	         }
	         document.getElementById('loadingpdf').style.display = 'none';
	
	
	
	    };
	
	    function setOrderForSpecificTime(){
	            setTimeout(function(){
	                document.getElementById('loadingpdf').style.display = 'block';
	                setOrderForAnnotations();
	            },3000);
	       };
	
	     vm.navigatePage = function(type){
	
	        if(type == 'next'){
	           $scope.nextClass = 'nextCursor';
	           var rec_num = $scope.filter_obj.current_record_no+1;
	           if(rec_num < $scope.recentRecords.length){
	              var prop = 'none';
	              if($scope.recentRecords[rec_num].is_digital){
	                    prop = 'digital';
	              }
	              $scope.filter_obj.current_record_no = rec_num;
	              localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	              $state.go("app.review",{id:$scope.recentRecords[rec_num].doc_id, type:prop,queue:$stateParams.queue},{reload:true})
	           }
	           else{
	              $scope.filter_obj.page_num = $scope.filter_obj.page_num+1;
	              $scope.filter_obj.current_record_no = -1;
	              $scope.getDocumentsListData(type);
	
	           }
	        }
	        else if(type == 'prev'){
	          $scope.prevClass = 'prevCursor';
	          var rec_num = $scope.filter_obj.current_record_no-1;
	          if(rec_num >= 0){
	              var prop = 'none';
	              if($scope.recentRecords[rec_num].is_digital){
	                    prop = 'digital';
	              }
	              $scope.filter_obj.current_record_no = rec_num;
	              localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	              $state.go("app.review",{id:$scope.recentRecords[rec_num].doc_id, type:prop,queue:$stateParams.queue},{reload:true})
	          }
	          else{
	              $scope.filter_obj.page_num = $scope.filter_obj.page_num-1;
	              $scope.filter_obj.current_record_no = $scope.recentRecords.length;
	              $scope.getDocumentsListData(type);
	
	          }
	        }
	     };
	
	     $scope.updateFilterObj = function(type){
	          $scope.filter_obj = JSON.parse(localStorage.getItem('filterObj'));
	          if($scope.filter_obj == null || $scope.filter_obj == undefined){
	            $scope.showNavigation = false;
	          }
	          else{
	            if($scope.filter_obj.hasOwnProperty('current_record_no')){
	                $scope.showNavigation = true;
	                $scope.recentRecords = JSON.parse(localStorage.getItem('recentRecords'));
	                if( $scope.recentRecords == null ||  $scope.recentRecords == undefined){
	                }else{
	                  $scope.total_records =  $scope.filter_obj.totalRecords;
	                  //vm.documentType = $scope.recentRecords[$scope.filter_obj.current_record_no].mime_type;
	                  $scope.no_of_records =  (($scope.filter_obj.page_num-1) *$scope.filter_obj.no_of_recs) + $scope.filter_obj.current_record_no+1;
	                }
	            }
	            else{
	              $scope.showNavigation = false;
	            }
	
	          }
	
	          vm.navigatePage(type);
	     };
	
	     $scope.updateFilterObj('none');
	
	     if($stateParams.type.toLowerCase() != "digital"){
	
	
	
	
	
	
	
	
	
	         $scope.rect = {
	                data_color: '#337ab7',
	                marker_color: '#00ad2d',
	                section_color:'#FF0000',
	                stroke: 5
	         };
	
	         $scope.colorCodes = {
	           'orange_border':'#fb9019',
	           'green_border':'#26ce3f',
	           'blue_border':'#4a90e2'
	         }
	
	         vm.updateDrawer = function(type,item){
	           if(item.is_accept == undefined && item.is_corrected == undefined && item.need_review == undefined){
	                item.need_review = true;
	                item.is_accept = false;
	                item.is_corrected = false;
	           }
	
	           if(item.regions!=undefined){
	                for(var i =0;i<item.regions.length;i++){
	                    var obj = angular.copy(item);
	                    obj.x = obj.regions[i].x1;
	                    obj.width = obj.regions[i].x2 - obj.regions[i].x1;
	                    obj.y = obj.regions[i].y1;
	                    obj.height = obj.regions[i].y2 - obj.regions[i].y1;
	                    obj.is_display = true;
	                    obj.stroke = $scope.rect.stroke;
	                    obj.color = $scope.colorCodes.orange_border;
	                    obj.bgColor = $scope.colorCodes.orange_border;
	                    if(obj.temp_id!=undefined){
	                        obj.slice_id = angular.copy(obj.temp_id+i);
	                        obj.slice_id = angular.copy(obj.slice_id.replace(/~/gi, "-"));
	                        item.regions[i].slice_id = angular.copy(obj.temp_id+i);
	                        item.regions[i].slice_id = angular.copy(item.regions[i].slice_id.replace(/~/gi, "-"));
	                    }
	                    if (obj.temp_id == undefined) {
	                      obj.temp_id = $scope.uniqueIdGenerator();
	                    }
	                    item.temp_id = obj.temp_id;
	                    obj.class = "Annotation";
	                    obj.page = obj.regions[i].page_num;
	                    obj.typeoffield = angular.copy(obj.type);
	                    obj.type = "area";
	                    obj.uuid = obj.temp_id;
	                    obj.documentId = vm.pdfSrc;
	                    obj.status = "review";
	                    if(obj.is_accept){
	                        obj.color = $scope.colorCodes.green_border;
	                        obj.bgColor = $scope.colorCodes.green_border;
	                        obj.status = "accept";
	                    }
	                    if(obj.is_corrected){
	                        obj.color = $scope.colorCodes.blue_border;
	                        obj.bgColor = $scope.colorCodes.blue_border;
	                        obj.status = "correct";
	                    }
	                    obj.borderStyle='solid';
	                    if(item.type=='domain'){
	                      obj.is_display = false;
	                      obj.borderStyle='dashed';
	                    }
	
	                    obj.page_num = obj.regions[i].page_num;
	                    $scope.annotations.push(obj);
	
	//                    obj.index = $scope.drawer[obj.regions[i].page_num].length;
	//                    item.drawerIndexObj['value'+i] = obj.index;
	//                    $scope.drawer[obj.regions[i].page_num].push(obj);
	                }
	           }
	
	         };
	
	         vm.getAttributeByHierarchy = function(data,type){
	                if(type == 'attribute'){
	                    for(var j=0;j<data.attributes.length;j++){
	                        for(var k=0;k<data.attributes[j].values.length;k++){
	                            if(data.attributes[j].values[k].regions!=undefined){
	                                    data.attributes[j].values[k].drawerIndexObj = {};
	                                    vm.updateDrawer('value',data.attributes[j].values[k]);
	                            }
	                        }
	                   }
	                }
	                else if(type == 'grouped_entity'){
	                    for(var i=0;i<data.groups.length;i++){
	                       if(data.groups[i].type == 'attribute'){
	                           for(var j=0;j<data.groups[i].attributes.length;j++){
	                                if(data.groups[i].attributes[j].values!=undefined && data.groups[i].attributes[j].values.length>0){
	                                    for(var k=0;k<data.groups[i].attributes[j].values.length;k++){
	                                        if(data.groups[i].attributes[j].values[k].regions!=undefined){
	                                                data.groups[i].attributes[j].values[k].drawerIndexObj = {};
	                                                vm.updateDrawer('value',data.groups[i].attributes[j].values[k]);
	                                        }
	                                    }
	                                }
	                           }
	                       }
	                    }
	                }
	         };
	
	         vm.hideElement = function(node){
	
	            if(node.is_delete){
	              return true;
	            }
	            if(node.is_accept && !$scope.checkObj.accept){
	                return true
	            }
	            if(node.is_corrected && !$scope.checkObj.correct){
	                return true
	            }
	            if(node.need_review && !$scope.checkObj.review){
	                return true
	            }
	            return false
	         };
	
	         vm.changeIntaraction = function(type,value){
	             filterRect(type, value);
	
	         };
	
	
	
	         vm.initialiseDrawer = function(){
	            $scope.drawer = [];
	
	            for(var i=0;i<$scope.no_of_pages;i++){
	                $scope.drawer[i+1] = [];
	
	            }
	         };
	         vm.initialiseSelector = function(){
	
	            $scope.selector=[];
	            for(var i=0;i<$scope.no_of_pages;i++){
	                $scope.selector[i+1] = {};
	                $scope.selector[i+1].enabled=false;
	                $scope.selector[i+1].id=i+1;
	            }
	         };
	
	         vm.recursiveByHierarchy = function(data){
	                for(var i=0;i<data.length;i++){
	                   if(data[i].type=='grouped_entity' || data[i].type == 'attribute'){
	                      vm.getAttributeByHierarchy(data[i],data[i].type);
	
	                   }
	                   else if(data[i].type=='entity' || data[i].type=='domain'){
	                        vm.recursiveByHierarchy(data[i].attributes);
	                   }
	
	                }
	         };
	
	         vm.getresultByHierarchy = function(){
	                vm.recursiveByHierarchy($scope.extractOutput);
	         };
	
	         vm.enableSelectorInEdit = function(item,coordinates,node){
	
	            vm.selectedObj.type = 'panel';
	            vm.selectedObj.key1 = item;
	            vm.selectedObj.key2 = coordinates;
	            vm.selectedObj.key3 = node;
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=false;
	            }
	            var size = Object.keys(node.drawerIndexObj).length;
	            for(var j=0;j<size;j++){
	                $rootScope.selectedIndex.push(node.drawerIndexObj['value'+j]);
	            };
	            for(var k =0;k<coordinates.length;++k){
	                $rootScope.selectedPage.push(coordinates[k].page_num);
	                vm.doSetTimeout(k,coordinates,node);
	            }
	            $rootScope.imageBlur='';
	         };
	
	         vm.doSetTimeout = function(k,coordinates,data){
	            if(!vm.selectedObj.selectType){
	                vm.selectedObj.selectType = true;
	                $scope.actualDivWidth = $("#actual").width();
	                $scope.actualImageWidth = $("#calImage").width();
	                $scope.actualSliceWidth = $('#'+coordinates[k].slice_id).width();
	                $scope.ratio = $scope.actualSliceWidth/$scope.actualImageWidth;
	                $scope.unwantedValue = $scope.actualDivWidth/$scope.ratio;
	                $scope.zoomLevel = $scope.unwantedValue/$scope.actualImageWidth;
	                if($scope.zoomLevel>=1){
	                    vm.zoomValue = 1;
	                }
	                else{
	                   vm.zoomValue  = $scope.zoomLevel;
	                }
	                $(".zoomSize").css("zoom",vm.zoomValue);
	            }
	            var heightOfImage = (coordinates[k].page_num-1)*document.getElementById("calImage").style.height.replace("px","");
	            setTimeout(function(){
	//                    var topPos = document.getElementById('page_'+coordinates[k].page_num).offsetTop;
	//                    var scrollingElement = angular.copy(topPos+coordinates[k].y1-200);
	//                    var scrollingElementLeft = angular.copy(coordinates[k].x1);
	//                    document.getElementById('scrollImage').scrollTop = scrollingElement;
	//                    document.getElementById('scrollImage').scrollLeft = scrollingElementLeft;
	
	                    document.getElementById('scrollImage').scrollTop = vm.zoomValue*heightOfImage+coordinates[k].y1*vm.zoomValue-200;
	                    document.getElementById('scrollImage').scrollLeft = coordinates[k].x1*vm.zoomValue-100;
	
	
	            },200);
	         };
	
	         vm.enableSelectorInImageClick = function(page_number,coordinates,data){
	            $scope.rowHighlight = [];
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=false;
	            }
	            $scope.zoomDisplay = 'zoomSize1';
	            for(var k =0;k<coordinates.length;++k){
	                $rootScope.selectedIndex.push(data.index);
	                $rootScope.selectedPage.push(coordinates[k].page_num);
	                vm.doSetTimeout(k,coordinates);
	
	            }
	            $rootScope.imageBlur='';
	         };
	
	
	
	
	
	
	         vm.getCurrentValue = function(node){
	            $scope.rowHighlight = [];
	            $scope.rowHighlight[node.temp_id] = 'highlightClass';
	            setrectColor("transparent");
	            setHeilight(node.temp_id);
	            let p = document.getElementById("pdf-annotate-edit-overlay");
	            if (p) {
	                p.remove();
	            }
	            UI.disableEdit();
	
	            var pageNum = 1;
	            $scope.current_page = 1;
	            if (node.regions) {
	                if(node.regions.length>0){
	                    pageNum = node.regions[0].page_num;
	                    $scope.current_page = node.regions[0].page_num;
	                    var scalerender = RENDER_OPTIONS.scale * 100;
	                    var scaleheight = ((scalerender * node.regions[0].y1) / 100);
	                    var scalewidth = ((scalerender *  node.regions[0].x1)/100);
	                    document.getElementById('content-wrapper').scrollTop = ((parseInt(pageNum) - 1) * PAGE_HEIGHT) + scaleheight;
	                    document.getElementById('content-wrapper').scrollLeft = scalewidth ;
	                }
	            }
	
	
	            return;
	
	         };
	
	         vm.getGroups = function (type) {
	                  entityLinkingService.getEntityLinks($stateParams.id, vm.sess_id).then(function (data) {
	                       //data.data.data.data.template_type='unknown'
	                       if (data.data.status == "success") {
	                            $scope.extractedData = data.data.data;
	                            $scope.elementsList = [];
	                            if($scope.extractedData.data.elements!=undefined){
	                                     $scope.elementsList = $scope.extractedData.data.elements;
	                            }
	                            $scope.entitiesData = $scope.extractedData.data.entity;
	
	                            $scope.copyData = angular.copy($scope.entitiesData);
	                            $scope.deepCopyOfSectionsData = { 'data': $scope.copyData };
	                            $scope.volume = $scope.extractedData.volume;
	                            $scope.recordData = $scope.extractedData.data.metadata;
	                            $scope.reviewStatesList = $scope.extractedData.review_state;
	                            $scope.doc_id = $scope.extractedData.data.doc_id;
	                            $scope.root_id = $scope.extractedData.data.root_id;
	                            $scope.showUnknown = false;
	                            if ($scope.recordData.properties.extension != "email") {
	                                if ($scope.extractedData.data.template_type != undefined) {
	                                    if ($scope.extractedData.data.template_type == 'unknown' || $scope.extractedData.data.template_type == 'known') {
	                                        $scope.current_page = 1;
	                                        if ($scope.extractedData.data.doc_type == undefined || $scope.extractedData.data.doc_type == 'image') {
	                                            $scope.showUnknown = true;
	                                        } else {
	                                            vm.renderHtml = $scope.pagesInfo[$scope.current_page - 1].doc_html;
	                                        }
	                                        $scope.current_page = 1;
	                                        $scope.rowHighlight = [];
	                                        $scope.tableRow = [];
	                                        $scope.extractOutput = $scope.entitiesData;
	                                        vm.getresultByHierarchy();
	
	                                        RENDER_OPTIONS.documentId = "/static" + $scope.volume + $scope.recordData.properties.digital_pdf_resource.key;
	                                        vm.pdfSrc = "/static" + $scope.volume + $scope.recordData.properties.digital_pdf_resource.key;
	
	//                                        RENDER_OPTIONS.documentId = '/static/ref-app/app/sharedPDFJS/cms.pdf';
	//                                        vm.pdfSrc = "/static/ref-app/app/sharedPDFJS/cms.pdf";
	
	                                        vm.pdfinit();
	                                        vm.render();
	                                        setOrderForSpecificTime();
	                                    }
	
	
	                                }
	
	                            }
	                            else {
	                                $scope.processListDetails = data.data;
	                                $scope.recordData = $scope.processListDetails.data;
	                                $scope.mime_type = data.data.data.data.extn;
	                                vm.documentType = data.data.data.data.doc_type;
	                                vm.docAttributes = data.data.data.data.doc_attributes;
	                                $scope.processListDetails = data.data.data;
	                                $scope.recordDataConfig = $scope.processListDetails.config.record_data;
	                                $scope.recordData = $scope.processListDetails.data;
	                                vm.emailAttachmentsArray = data.data.data.data.attachments;
	                                vm.emailEntities = data.data.data.data.elements;
	                            }
	                        } else {
	                                    $.UIkit.notify({
	                                        message: data.data.msg,
	                                        status: 'danger',
	                                        timeout: 3000,
	                                        pos: 'top-center'
	                                    });
	                       }
	                  },function (err) {
	
	                  })
	         };
	         vm.getGroups('load');
	         $.fn.isInViewport = function() {
	              var elementTop = $(this).offset().top;
	              var elementBottom = elementTop + $(this).outerHeight();
	
	              var viewportTop = $(window).scrollTop();
	              var viewportBottom = viewportTop + $(window).height();
	
	              return elementBottom > viewportTop && elementTop < viewportBottom;
	         };
	         angular.element(document.querySelector('#scrollImage')).bind('scroll', function(){
	                $('.post').each(function() {
	                    var activePage = $(this).attr('name');
	                    if ($(this).isInViewport()) {
	                        $('.pagination-text').val(activePage);
	                         // $scope.current_page = activePage;
	                    };
	                });
	         });
	
	         $scope.excelBtnArr = [];
	         $scope.excelBtnArr[0]='excel-back';
	         $scope.getSheetData = function(index){
	            $scope.excelBtnArr = [];
	            $scope.excelBtnArr[index]='excel-back';
	            vm.renderHtml = $scope.pagesInfo[index].doc_html;
	         };
	
	         $scope.openId = function (id) {
	            var str = id.split('-');
	            var id ='';
	            $('.collapse.in').removeClass('in');
	                     // $(".group"+''+data.groupName).addClass('in');
	                     // $(".group"+''+data.groupName).removeAttr( 'style' );
	                     // $(".showRow"+ ''+data.indexObj.childIndex).addClass('in');
	                     // $(".showRow"+''+data.indexObj.childIndex).removeAttr( 'style' );
	            for(var i=0;i<str.length;i++){
	                if(i==0)
	                   id = id+''+str[i];
	                else
	                  id = id+'-'+str[i];
	
	                $("."+id).addClass('in');
	                $("."+id).removeAttr( 'style' );
	            }
	         };
	
	         vm.zoomValue = 0.20;
	         $(".zoomSize").css("zoom",vm.zoomValue);
	         vm.selectedObj = {};
	
	         vm.zoomCalculation = function(){
	            if(vm.zoomValue<=0.25){
	                vm.zoomValue = 0.20;
	            }
	            else if(vm.zoomValue>0.20 && vm.zoomValue<=0.45){
	                vm.zoomValue = 0.40;
	            }
	            else if(vm.zoomValue>0.40 && vm.zoomValue<=0.65){
	                vm.zoomValue = 0.60;
	            }
	            else if(vm.zoomValue>0.60 && vm.zoomValue<=0.85){
	                vm.zoomValue = 0.80;
	            }
	            else{
	                vm.zoomValue = 1;
	            }
	         };
	
	
	         vm.zoomIn = function () {
	            var zoom = '';
	            if (RENDER_OPTIONS.scale < 1.4) {
	                let zoom = RENDER_OPTIONS.scale + 0.1
	                handleZoom(zoom);
	            }
	            setOrderForSpecificTime();
	
	
	         };
	
	        vm.zoomReset = function(){
	            handleZoom(0.17);
	            setOrderForSpecificTime();
	        };
	
	        vm.zoomOut = function () {
	            var zoom = '';
	            if (RENDER_OPTIONS.scale > 0.1) {
	                zoom = RENDER_OPTIONS.scale - 0.1;
	                handleZoom(zoom);
	            }
	            setOrderForSpecificTime();
	
	
	        };
	
	
	         vm.enableSelector = function(){
	            $scope.rowHighlight = [];
	            $scope.zoomDisplay = 'zoomSize';
	//            $scope.current_page = 1;
	//            $scope.current_selection_page_number = 1;
	            $rootScope.selectedIndex =[];
	            $rootScope.selectedPage = [];
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=false;
	            }
	            $scope.zoomDisplay = 'zoomSize1';
	            setTimeout(function(){
	                var topPos = document.getElementById('page_'+$scope.current_page).offsetTop;
	                var scrollingElement = angular.copy(topPos);
	                document.getElementById('scrollImage').scrollTop = scrollingElement;
	            },200);
	            $rootScope.imageBlur='';
	            $rootScope.highlight=[];
	         };
	
	        vm.showallAnnotations = function () {
	            setrectColor("yellow");
	            UI.disableEdit();
	        };
	
	        vm.disableSelector = function () {
	            vm.selectedNode=null;
	            if($scope.drawerCopy!=undefined){
	                if($scope.drawerCopy.length>0){
	                     $scope.annotations = [];
	                     $scope.annotations = angular.copy($scope.drawerCopy);
	                }
	            }
	            vm.render();
	            setTimeout(() => {
	                vm.showallAnnotations();
	            }, 300);
	            setOrderForSpecificTime();
	
	        };
	
	         vm.changePageNumUnknown = function (type) {
	            if (type == 'next')
	                $scope.current_page++;
	            else
	                $scope.current_page--;
	            var zoomVal = $('.' + $scope.zoomDisplay).css("zoom");
	            setTimeout(function () {
	                document.getElementById('content-wrapper').scrollTop = ((parseInt($scope.current_page) - 1) * PAGE_HEIGHT);
	            }, 100);
	         };
	
	         vm.keyEnterUnknown = function (event) {
	                if(event.which === 13) {
	                   if($scope.current_page<=$scope.no_of_pages) {
	                       if($scope.current_page>0){
	                           var zoomVal =$('.'+$scope.zoomDisplay).css( "zoom" );
	                            setTimeout(function(){
	                               var topPos = document.getElementById('page_'+$scope.current_page).offsetTop;
	                               var scrollingElement = angular.copy(topPos*zoomVal);
	                               document.getElementById('scrollImage').scrollTop = scrollingElement;
	                            },100);
	                       }
	                       else{
	                            $.UIkit.notify({
	                                 message : 'Please Enter Page number',
	                                 status  : 'warning',
	                                 timeout : 3000,
	                                 pos     : 'top-center'
	                            });
	                       }
	                   }
	                   else{
	                        $.UIkit.notify({
	                             message : 'Please Enter Page number less than no.of pages',
	                             status  : 'warning',
	                             timeout : 3000,
	                             pos     : 'top-center'
	                        });
	                   }
	                }
	         };
	
	
	
	
	
	
	
	
	
	         $scope.rowHighlightTable={};
	         $scope.innerData={}
	
	
	
	
	
	
	
	          $scope.getAttributeName = function(text){
	            if(text!='' && text!=undefined){
	               var str = text;
	               var split= str.split('.')
	               var length = split[0].length
	               var res = str.substring(length+1, str.length);
	              return res;
	            }
	            return '';
	          };
	
	
	          $rootScope.$on("selector",function(evt,data){
	
	
	               $scope.current_selection_page_number = data.id;
	               for(var i=1;i<=$scope.no_of_pages;i++){
	                 if(data.id!=i){
	                   $scope.selector[i].clear();
	
	                 }
	               }
	          });
	
	
	          $rootScope.$on("edited",function(evt,data){
	//               if(data.type=='field' || data.type=='omr' || data.type=="paragraph"){
	//                   $('.panel-collapse.in')
	//                   .removeClass('in');
	//                   $(".group"+ ''+data.groupName).addClass('in');
	//                 $(".group"+''+data.groupName).removeAttr( 'style' );
	//                   setTimeout(function(){
	//                        var topPos = document.getElementById('inner'+''+data.groupName+''+data.indexObj.parentIndex).offsetTop;
	//                        console.log(topPos);
	//                        var scrollingElement = angular.copy(topPos-75);
	//                        document.getElementById('scrollDiv').scrollTop = scrollingElement;
	//                    },100);
	//    //                $("#scrollDiv").scrollTop(scrollingElement);
	//
	//
	//                 $scope.rowClick(data.indexObj.parentIndex,data.drawerIndex,data.groupName);
	//
	//               }
	//               else{
	//                 $('.panel-collapse.in').removeClass('in');
	//                 $(".group"+ ''+data.groupName).addClass('in');
	//                 $(".group"+''+data.groupName).removeAttr( 'style' );
	//                 $(".showRow"+ ''+data.indexObj.childIndex).addClass('in');
	//                 $(".showRow"+''+data.indexObj.childIndex).removeAttr( 'style' );
	//                 setTimeout(function(){
	//                        var topPos = document.getElementById('innerData'+''+data.groupName+data.indexObj.parentIndex+''+data.indexObj.childIndex+''+data.indexObj.superChildIndex).offsetTop;
	//                        console.log(topPos);
	//                        var scrollingElement = angular.copy(topPos-75);
	//                        document.getElementById('scrollDiv').scrollTop = scrollingElement;
	//                  },100);
	//
	//
	//                 $scope.rowTableClick(data,data.drawerIndex,data.groupName);
	//
	//               }
	
	
	          if(vm.selectedElementFlag){
	
	             vm.selectedElementId = data.element_id;
	          }
	          else{
	              $scope.openId(data.temp_id);
	              $scope.current_page = data.page_num;
	              $scope.rowHighlightAttr = [];
	              $scope.rowHighlightAttr[data.temp_id] = 'highlightClass'
	              vm.enableSelectorInImageClick(data.page_num,data.regions,data)
	              setTimeout(function(){
	                        var topPos = document.getElementsByClassName(data.temp_id)[0].offsetTop;
	                        var scrollingElement = angular.copy(topPos-100);
	                        document.getElementById('scrollDiv2').scrollTop = scrollingElement;
	              },100);
	          }
	
	          });
	
	          $scope.editAction = [];
	
	          $scope.editActionData = function($index){
	            $scope.editAction[$index]= true;
	          };
	
	          $scope.retrainData = function(){
	            entityLinkingService.retrain({'sess_id':vm.sess_id}).then(function(data){
	                         console.log("data"+data)
	                         if(data.data.status == 'success'){
	                            $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'success',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                            });
	                         }
	                         else {
	                            $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'warning',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                            });
	                         }
	
	
	
	            },function(){
	                $.UIkit.notify({
	                   message : "Internal Server Error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	                });
	
	            });
	
	          }
	       }
	       else{
	          processDetailsServices.postProcessList($stateParams.id,vm.sess_id).then(function(data){
	              if(data.data.status=="success"){
	                  vm.documentType = $stateParams.type.toLowerCase();
	                  $scope.processListDetails = data.data.data;
	                  $scope.recordDataConfig = $scope.processListDetails.config.record_data;
	                  $scope.recordData =$scope.processListDetails.data;
	                  vm.digitalDocumentData =angular.copy(data.data.data.data.elements.digital);
	                  vm.heightOfWindow = $(window).height()-70;
	                  vm.heightOfWindow1 = $(window).height()-120;
	              }
	          });
	
	          $rootScope.emailSlider = {
	            value: 75,
	            options: {
	              floor: 0,
	              ceil: 100,
	              onEnd: function(id) {
	
	              }
	            }
	          };
	
	//          $scope.emailBodyHtml = function() {
	//              return $sce.trustAsHtml(vm.emailDocumentData.attributes.body);
	//          };
	//
	//          $scope.emailOriginalHtml = function(){
	//              return $sce.trustAsHtml(vm.emailDocumentData.attributes.original);
	//          }
	
	          $scope.emailAttachments = function(htmldata){
	              return $sce.trustAsHtml(htmldata);
	          }
	
	          $scope.downloadAttachment = function(file_path){
	             var downloadUrl = $scope.url+'/api/download/efs/'+file_path;
	             window.location.assign(downloadUrl);
	          }
	
	       }
	       $scope.getDocumentsListData = function(type){
	
	         documentsListService.getProcessList({'sess_id':vm.sess_id,data:{'filter_obj':$scope.filter_obj}}).then(function(data){
	               if(data.data.status=="success"){
	                  $scope.processListData=data.data.data;
	                  $scope.processListDataList = $scope.processListData.data;
	                  $scope.filter_obj.totalRecords = data.data.data.total_count;
	                  $scope.recentRecords = [];
	                  angular.forEach($scope.processListDataList,function(value,key){
	                     var digital = false
	                    if(value.hasOwnProperty('is_digital'))
	                       digital = true;
	                    $scope.recentRecords.push({'doc_id':value.doc_id,'mime_type':value.mime_type,'is_digital':digital});
	                  });
	                  localStorage.setItem('recentRecords',JSON.stringify($scope.recentRecords))
	                  localStorage.setItem('filterObj',JSON.stringify($scope.filter_obj))
	                  //$scope.updateFilterObj(type);
	                  vm.navigatePage(type);
	
	               }
	               else{
	                 $.UIkit.notify({
	                   message : data.data.msg,
	                   status  : 'danger',
	                   timeout : 3000,
	                   pos     : 'top-center'
	                 });
	
	               }
	         },function(err){
	            console.log(err)
	           $.UIkit.notify({
	               message : "Internal server error",
	               status  : 'warning',
	               timeout : 3000,
	               pos     : 'top-center'
	           });
	
	         });
	       };
	
	       vm.renderHTMLData = function(){
	            return $sce.trustAsHtml(vm.renderHtml);
	       };
	       vm.renderEmailHTMLData = function(data){
	            return $sce.trustAsHtml(data);
	       };
	       vm.showEmailAttachment = function(attachmentObj){
	            //alert(attachmentObj);
	            var doc_id=attachmentObj.doc_id;
	            var prop="none";
	            //$state.reload();
	            $state.go("app.review",{id:doc_id, type:prop,queue:$stateParams.queue})
	       };
	
	       vm.updateNlp = function(obj,prop){
	           var sendObj = {"elements":obj,"doc_id":$stateParams.id};
	           entityLinkingService.sendEmailNlp({'data':sendObj,'sess_id':vm.sess_id}).then(function(data){
	              if(data.data.status=="success"){
	                 $.UIkit.notify({
	                       message : data.data.msg,
	                       status  : 'success',
	                       timeout : 3000,
	                       pos     : 'top-center'
	                 });
	              }
	           },function(err){
	               $.UIkit.notify({
	                   message : "Internal server error",
	                   status  : 'warning',
	                   timeout : 3000,
	                   pos     : 'top-center'
	               });
	           });
	       };
	
	       vm.newAttribute = function(action){
	           vm.newAttributeObj = angular.copy({"attribute":"","value":"","action":action});
	           vm.newAttributeShow = true;
	       };
	
	       vm.saveNewAttribute = function(){
	           if(vm.newAttribute.attribute != "" && vm.newAttribute.attribute != undefined){
	               if(vm.newAttribute.value != "" && vm.newAttribute.value != undefined){
	                   vm.emailEntities.fields[0].nlp.attributes.push(vm.newAttribute);
	                   entityLinkingService.sendEmailNlp({'data':sendObj,'sess_id':vm.sess_id}).then(function(data){
	                      if(data.data.status=="success"){
	                         vm.newAttributeShow = false;
	                         vm.newAttrErr = "";
	                         $.UIkit.notify({
	                               message : data.data.msg,
	                               status  : 'success',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                         });
	                      }
	                   },function(err){
	                       vm.newAttrErr = "";
	                       $.UIkit.notify({
	                           message : "Internal server error",
	                           status  : 'warning',
	                           timeout : 3000,
	                           pos     : 'top-center'
	                       });
	                   });
	               }
	               else{
	                   vm.newAttrErr = "Please enter the value";
	               }
	           }
	           else{
	               vm.newAttrErr = "Please enter the attribute";
	           }
	       };
	
	       vm.getEntitiesList = function(){
	          entityLinkingService.getDomainObjectsEntities({'sess_id':vm.sess_id}).then(function(resp){
	              $scope.doEntitiesList = resp.data;
	          },function(err){
	             console.log(err)
	             $.UIkit.notify({
	                     message : "Internal server error",
	                     status  : 'warning',
	                     timeout : 3000,
	                     pos     : 'top-center'
	             });
	           });
	       };
	       vm.getEntitiesList();
	
	       vm.getAttributesList = function(){
	          entityLinkingService.getDomainObjects({'sess_id':vm.sess_id}).then(function(resp){
	              $scope.entitiesList = resp.data;
	          },function(err){
	             console.log(err)
	             $.UIkit.notify({
	                     message : "Internal server error",
	                     status  : 'warning',
	                     timeout : 3000,
	                     pos     : 'top-center'
	             });
	           });
	       };
	       vm.getAttributesList();
	
	       vm.showAttributes = function(node){
	            vm.respectedAttributes = [];
	            if($scope.entitiesList[node.entity_key]!=undefined)
	               vm.respectedAttributes = $scope.entitiesList[node.entity_key];
	       };
	
	       vm.showAttributesForNew = function(val){
	            vm.respectedAttributes = [];
	            var entity_key = val.entity_key;
	            if($scope.entitiesList[entity_key]!=undefined)
	               vm.respectedAttributes = $scope.entitiesList[entity_key];
	       };
	
	       vm.showNewEntities = function(node){
	            vm.respectedEntities = [];
	            if($scope.doEntitiesList[node.name]!=undefined)
	               vm.respectedEntities = $scope.doEntitiesList[node.name];
	       };
	
	       vm.selectedAttribute = function(name,attr,node){
	            attr.name = name;
	            if(attr.name === attr.extracted_name){
	                node.is_changed = false;
	                for(var i=0;i<attr.values.length;i++){
	                    if(attr.values.value === attr.values.extracted_value){
	                        node.is_changed = false;
	                    }
	                    else{
	                        node.is_changed = true;
	                        break;
	                    }
	                }
	            }
	            else{
	                node.is_changed = true;
	            }
	//            var obj={
	//                "sess_id":vm.sess_id,
	//                "data":{
	//                        "insight_id": thisVal.insight_id,
	//                        "entity_id": thisVal.entity_id,
	//                        "type": thisVal.type,
	//                        "old_key": node.entity_key+"."+node.extracted_name,
	//                        "key": node.entity_key+"."+node.name,
	//                        "action": "upsert",
	//                        "doc_id":$stateParams.id,
	//                        "value":node.values
	//                      }
	//            };
	//            $scope.submitFeedback(obj);
	
	       };
	
	       vm.selectedNewEntityAttribute = function(attr,node){
	            $scope.newEntityObj.name = attr;
	            $scope.newEntityObj.entity_key = node.name+"."+attr;
	            vm.attributeKey = "Attribute";
	
	       };
	       vm.selectedNewEntityAttributeValue = function(attr){
	            vm.attributeKey = attr;
	
	       };
	
	       vm.selectedAttributeForNew = function(attr,node){
	            $scope.listOfNewAttributesObjs[node.insight_id].attributeName = attr;
	       }
	
	      $scope.url = $location.protocol() + '://'+ $location.host() +':'+  $location.port();
	      $scope.download =function(){
	        var downloadUrl = $scope.url+'/api/download/json/'+$scope.doc_id+'/';
	        window.location.assign(downloadUrl);
	      };
	
	
	      /******************************************************************************
	                Entity Linking code starts here
	      ******************************************************************************/
	        $scope.moreValue={};
	        $scope.isEditAttributeValue={};
	
	        $scope.hoverIn = function(index,tempId){
	          this.hoverEdit = true;
	        };
	        $scope.hoverOut = function(index,tempId){
	          this.hoverEdit = false;
	        };
	        $scope.showMore = function(index,tempId){
	          //this.moreValue = true;
	          $scope.moreValue[tempId]="true";
	        };
	        $scope.showLess = function(index,tempId){
	          //this.moreValue = true;
	          $scope.moreValue[tempId]="false";
	        };
	
	        $scope.editAttributeValues = function(index,tempId,templateType,node,thisVal){
	            if(templateType!='known'){
	                $scope.isEditAttributeValue[tempId]=true;
	                $scope.newNode = node.entity_id;
	                $scope.nodeNameBackup = angular.copy(node.name);
	                $scope.nodeValueBackup = angular.copy(node.current_value);
	                var temp = thisVal.$parentNodeScope.$modelValue.temp_id;
	                var afterTemp = temp.replace("-",".");
	                $scope.attributesList = $scope.entitiesList[afterTemp];
	            }
	        };
	        $scope.cancelEditAttributeValues = function(index,tempId,templateType,node){
	            $scope.isEditAttributeValue[tempId]=false;
	            node.name = angular.copy($scope.nodeNameBackup);
	            node.current_value = angular.copy($scope.nodeValueBackup);
	        };
	        $scope.saveEditAttributeValues = function(index,tempId,templateType,node,thisVal,parentIndex){
	//            console.log("node=>", node);
	//            console.log("index=>", index);
	            console.log("chnages in extract" +$scope.extractOutput);
	
	            var temidArray  = tempId.split("-");
	            var entId=temidArray[temidArray.length-1];
	            var entId1=entId.replace(/~/g, "-");
	
	            var enKey = getKey(tempId);
	            var old_key = angular.copy(enKey);
	            var idnx = enKey.lastIndexOf(".");
	            enKey = enKey.substring(0,idnx);
	            enKey = enKey +'.'+ node.name;
	
	            var elValue=[];
	            var insId = "";
	            angular.forEach(node.current_value, function(val, key){
	                var curArr={};
	                curArr.element_id=val.element_id;
	                curArr.is_checked=val.is_checked;
	                curArr.page_num=val.page_num;
	                curArr.score=val.score;
	                curArr.value=val.value;
	                elValue.push(curArr);
	            });
	            insId = thisVal.$parentNodeScope.$modelValue.attributes[parentIndex].insight_id;
	
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": insId,
	                        "entity_id": entId1,
	                        "type": node.type,
	                        "old_key": old_key,
	                        "key": enKey,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "value":elValue
	                      }
	            };
	            node.is_corrected = true;
	            $scope.submitFeedback(obj,tempId);
	        };
	
	        $scope.submitFeedback = function(obj){
	            var reqObj = {"sess_id":vm.sess_id,"data":{"feedback": obj.data}};
	            entityLinkingService.saveEntityLinkingFeedback(reqObj).then(function (data) {
	                if(data.data.status=="success"){
	
	                    $scope.newNode = "";
	                    vm.attributeKey = "";
	                    vm.attributeValue= "";
	                    vm.selectedElementFlag = false;
	                    vm.selectedElementId = '';
	
	                }
	                else {
	
	                    $.UIkit.notify({
	                     message : data.data.msg,
	                     status  : 'warning',
	                     timeout : 3000,
	                     pos     : 'top-center'
	                    });
	                }
	
	            },function (err) {
	
	                $.UIkit.notify({
	                 message : "Internal server error @saveEntityLinkingFeedback",
	                 status  : 'warning',
	                 timeout : 3000,
	                 pos     : 'top-center'
	                });
	            })
	        };
	
	        vm.deleteEntityCall = function(node){
	                node.is_delete = true;
	                var obj={
	                    "sess_id":vm.sess_id,
	                    "data":{
	                        "entity_id": node.entity_id,
	                        "type": "entity",
	                        "doc_id":$stateParams.id,
	                        "action": "delete"
	                    }
	                };
	                //$scope.submitFeedback(obj);
	
	        };
	
	        vm.deleteFeedback = function(node,thisVal){
	                   thisVal.is_changed = true;
	                   thisVal.attr_delete = true;
	//                var obj={
	//                "sess_id":vm.sess_id,
	//                "data":{
	//                        "insight_id": thisVal.insight_id,
	//                        "entity_id": thisVal.entity_id,
	//                        "type": thisVal.type,
	//                        "key": node.entity_key+"."+node.name,
	//                        "action": "delete",
	//                        "doc_id":$stateParams.id,
	//                        "value":node.values
	//                      }
	//                };
	//
	//                $scope.submitFeedback(obj);
	
	        };
	
	        vm.deleteAttribute = function(node,thisVal){
	            if(vm.showPopupConfirm){
	                node.is_delete = true;
	                vm.deleteFeedback(node,thisVal);
	            }
	            else{
	                ngDialog.open({ template: 'confirmEntityBox',
	                  controller: ['$scope','$state' ,function($scope,$state) {
	                      $scope.activePopupText = 'Are you sure you want to delete '+node.name+ ' attribute';
	                      $scope.onConfirmActivation = function (flag){
	                            ngDialog.close();
	                            if(flag){
	                                vm.showPopupConfirm = true;
	                            }
	
	                            node.is_delete = true;
	                            vm.deleteFeedback(node,thisVal);
	                      };
	                  }]
	                });
	            }
	
	
	        };
	
	        vm.deleteElementData = function(node){
	            node.is_delete = true;
	            var size = Object.keys(node.drawerIndexObj).length;
	            for(var i=0;i<size;i++){
	                $scope.drawer[node.regions[i].page_num][node.drawerIndexObj['value'+i]].is_display = false;
	                $scope.drawer[node.regions[i].page_num][node.drawerIndexObj['value'+i]].is_delete = true;
	            }
	            vm.disableSelector();
	        }
	
	        vm.deleteValue = function(node){
	            if(vm.showPopupConfirm){
	                vm.deleteElementData(node);
	
	            }
	            else{
	                ngDialog.open({ template: 'confirmEntityBox',
	                  controller: ['$scope','$state' ,function($scope,$state) {
	                      $scope.activePopupText = 'Are you sure you want to delete '+node.value+ ' value';
	                      $scope.onConfirmActivation = function (flag){
	                            ngDialog.close();
	                            if(flag){
	                                vm.showPopupConfirm = true;
	                            }
	
	                            vm.deleteElementData(node);
	                      };
	                  }]
	                });
	            }
	
	
	        };
	
	        vm.deleteGroup = function(node,thisVal,index){
	            if(node.is_new){
	                thisVal.$parentNodeScope.$modelValue.groups.splice(index,1);
	            }
	            else{
	             node.is_delete = true;
	            }
	        };
	
	        vm.addNewAttribute = function(node,thisVal){
	            var temp = thisVal.$parentNodeScope.$modelValue.entity_key;
	            $scope.coordinatesDisplay = [];
	            $scope.listOfNewAttributes = [];
	            $scope.listOfNewAttributesObjs={};
	            vm.attributeValue = "";
	            vm.attributeKey = "";
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = false;
	            $scope.drawerCopy = angular.copy($scope.annotations);
	            $scope.listOfNewAttributes[node.insight_id] = true;
	            $scope.listOfNewAttributesObjs[node.insight_id] = {};
	            $scope.listOfNewAttributesObjs[node.insight_id].attributeName = "Attribute";
	            $scope.listOfNewAttributesObjs[node.insight_id].attributeValue = "";
	            $scope.listOfNewAttributesObjs[node.insight_id].entity_key = temp;
	//            for(var i=0;i<node.groups.length;i++){
	//                $scope.listOfNewAttributes[node.groups[i].insight_id] = true;
	//                $scope.listOfNewAttributesObjs[node.groups[i].insight_id] = {};
	//                $scope.listOfNewAttributesObjs[node.groups[i].insight_id].attributeName = "Attribute";
	//                $scope.listOfNewAttributesObjs[node.groups[i].insight_id].attributeValue = "";
	//                $scope.listOfNewAttributesObjs[node.groups[i].insight_id].entity_key = node.entity_key;
	//            }
	
	        };
	
	        vm.addNewAttributeInEntity = function(node,thisVal){
	            var temp = node.entity_key;
	            $scope.coordinatesDisplay = [];
	            $scope.listOfNewAttributes = [];
	            $scope.listOfNewAttributesObjs={};
	            vm.attributeValue = "";
	            vm.attributeKey = "";
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = false;
	            $scope.drawerCopy = angular.copy($scope.annotations);
	            $scope.listOfNewAttributes[node.insight_id] = true;
	            $scope.listOfNewAttributesObjs[node.insight_id] = {};
	            $scope.listOfNewAttributesObjs[node.insight_id].attributeName = "Attribute";
	            $scope.listOfNewAttributesObjs[node.insight_id].attributeValue = "";
	            $scope.listOfNewAttributesObjs[node.insight_id].entity_key = temp;
	        };
	
	        vm.addNewGroupInEntity = function(node,thisVal){
	            var obj = {};
	                obj.type='attribute';
	                obj.is_new=true;
	                obj.is_changed= true;
	                obj.attributes = [];
	                obj.insight_id=$scope.uniqueIdGenerator();
	                obj.entity_id = $scope.uniqueIdGenerator();
	                obj.name = node.name
	                node.groups.unshift(obj);
	                $scope.coordinatesDisplay = [];
	                $scope.listOfNewAttributes = [];
	                $scope.listOfNewAttributesObjs={};
	                vm.attributeValue = "";
	                vm.attributeKey = "";
	                vm.selectedElementId = '';
	                vm.selectedElementFlag = false;
	                $scope.drawerCopy = angular.copy($scope.annotations);
	                $scope.listOfNewAttributes[obj.insight_id] = true;
	                $scope.listOfNewAttributesObjs[obj.insight_id] = {};
	                $scope.listOfNewAttributesObjs[obj.insight_id].attributeName = "Attribute";
	                $scope.listOfNewAttributesObjs[obj.insight_id].attributeValue = "";
	                $scope.listOfNewAttributesObjs[obj.insight_id].entity_key = node.entity_key;
	        };
	
	        vm.deleteEntity = function(node){
	            var attrKey = node.name;
	            ngDialog.open({ template: 'confirmBox1',
	              controller: ['$scope','$state' ,function($scope,$state) {
	                  $scope.activePopupText = 'Are you sure you want to delete '+attrKey+ ' entity';
	                  $scope.onConfirmActivation = function (){
	                        ngDialog.close();
	                        vm.deleteEntityCall(node);
	                  };
	              }]
	            });
	        };
	
	
	        vm.editCoordinates = function(node){
	            $scope.coordinatesDisplay = [];
	            $scope.coordinatesDisplay[node.temp_id] = true;
	            //vm.getCurrentValue(node);
	            node.is_edit_coordinates = true;
	            //vm.enableSelector('new');
	            for(var i=0;i<$scope.no_of_pages;i++){
	               $scope.selector[i+1].clear();
	               $scope.selector[i+1].enabled=true;
	            }
	            var zoomValue = 1;
	            $(".zoomSize").css("zoom",zoomValue);
	
	
	            for(var i=0;i<node.regions.length;i++){
	                var heightOfImage = (node.regions[i].page_num-1)*document.getElementById("calImage").style.height.replace("px","");
	
	                        document.getElementById('scrollImage').scrollTop = zoomValue*heightOfImage+node.regions[i].y1*zoomValue-200;
	                        document.getElementById('scrollImage').scrollLeft = node.regions[i].x1*zoomValue-100;
	
	
	
	                vm.editZone(node.regions[i])
	            }
	        };
	
	        vm.acceptCoordinates = function(node,type,obj){
	
	            $scope.coordinatesDisplay = [];
	
	            if(node.regions.length==0){
	                for(var i=0;i<$scope.no_of_pages;i++){
	                   if($scope.selector[i+1].x1!=undefined){
	
	                      var obj = {};
	
	                      obj.x1 = $scope.selector[i+1].x1;
	                      obj.y1 = $scope.selector[i+1].y1;
	                      obj.x2 = $scope.selector[i+1].x2;
	                      obj.y2 = $scope.selector[i+1].y2;
	                      obj.page_num = i+1;
	                      node.regions.push(obj);
	                      vm.updateDrawer('value',node,'');
	                      break;
	                   }
	                }
	                vm.disableSelector();
	                return;
	            }
	
	            for(var i=0;i<node.regions.length;i++){
	               var page_number = node.regions[i].page_num
	               if($scope.selector[page_number].x1!=undefined){
	                  node.regions[i].x1 = $scope.selector[page_number].x1;
	                  node.regions[i].y1 = $scope.selector[page_number].y1;
	                  node.regions[i].x2 = $scope.selector[page_number].x2;
	                  node.regions[i].y2 = $scope.selector[page_number].y2;
	               }
	            }
	            var size = Object.keys(node.drawerIndexObj).length;
	            for(var i=0;i<size;i++){
	                $scope.drawer[node.regions[i].page_num][node.drawerIndexObj['value'+i]].x1 = node.regions[i].x1;
	                $scope.drawer[node.regions[i].page_num][node.drawerIndexObj['value'+i]].y1 = node.regions[i].y1;
	                $scope.drawer[node.regions[i].page_num][node.drawerIndexObj['value'+i]].x2 = node.regions[i].x2;
	                $scope.drawer[node.regions[i].page_num][node.drawerIndexObj['value'+i]].y2 = node.regions[i].y2;
	            }
	            vm.disableSelector();
	        };
	
	        $scope.calculation = function(selectedItem){
	            $scope.obj = {};
	            var imageWidth = parseInt($scope.imageObj.width);
	            var imageHeight = parseInt($scope.imageObj.height);
	            $scope.obj.right = imageWidth-(selectedItem.x2-selectedItem.x1)-selectedItem.x1;
	            $scope.obj.bottom = imageHeight-(selectedItem.y2-selectedItem.y1)-selectedItem.y1;
	            $scope.obj.shleftRight = imageWidth-selectedItem.x1;
	            $scope.obj.shcentertopleft = selectedItem.x1;
	            $scope.obj.shcentertopright = imageWidth-selectedItem.x2;
	            $scope.obj.shcentertopbottom = imageHeight-selectedItem.y1;
	            $scope.obj.shcenterbottomleft = selectedItem.x1;
	            $scope.obj.shcenterbottomright = imageWidth-selectedItem.x2;
	            $scope.obj.shcenterbottomtop = selectedItem.y2;
	            $scope.obj.shrightleft = selectedItem.x2;
	        };
	
	
	        vm.editZone = function(coordinates){
	
	                  //$rootScope.selectedIndex = index;
	                  $(".image-style").height($(window).height());
	                  $rootScope.highlight=[];
	                  $rootScope.imageBlur='';
	            //      $rootScope.highlight[index] = "highlightClass";
	            //      $scope.zoomDisplay = 'zoomSize1';
	
	                   $scope.imageObj={};
	                   $scope.imageObj.width = document.getElementById("calImage").style.width.replace("px","");
	                   $scope.imageObj.height = document.getElementById("calImage").style.height.replace("px","");
	                   $scope.calculation(coordinates);
	                    $scope.selector[coordinates.page_num].x1 = coordinates.x1;
	                    $scope.selector[coordinates.page_num].y1 = coordinates.y1;
	                    $scope.selector[coordinates.page_num].x2 = coordinates.x2;
	                    $scope.selector[coordinates.page_num].y2 = coordinates.y2;
	            //        if($scope.drawer[index].key == 'value')
	            //              $scope.selector.color = $scope.rect.marker_color;
	            //        else
	            //             $scope.selector.color = $scope.rect.data_color;
	            //        $scope.selector.stroke  = $scope.rect.stroke;
	            //        $scope.selector.enabled = true;
	
	                    if(document.getElementsByClassName("mr-box")[coordinates.page_num-1].style!=undefined){
	                        document.getElementsByClassName("mr-box")[coordinates.page_num-1].style.display = "none";
	                        document.getElementsByClassName("mr-box")[coordinates.page_num-1].style.top = coordinates.y1+"px";
	                        document.getElementsByClassName("mr-box")[coordinates.page_num-1].style.left = coordinates.x1+"px";
	                        document.getElementsByClassName("mr-box")[coordinates.page_num-1].style.bottom = ""+$scope.obj.bottom+"px";
	                        document.getElementsByClassName("mr-box")[coordinates.page_num-1].style.right = ""+$scope.obj.right+"px";
	                    }
	                    if(document.getElementsByClassName("mr-shadow")[coordinates.page_num-1].style!=undefined){
	                        document.getElementsByClassName("mr-shadow left")[coordinates.page_num-1].style.right = ""+$scope.obj.shleftRight+"px";
	                        document.getElementsByClassName("mr-shadow center top")[coordinates.page_num-1].style.left = ""+$scope.obj.shcentertopleft+"px";
	                        document.getElementsByClassName("mr-shadow center top")[coordinates.page_num-1].style.right = ""+$scope.obj.shcentertopright+"px";
	                        document.getElementsByClassName("mr-shadow center top")[coordinates.page_num-1].style.bottom = ""+$scope.obj.shcentertopbottom+"px";
	                        document.getElementsByClassName("mr-shadow center bottom")[coordinates.page_num-1].style.left = ""+$scope.obj.shcenterbottomleft+"px";
	                        document.getElementsByClassName("mr-shadow center bottom")[coordinates.page_num-1].style.right = ""+$scope.obj.shcenterbottoformight+"px";
	                        document.getElementsByClassName("mr-shadow center bottom")[coordinates.page_num-1].style.top = ""+$scope.obj.shcenterbottomtop+"px"
	                        document.getElementsByClassName("mr-shadow right")[coordinates.page_num-1].style.left = ""+$scope.obj.shrightleft+"px";
	                    }
	
	
	        };
	
	        vm.getEXtractedValue = function(node){
	            node.value = node.extracted_value;
	        };
	        $scope.uniqueIdGenerator = function() {
	            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	        };
	
	        function s4() {
	                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	        };
	
	        $scope.activeAttributeValues = function(index,tempId,templateType,node){
	
	            var temidArray  = tempId.split("-");
	            var entId=temidArray[temidArray.length-1];
	            var entId1=entId.replace(/~/g, "-");
	
	            var enKey = getKey(tempId);
	
	            var elValue=[];
	            angular.forEach(node.current_value, function(val, key){
	                var curArr={};
	                curArr.element_id=val.element_id,
	                curArr.is_checked=val.is_checked,
	                curArr.page_num=val.page_num,
	                curArr.value=val.value
	                elValue.push(curArr);
	            });
	
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": "",
	                        "entity_id": entId1,
	                        "type": node.type,
	                        "key": enKey,
	                        "action": "accept",
	                        "doc_id":$stateParams.id,
	                        "value":elValue
	                      }
	            };
	            node.is_accept = true;
	            $scope.submitFeedback(obj,tempId);
	//            entityLinkingService.acceptEntityLinking(obj).then(function (data) {
	//                if(data.data.status=="success"){
	//                    node.is_accept = true;
	//                    $.UIkit.notify({
	//                     message : data.data.msg,
	//                     status  : 'success',
	//                     timeout : 3000,
	//                     pos     : 'top-center'
	//                    });
	//                    vm.getGroups();
	//                }
	//                else {
	//                    $.UIkit.notify({
	//                     message : data.data.msg,
	//                     status  : 'warning',
	//                     timeout : 3000,
	//                     pos     : 'top-center'
	//                    });
	//                }
	//
	//            },function (err) {
	//                $.UIkit.notify({
	//                 message : "Internal server error @deleteAttributeValues",
	//                 status  : 'warning',
	//                 timeout : 3000,
	//                 pos     : 'top-center'
	//                });
	//            })
	        };
	
	
	
	
	
	        function getKey(tempId){
	            if(tempId!=""){
	                var keyVals  = tempId.split("-");
	                var elkey="";
	                for(var i=1;i<keyVals.length-1;i++){
	                    if(i==keyVals.length-2)
	                        elkey+=keyVals[i]
	                    else
	                        elkey+=keyVals[i]+"."
	                }
	                console.log(elkey);
	                return elkey;
	            }
	            else{
	                return "";
	            }
	
	        }
	
	        $scope.fieldCriteria = function(node){
	            if(node.is_accept){
	                return 'accepted1'
	            }
	            else if(node.is_corrected){
	              return 'corrected1'
	            }
	            else{
	               return 'reviewed1'
	            }
	        };
	
	        vm.addNewNode = function(node,type,thisVal){
	           vm.attributeValue = "";
	           vm.attributeKey = "";
	           vm.selectedElementId = '';
	           vm.selectedElementFlag = false;
	           $scope.drawerCopy = angular.copy($scope.drawer);
	           $scope.entityModeEdit = false;
	           if(type == 'group'){
	               $scope.newNode = node.entity_id;
	                var temp = thisVal.$parentNodeScope.$modelValue.temp_id;
	                var afterTemp = temp.replace("-",".");
	                $scope.attributesList = $scope.entitiesList[afterTemp];
	
	           }
	           else{
	                $scope.newNode = node.temp_id;
	                var temp = node.temp_id;
	                var afterTemp = temp.replace("-",".");
	                $scope.attributesList = $scope.entitiesList[afterTemp];
	           }
	
	        };
	
	        vm.addNewEntity = function(node){
	           if(node.type == 'domain'){
	               vm.attributeValue = "";
	               vm.attributeKey = "Attribute";
	               vm.selectedElementId = '';
	               vm.selectedElementFlag = false;
	               $scope.displayNewEntity = true;
	               $scope.newEntityObj = {};
	               $scope.newEntityObj.parent_insight_id = node.insight_id;
	               $scope.newEntityObj.is_new = true;
	               $scope.newEntityObj.is_changed = true;
	               $scope.newEntityObj.name = "Entity";
	               $scope.newEntityObj.type = "grouped_entity";
	               $scope.newEntityObj.groups = [];
	
	//                {
	// 	"cardinality": "n",
	// 	"groups": [{
	// 		"type": "attribute",
	// 		"entity_id": "12cdd635-c88e-44ee-a4ba-515e74009c16",
	// 		"insight_id": "3c15686e-674f-4702-9ab2-4337f6665089",
	// 		"attributes": [{
	// 			"is_corrected": false,
	// 			"name": "problem",
	// 			"is_accept": true,
	// 			"temp_id": "resume-subheadings_active_problems_summary-problem-12cdd635~c88e~44ee~a4ba~515e74009c16",
	// 			"values": [{
	// 				"coordinates": ],
	// 				"value": "problem",
	// 				"score": 90.0,
	// 				"temp_id": "resume-subheadings_active_problems_summary-problem-12cdd635~c88e~44ee~a4ba~515e74009c16_1",
	// 				"is_checked": true,
	// 				"extracted_value": "problem",
	// 				"page_number": 2,
	// 				"element_id": "1f158160-43fc-4c66-b9cf-2ee6604c856c"
	// 			}],
	// 			"type": "attribute",
	// 			"justification": "",
	// 			"extracted_name": "problem",
	// 			"need_review": false,
	// 			"entity_key": "resume.subheadings_active_problems_summary"
	// 		}]
	// 	}],
	// 	"name": "subheadings_active_problems_summary",
	// 	"entity_key": "resume.subheadings_active_problems_summary",
	// 	"temp_id": "resume-subheadings_active_problems_summary",
	// 	"type": "grouped_entity",
	// 	"parent_entity_id": "c05a61e0-98af-429c-a126-a26f96c15192",
	// 	"extracted_name": "subheadings_active_problems_summary",
	// 	"entity_id": ""
	// }
	           }
	
	
	        };
	
	        $scope.changeSelectEntity = function(node){
	            var ent = node.name+'.'+vm.entityKey;
	            $scope.attributesList = $scope.entitiesList[ent];
	        };
	
	        vm.getListByHierarchy = function (data) {
	
	            vm.updateDrawer('value', data);
	            if (data.children != undefined) {
	                for (var i = 0; i < data.children.length; i++) {
	                        vm.updateDrawer('value', data.children[i],'list');
	                }
	            }
	
	        };
	        vm.getTableByHierarchy = function (value) {
	            var j = 0;
	            //               angular.forEach(value.tables.headings,function(obj,index){
	            //                   value.tables.headings[index] = value.tables.headings[index].join("");
	            //               });
	            //               value.tables.headings = value.tables.headings.join();
	            angular.forEach(value.cells, function (value1, key1) {
	                    vm.updateDrawer('value', value1, 'table');
	
	            })
	        };
	
	        vm.selectedElement = function(){
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = true;
	            if($scope.elementsList.length>0){
	                $scope.annotations = angular.copy([]);
	
	                $scope.zoomDisplay = 'zoomSize';
	                $scope.current_page = 1;
	                $scope.current_selection_page_number = 1;
	                $rootScope.selectedIndex =[];
	                $rootScope.selectedPage = [];
	
	                //vm.enableSelector();
	                for(var i=0;i<$scope.elementsList.length;i++){
	                    //vm.updateDrawer('value',$scope.elementsList[i]);
	                    if ($scope.elementsList[i].node_type == 'table') {
	
	                        vm.getTableByHierarchy($scope.elementsList[i])
	                    }
	                    else if ($scope.elementsList[i].node_type == 'list') {
	                        vm.getListByHierarchy($scope.elementsList[i]);
	                    }
	                    else
	                        vm.updateDrawer('value',$scope.elementsList[i]);
	                }
	                vm.render();
	                setOrderForSpecificTime();
	            }
	        };
	
	        vm.cancelNewAttribute = function(node){
	            $scope.annotations = angular.copy([]);
	//            for(var i=0;i<$scope.no_of_pages;i++){
	//                $scope.drawer[i+1] = angular.copy([]);
	//            }
	            vm.zoomValue = 0.20;
	            $(".zoomSize").css("zoom",vm.zoomValue);
	            $scope.current_page = 1;
	            $scope.current_selection_page_number = 1;
	            $rootScope.selectedIndex =[];
	            $rootScope.selectedPage = [];
	            $scope.annotations = angular.copy($scope.drawerCopy);
	            vm.render();
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = false;
	            $scope.listOfNewAttributes[node.insight_id] = false;
	            $scope.listOfNewAttributesObjs[node.insight_id] = {};
	
	
	            vm.attributeValue = "";
	            vm.attributeKey = "";
	            vm.entityKey = "";
	        };
	
	        vm.cancelNewEntity = function(){
	            if($scope.drawerCopy!=undefined){
	                if($scope.drawerCopy.length>0){
	                     $scope.annotations = [];
	                     $scope.annotations = angular.copy($scope.drawerCopy);
	                     vm.render();
	                     setTimeout(() => {
	                        vm.showallAnnotations();
	                     }, 300);
	                }
	            }
	            $scope.displayNewEntity = false;
	            $scope.displayNewAttribute = false;
	            vm.attributeValue = "";
	            vm.attributeKey = "";
	            vm.selectedElementId = '';
	            vm.selectedElementFlag = false;
	
	        };
	
	
	
	        vm.saveNewEntity = function(){
	            if($scope.newEntityObj.name == 'Entity'){
	                $.UIkit.notify({
	                                               message : 'Please select an Entity ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	                 return
	            }
	            $scope.displayNewAttribute = true;
	            $scope.drawerCopy = angular.copy($scope.annotations);
	            //$scope.newEntityObj.groups.push({'entity_key':$scope.newEntityObj.entity_key,'type':'attribute',''})
	
	        };
	
	        vm.saveNewNodeAttribute = function(node,thisVal){
	           if(vm.selectedElementId==''){
	             $.UIkit.notify({
	                                               message : 'Please select an element ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	             return
	           }
	
	           var reqObj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": node.insight_id,
	                        "type": "attribute",
	                        "key": name+'.'+$scope.listOfNewAttributesObjs[node.insight_id].attributeName,
	                        "entity_id": node.entity_id,
	                        "element_id":vm.selectedElementId,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "value": [{
				                "value": $scope.listOfNewAttributesObjs[node.insight_id].attributeValue,
				                "is_checked": true
			                }]
	                      }
	           };
	
	           var entity_id = angular.copy(node.entity_id);
	           entity_id = entity_id.replace(/-/gi, "~")
	           var tempId = thisVal.$parentNodeScope.$modelValue.temp_id
	           var str = angular.copy(tempId.split('-'));
	           var temp_id = ''
	           var unique_id = $scope.uniqueIdGenerator();
	           for(var j=0;j<str.length-1;j++){
	                temp_id+=str[j]+'-'
	           }
	           temp_id = temp_id+unique_id+"-"+entity_id
	
	
	           var obj = {  "is_newAttr": true,
	                        "is_corrected": false,
	                        "values": [{
	                            "temp_id": temp_id+'_1',
	                            "score": 100,
	                            "coordinates": [],
	                            "extracted_value": $scope.listOfNewAttributesObjs[node.insight_id].attributeValue,
	                            "value": $scope.listOfNewAttributesObjs[node.insight_id].attributeValue,
	                            "id":vm.selectedElementId,
	                            "drawerIndexObj":{}
	                        }],
	                        "need_review": false,
	                        "type": "attribute",
	                        "is_accept": true,
	                        "justification": "",
	                        "temp_id": temp_id,
	                        "name": $scope.listOfNewAttributesObjs[node.insight_id].attributeName,
	                        "extracted_name": $scope.listOfNewAttributesObjs[node.insight_id].attributeName,
	                        "entity_key":thisVal.$parentNodeScope.$modelValue.entity_key
	
	           }
	           node.attributes.push(obj);
	           node.is_changed = true;
	           $scope.listOfNewAttributes[node.insight_id] = false;
	           $scope.listOfNewAttributesObjs[node.insight_id] = {};
	
	           vm.cancelNewAttribute(node)
			   //$scope.submitFeedback(reqObj);
	        };
	
	        vm.saveNewEntityWithAttribute = function(node){
	            if(vm.attributeKey=='Attribute'){
	             $.UIkit.notify({
	                                               message : 'Please select an Attribute ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	                return
	             }
	            if(vm.selectedElementId==''){
	             $.UIkit.notify({
	                                               message : 'Please select an element ',
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	             return
	             }
	             var reqObj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "type": "entity",
	                        "entity_name": vm.attributeKey,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "attributes":[{
	                            "type": "attribute",
	                            "insight_id":node.insight_id,
	                            "key": $scope.newEntityObj.entity_key,
	                            "entity_id": node.entity_id,
	                            "element_id":vm.selectedElementId,
	                            "action": "upsert",
	                            "doc_id":$stateParams.id,
	                            "value": [{
	                                "value": vm.attributeValue,
	                                "is_checked": true
	                            }]
	                        }]
	                      }
	             };
	
	             $scope.newEntityObj.temp_id = node.temp_id+"-"+$scope.newEntityObj.entity_key;
	
	             var obj = {type:'attribute',attributes:[{name:vm.attributeKey,type:'attribute',entity_key:$scope.newEntityObj.entity_key,element_id:vm.selectedElementId,'values':[{value:vm.attributeValue,extracted_value:vm.attributeValue,id:vm.selectedElementId}]}]}
	             $scope.newEntityObj.groups.push(obj);
	             node.attributes.unshift($scope.newEntityObj);
	             $scope.extractOutput = $scope.extractOutput;
	             vm.cancelNewEntity();
	
	
	
				//$scope.submitFeedback(reqObj);
	
	
	
	        };
	
	        vm.saveNewnodeWithEntity = function(node,type,thisVal){
	           if(vm.selectedElementId==''){
	             $.UIkit.notify({
	                                   message : 'Please select an element ',
	                                   status  : 'danger',
	                                   timeout : 3000,
	                                   pos     : 'top-center'
	                           });
	             return
	           }
	            var tempId = node.temp_id;
	            var name = '';
	            var type_group = 'entity_group'
	            if(type == 'group'){
	               name = thisVal.$parentNodeScope.$modelValue.name;
	               type_group = 'attribute'
	            }
	            else{
	               name = node.name
	            }
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "type": "entity",
	                        "entity_name": vm.entityKey,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "attributes":[{
	                            "insight_id": node.insight_id,
	                            "type": "attribute",
	                            "key": vm.entityKey+'.'+vm.attributeKey,
	                            "entity_id": node.attributes[0].entity_id,
	                            "element_id":vm.selectedElementId,
	                            "action": "upsert",
	                            "doc_id":$stateParams.id,
	                            "value": [{
	                                "value": vm.attributeValue,
	                                "is_checked": true
	                            }]
	                        }]
	                      }
	            };
	
	            if(type != 'group'){
	               obj.data.add_type=type_group
	            }
	
	            var pushObj = {
	                    "type": "entity",
	                    "name": vm.entityKey,
	                    "attributes":[{
	                        "attributes": [{
	                            "name": vm.attributeKey,
	                            "is_corrected":true,
	                            "current_value": [{
	                                "value": vm.attributeValue,
	                                "is_checked": true
	                            }],
	                            "type": "attribute"
	                        }],
	                        "entity_id": node.entity_id,
	                        "type": "attribute"
	                    }]
					}
	//		    if(type=="group"){
	//		        node.attributes.push(pushObj.attributes[0]);
	//		    }
	//		    else{
	//		        node.attributes.push(pushObj);
	//		    }
				$scope.submitFeedback(obj,tempId);
	        };
	
	        vm.changedValue = function(node,attr,value){
	            if(value.value === value.extracted_value){
	                node.is_changed = false;
	                if(attr.name === attr.extracted_name){
	                    node.is_changed = false;
	                }
	                else{
	                    node.is_changed = true;
	                }
	            }
	            else{
	                node.is_changed = true;
	            }
	        };
	
	        vm.saveAttributeEdit = function(value,node,thisVal){
	
	            var obj={
	                "sess_id":vm.sess_id,
	                "data":{
	                        "insight_id": thisVal.insight_id,
	                        "entity_id": thisVal.entity_id,
	                        "type": thisVal.type,
	                        "old_key": node.entity_key+"."+node.extracted_name,
	                        "key": node.entity_key+"."+node.name,
	                        "action": "upsert",
	                        "doc_id":$stateParams.id,
	                        "value":[{'element_id':value.element_id,'value':value.value,'page_number':value.page_num,'score':value.score,'is_checked': true}]
	                      }
	            };
	            $scope.submitFeedback(obj);
	        };
	
	        vm.completeReview = function(){
	            var text = $scope.recordData.properties.filename;
	            var doc_id = $scope.currentDocId;
	            vm.feedbackObj = [];
	            $scope.extractOutputForFeedback = angular.copy($scope.extractOutput)
	            vm.recursiveForFeedback($scope.extractOutputForFeedback);
	            var temp = {}
	            temp.root_id = $scope.root_id;
	            temp.feedback = vm.feedbackObj;
	            temp.doc_id = $scope.doc_id;
	            ngDialog.open({ template: 'confirmBox',
	              controller: ['$scope','$state' ,function($scope,$state) {
	                  $scope.activePopupText = 'Are you sure you want to complete the review for '+"'"+text+"'"+' ?';
	                  $scope.onConfirmActivation = function (){
	                             ngDialog.close();
	                             entityLinkingService.saveCompleteReviewEntLink({'data':temp,'sess_id':vm.sess_id}).then(function(resp){
	                                  if(resp.data.status == "success"){
	
	                                       $.UIkit.notify({
	                                               message : resp.data.msg,
	                                               status  : 'success',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	
	                                       if(vm.loginDataObj.role == "sv"){
	                                            $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	                                       }
	                                       else{
	                                            $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	                                       }
	                                  }
	                                  else{
	                                       $.UIkit.notify({
	                                               message : resp.data.msg,
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	                                  }
	                             },function(err){
	                                  $.UIkit.notify({
	                                         message : "Internal server error",
	                                         status  : 'warning',
	                                         timeout : 3000,
	                                         pos     : 'top-center'
	                                  });
	                             });
	
	                  };
	              }]
	            });
	        };
	
	        vm.formatEntitiesForFeedback = function(data,type){
	            if(type == 'attribute'){
	                           if(data.is_changed){
	                                       if(data.attr_delete){
	                                               var newEntity_obj = {};
	                                               newEntity_obj.insight_id = data.insight_id;
	                                               newEntity_obj.action = 'delete';
	                                               newEntity_obj.data  = {};
	                                               newEntity_obj.data.attributes = {};
	                                               for(var j=0;j<data.attributes.length;j++){
	                                                    if(data.attributes[j].is_delete){
	                                                        newEntity_obj.data.attributes[data.attributes[j].name] = [];
	                                                        if(data.attributes[j].values!=undefined && data.attributes[j].values.length>0){
	                                                            for(var k=0;k<data.attributes[j].values.length;k++){
	                                                                if(!(data.attributes[j].values[k].is_delete)){
	                                                                    var values = []
	                                                                    values.push(data.attributes[j].values[k].value);
	                                                                    values.push(data.attributes[j].values[k].id);
	                                                                    newEntity_obj.data.attributes[data.attributes[j].name].push(values);
	                                                                }
	                                                            }
	                                                        }
	                                                    }
	                                               }
	                                               vm.feedbackObj.push(newEntity_obj);
	                                       }
	
	                                       var newEntity_obj = {};
	                                       newEntity_obj.insight_id = data.insight_id;
	                                       newEntity_obj.action = 'upsert';
	                                       newEntity_obj.data  = {};
	                                       newEntity_obj.data.entity_name = data.name;
	                                       newEntity_obj.data.attributes = {};
	                                       for(var j=0;j<data.attributes.length;j++){
	                                            if(!data.attributes[j].is_delete){
	                                                    var deleteAttrFlag = false;
	                                                    if(!(data.attributes[j].name === data.attributes[j].extracted_name)){
	                                                       if(!(data.attributes[j].is_newAttr)){
	                                                           deleteAttrFlag = true;
	                                                           var deleteAttr_obj = {};
	                                                           deleteAttr_obj.insight_id = data.insight_id;
	                                                           deleteAttr_obj.action = 'delete';
	                                                           deleteAttr_obj.data  = {};
	                                                           deleteAttr_obj.data.entity_name = data.name;
	                                                           deleteAttr_obj.data.attributes = {};
	                                                           deleteAttr_obj.data.attributes[data.attributes[j].extracted_name] = [];
	                                                       }
	                                                    }
	                                                    newEntity_obj.data.attributes[data.attributes[j].name] = [];
	                                                    if(data.attributes[j].values!=undefined && data.attributes[j].values.length>0){
	                                                        for(var k=0;k<data.attributes[j].values.length;k++){
	                                                            if(!(data.attributes[j].values[k].is_delete)){
	                                                                var values = []
	                                                                values.push(data.attributes[j].values[k].value);
	                                                                values.push(data.attributes[j].values[k].id);
	                                                                newEntity_obj.data.attributes[data.attributes[j].name].push(values);
	                                                                if(deleteAttrFlag){
	                                                                    deleteAttr_obj.data.attributes[data.attributes[j].extracted_name].push(values);
	                                                                }
	                                                            }
	                                                        }
	                                                    }
	                                                    if(deleteAttrFlag){
	                                                        vm.feedbackObj.push(deleteAttr_obj);
	                                                    }
	
	                                            }
	                                       }
	                                       vm.feedbackObj.push(newEntity_obj);
	
	                           }
	
	            }
	            else if(type == 'entity'){
	                if(!(data.is_changed && data.is_new && data.is_delete)){
	                    if(data.is_delete){
	                        var feedbackEntityObj = {};
	                        feedbackEntityObj.insight_id = data.insight_id;
	                        feedbackEntityObj.action ='delete';
	                        vm.feedbackObj.push(feedbackEntityObj);
	                    }
	                }
	            }
	            else if(type == 'grouped_entity'){
	                var flag = true;
	                if(!(data.is_changed && data.is_new && data.is_delete)){
	                    if(data.is_delete){
	                        var feedbackEntityObj = {};
	                        feedbackEntityObj.insight_id = data.parent_insight_id;
	                        feedbackEntityObj.action ='delete';
	                        feedbackEntityObj.data  = {};
	                        feedbackEntityObj.data.attributes = {};
	                        feedbackEntityObj.data.attributes[data.name] = [];
	                        vm.feedbackObj.push(feedbackEntityObj);
	                    }
	                    else if(data.is_changed && data.is_new){
	                        var newEntity_obj = {};
	                        newEntity_obj.parent_insight_id = data.parent_insight_id;
	                        newEntity_obj.action = 'upsert';
	                        for(var i=0;i<data.groups.length;i++){
	                           if(data.groups[i].is_delete){
	                                if(!data.is_new){
	                                    var feedbackEntityObj = {};
	                                    feedbackEntityObj.insight_id = data.groups[i].insight_id;
	                                    feedbackEntityObj.action ='delete';
	                                    vm.feedbackObj.push(feedbackEntityObj);
	                                }
	                           }
	                           else{
	                               if(data.groups[i].type == 'attribute'){
	                                   newEntity_obj.data  = {};
	                                   newEntity_obj.data.entity_name = data.name;
	                                   newEntity_obj.data.attributes = {};
	                                   for(var j=0;j<data.groups[i].attributes.length;j++){
	                                        if(!data.groups[i].attributes[j].is_delete){
	                                            newEntity_obj.data.attributes[data.groups[i].attributes[j].name] = [];
	                                            if(data.groups[i].attributes[j].values!=undefined && data.groups[i].attributes[j].values.length>0){
	                                                for(var k=0;k<data.groups[i].attributes[j].values.length;k++){
	                                                    if(!(data.groups[i].attributes[j].values[k].is_delete)){
	                                                        var values = []
	                                                        values.push(data.groups[i].attributes[j].values[k].value);
	                                                        values.push(data.groups[i].attributes[j].values[k].id);
	                                                        newEntity_obj.data.attributes[data.groups[i].attributes[j].name].push(values);
	                                                    }
	
	                                                }
	                                            }
	                                        }
	                                   }
	                                   vm.feedbackObj.push(newEntity_obj);
	                               }
	                           }
	                        }
	
	                    }
	                    else{
	                        for(var i=0;i<data.groups.length;i++){
	                           if(data.groups[i].is_delete){
	                                if(!data.is_new){
	                                    var feedbackEntityObj = {};
	                                    feedbackEntityObj.insight_id = data.groups[i].insight_id;
	                                    feedbackEntityObj.action ='delete';
	                                    vm.feedbackObj.push(feedbackEntityObj);
	                                }
	                           }
	                           else if(data.groups[i].is_new){
	                                var newEntity_obj = {};
	                                newEntity_obj.parent_insight_id = data.parent_insight_id;
	                                newEntity_obj.action = 'upsert';
	                                if(data.groups[i].type == 'attribute'){
	                                   newEntity_obj.data  = {};
	                                   newEntity_obj.data.entity_name = data.name;
	                                   newEntity_obj.data.attributes = {};
	                                   for(var j=0;j<data.groups[i].attributes.length;j++){
	                                        if(!data.groups[i].attributes[j].is_delete){
	                                            newEntity_obj.data.attributes[data.groups[i].attributes[j].name] = [];
	                                            if(data.groups[i].attributes[j].values!=undefined && data.groups[i].attributes[j].values.length>0){
	                                                for(var k=0;k<data.groups[i].attributes[j].values.length;k++){
	                                                    if(!(data.groups[i].attributes[j].values[k].is_delete)){
	                                                        var values = []
	                                                        values.push(data.groups[i].attributes[j].values[k].value);
	                                                        values.push(data.groups[i].attributes[j].values[k].id);
	                                                        newEntity_obj.data.attributes[data.groups[i].attributes[j].name].push(values);
	                                                    }
	
	                                                }
	                                            }
	                                        }
	                                   }
	                                   vm.feedbackObj.push(newEntity_obj);
	                                }
	
	                           }
	                           else{
	
	                               if(data.groups[i].type == 'attribute'){
	                                   if(data.groups[i].is_changed){
	                                       if(data.groups[i].attr_delete){
	                                               var newEntity_obj = {};
	                                               newEntity_obj.insight_id = data.groups[i].insight_id;
	                                               newEntity_obj.action = 'delete';
	                                               newEntity_obj.data  = {};
	                                               newEntity_obj.data.attributes = {};
	                                               for(var j=0;j<data.groups[i].attributes.length;j++){
	                                                    if(data.groups[i].attributes[j].is_delete){
	                                                        newEntity_obj.data.attributes[data.groups[i].attributes[j].name] = [];
	                                                        if(data.groups[i].attributes[j].values!=undefined && data.groups[i].attributes[j].values.length>0){
	                                                            for(var k=0;k<data.groups[i].attributes[j].values.length;k++){
	                                                                if(!(data.groups[i].attributes[j].values[k].is_delete)){
	                                                                    var values = []
	                                                                    values.push(data.groups[i].attributes[j].values[k].value);
	                                                                    values.push(data.groups[i].attributes[j].values[k].id);
	                                                                    newEntity_obj.data.attributes[data.groups[i].attributes[j].name].push(values);
	                                                                }
	                                                            }
	                                                        }
	                                                    }
	                                               }
	                                               vm.feedbackObj.push(newEntity_obj);
	                                       }
	
	                                       var newEntity_obj = {};
	                                       newEntity_obj.insight_id = data.groups[i].insight_id;
	                                       newEntity_obj.action = 'upsert';
	                                       newEntity_obj.data  = {};
	                                       newEntity_obj.data.entity_name = data.name;
	                                       newEntity_obj.data.attributes = {};
	                                       for(var j=0;j<data.groups[i].attributes.length;j++){
	                                            if(!data.groups[i].attributes[j].is_delete){
	                                                    var deleteAttrFlag = false;
	                                                    if(!(data.groups[i].attributes[j].name === data.groups[i].attributes[j].extracted_name)){
	                                                       if(!(data.groups[i].attributes[j].is_newAttr)){
	                                                           deleteAttrFlag = true;
	                                                           var deleteAttr_obj = {};
	                                                           deleteAttr_obj.insight_id = data.groups[i].insight_id;
	                                                           deleteAttr_obj.action = 'delete';
	                                                           deleteAttr_obj.data  = {};
	                                                           deleteAttr_obj.data.entity_name = data.name;
	                                                           deleteAttr_obj.data.attributes = {};
	                                                           deleteAttr_obj.data.attributes[data.groups[i].attributes[j].extracted_name] = [];
	                                                       }
	                                                    }
	                                                    newEntity_obj.data.attributes[data.groups[i].attributes[j].name] = [];
	                                                    if(data.groups[i].attributes[j].values!=undefined && data.groups[i].attributes[j].values.length>0){
	                                                        for(var k=0;k<data.groups[i].attributes[j].values.length;k++){
	                                                            if(!(data.groups[i].attributes[j].values[k].is_delete)){
	                                                                var values = []
	                                                                values.push(data.groups[i].attributes[j].values[k].value);
	                                                                values.push(data.groups[i].attributes[j].values[k].id);
	                                                                newEntity_obj.data.attributes[data.groups[i].attributes[j].name].push(values);
	                                                                if(deleteAttrFlag){
	                                                                    deleteAttr_obj.data.attributes[data.groups[i].attributes[j].extracted_name].push(values);
	                                                                }
	                                                            }
	                                                        }
	                                                    }
	                                                    if(deleteAttrFlag){
	                                                        vm.feedbackObj.push(deleteAttr_obj);
	                                                    }
	
	                                            }
	                                       }
	                                       vm.feedbackObj.push(newEntity_obj);
	
	                                   }
	                               }
	                           }
	                        }
	
	                    }
	                }
	            }
	        };
	
	        vm.recursiveForFeedback = function(data){
	            for(var i=0;i<data.length;i++){
	                   if(data[i].type=='grouped_entity' || data[i].type == 'attribute'){
	                      vm.formatEntitiesForFeedback(data[i],data[i].type);
	
	                   }
	                   else if(data[i].type=='entity' || data[i].type=='domain'){
	                        vm.formatEntitiesForFeedback(data[i],data[i].type);
	                        vm.recursiveForFeedback(data[i].attributes);
	                   }
	
	
	            }
	        };
	
	        vm.completeFeedback = function(){
	            vm.feedbackObj = [];
	            $scope.extractOutputForFeedback = angular.copy($scope.extractOutput)
	            vm.recursiveForFeedback($scope.extractOutputForFeedback);
	            var temp = {}
	            temp.root_id = $scope.root_id;
	            temp.feedback = vm.feedbackObj;
	            temp.doc_id = $scope.doc_id;
	
	            entityLinkingService.saveEntityLinkingFeedback({'data':temp,'sess_id':vm.sess_id}).then(function(resp){
	                                  if(resp.data.status == "success"){
	
	                                       $.UIkit.notify({
	                                               message : resp.data.msg,
	                                               status  : 'success',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	                                       vm.getGroups('load');
	
	//                                       if(vm.loginDataObj.role == "sv"){
	//                                            $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	//                                       }
	//                                       else{
	//                                            $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	//                                       }
	                                  }
	                                  else{
	                                       $.UIkit.notify({
	                                               message : resp.data.msg,
	                                               status  : 'danger',
	                                               timeout : 3000,
	                                               pos     : 'top-center'
	                                       });
	                                  }
	            },function(err){
	                  $.UIkit.notify({
	                         message : "Internal server error",
	                         status  : 'warning',
	                         timeout : 3000,
	                         pos     : 'top-center'
	                  });
	            });
	        };
	
	        $scope.goToCaseDashboard = function(){
	            if($scope.loginData.role == "sv"){
	                $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	            }
	            else{
	                $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	            }
	        };
	
	        vm.stateChangeFunct = function(obj){
	            entityLinkingService.saveChangedState({'data':obj,'sess_id':vm.sess_id}).then(function(resp){
	                  if(resp.data.status == "success"){
	                       $.UIkit.notify({
	                               message : resp.data.msg,
	                               status  : 'success',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                       });
	                       if($scope.loginData.role == "sv"){
	                            $state.go("app.supervisorDocumentsList",{"id":$stateParams.queue});
	                       }
	                       else{
	                            $state.go("app.agentDocumentsList",{"id":$stateParams.queue});
	                       }
	                  }
	                  else{
	                       $.UIkit.notify({
	                               message : resp.data.msg,
	                               status  : 'danger',
	                               timeout : 3000,
	                               pos     : 'top-center'
	                       });
	                  }
	            },function(err){
	                  $.UIkit.notify({
	                         message : "Internal server error",
	                         status  : 'warning',
	                         timeout : 3000,
	                         pos     : 'top-center'
	                  });
	            });
	        };
	
	        vm.clearStateSelection = function(){
	            vm.changedState = "";
	            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	                $scope.$apply();
	            }
	        };
	
	        vm.saveStateChange = function(){
	            var obj = {"doc_state": vm.changedState,"doc_id": $stateParams.id};
	            if(vm.changedState != ""){
	                ngDialog.open({ template: 'confirmBox1',
	                  preCloseCallback:function(){ vm.clearStateSelection() },
	                  controller: ['$scope','$state' ,function($scope,$state) {
	                      $scope.activePopupText = 'Would you like to send this document to '+vm.changedState+'?';
	                      $scope.onConfirmActivation = function (){
	                            vm.stateChangeFunct(obj);
	                            ngDialog.close();
	                      };
	                  }]
	                });
	            }
	        };
	
	        document.getElementById('content-wrapper').addEventListener('scroll', function (e) {
	            $scope.current_page = Math.round(e.target.scrollTop / PAGE_HEIGHT) + 1;
	            console.log('page_number'+ $scope.current_page);
	
	        });
	
	        document.getElementById('content-wrapper').addEventListener('scroll', function (e) {
	            $scope.current_page = Math.round(e.target.scrollTop / PAGE_HEIGHT) + 1;
	            console.log('page_number'+ $scope.current_page);
	            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
	                $scope.$apply();
	            }
	
	        });
	
	
	      /******************************************************************************
	                Entity Linking code ends here
	      ******************************************************************************/
	      vm.collapsed = {};
	        $scope.chnageIcon =function(collapse,temp_id){
	            vm.collapsed[temp_id] = !vm.collapsed[temp_id];
	            console.log("collapse==>", vm.collapsed[temp_id]);
	        };
	
	
	
	
	}];

/***/ }),
/* 136 */
/***/ (function(module, exports) {

	module.exports = "<script type=\"text/ng-template\" id=\"tree1.html\">\n    {$data.name$}\n\n    <ul class=\"tree\">\n        <li ng-repeat=\"data in data.nodes\" ng-include=\"'tree1.html'\"></li>\n    </ul>\n</script>\n<script type=\"text/ng-template\" id=\"confirmBox1\">\n    <div class=\"popup-header\">\n        <h3 class=\"text-primary\"> Confirm Action </h3>\n        <hr class=\"popup-hr\"/>\n        <p class=\"text-info\" style=\"padding:10px\"> {$ activePopupText $} </p>\n        <br/>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n                <button class=\"btn btn-primary right\" ng-click=\"onConfirmActivation()\"> Confirm</button>\n            </div>\n        </div>\n    </div>\n</script>\n<script type=\"text/ng-template\" id=\"confirmBox\">\n    <div class=\"popup-header\">\n        <h3 class=\"text-primary\"> Complete Document Review? </h3>\n        <hr class=\"popup-hr\"/>\n        <p class=\"modal-text\"> {$ activePopupText $} </p>\n        <br/>\n    </div>\n    <div class=\"popup-footer\">\n        <div class=\"row text-right\">\n            <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n                <button class=\"btn bnt-cst-process\" ng-click=\"onConfirmActivation()\"> Complete Review</button>\n\n            </div>\n        </div>\n    </div>\n</script>\n<script type=\"text/ng-template\" id=\"confirmEntityBox\">\n    <div class=\"popup-header\">\n        <label class=\"text-primary\"> Confirm Action </label>\n        <hr class=\"popup-hr\"/>\n    </div>\n    <div class=\"popup-body\">\n        <div class=\"text-info\" style=\"padding:10px;font-size:16px;\"> {$ activePopupText $} </div>\n        <br>\n        <label class=\"custom-checkbox\" style=\"margin-left:9px;\">\n            <span>Do not show this message again ?</span>\n          <input type=\"checkbox\" ng-model=\"el.showPopup.popup\"/>\n          <span class=\"checkmark\" style=\"top:3px;\"></span>\n        </label>\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-sm-12 col-xs-12 co-md-12\">\n                <button class=\"btn btn-primary right\" ng-click=\"onConfirmActivation(el.showPopup.popup)\"> Confirm</button>\n            </div>\n        </div>\n    </div>\n</script>\n<!--<div class=\"row custom-header\">-->\n    <!--<div class=\"col-lg-12 col-md-12 col-sm-12 text-right\" style=\"margin-top:15px;\" ng-show=\"showNavigation\">-->\n       <!--<span>{$ no_of_records $}</span> / {$ total_records $}<span></span>-->\n       <!--<a style=\"text-decoration:none;\" ng-click=\"el.navigatePage('prev')\" ng-class=\"no_of_records==1?'prevCursor':''\">< Previous</a>-->\n       <!--<a style=\"margin-left:25px;text-decoration:none;\" ng-click=\"el.navigatePage('next')\" ng-class=\"no_of_records==total_records?'nextCursor':''\">Next ></a>-->\n    <!--</div>-->\n<!--</div>-->\n\n<div class=\"row custom-header\" style=\"height: 33px;padding-left:10px;\">\n    <div class=\"col-lg-3 col-md-3 col-sm-3 no-padding extraction-title-container review-breadcrumb\">\n        <!-- <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item \">\n                <a class=\"breadcrumb-heading\" ng-click=\"goToCaseDashboard()\">Documents List</a>\n            </li>\n            <li class=\"breadcrumb-item active\">\n                <img src=\"./static/ref-app/app/images/cleanImage.png\" style=\"width:15px;\"/>\n                <span>{$ recordData.properties.filename $}</span>\n            </li>\n        </ol> -->\n\n        <!-- <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item \">\n                    <a class=\"breadcrumb-heading\" ng-click=\"goToCaseDashboard()\">Documents List</a>\n                </li>\n                <li class=\"breadcrumb-item active\" >\n                    <div class=\"extraction-title\" title=\"{$ recordData.properties.filename $}\"><img src=\"./static/ref-app/app/images/cleanImage.png\" style=\"width:15px;\"/>\n                          {$ recordData.properties.filename $}</div>\n                </li>\n            </ol> -->\n            <ol class=\"breadcrumb\">\n                    <li>\n                        <a ui-sref=\"app.agentDashboard\">\n                                <span class=\"ext-title\">\n                                        Queues\n                                    </span>\n                        </a> \n                        <span class=\"ext-title\" style=\"width: 10px;color:#555\"> > </span>\n                    </li>\n                    <li class=\"breadcrumb-item \">\n                        <a ng-click=\"goToCaseDashboard()\">\n                            <span class=\"ext-title\">\n                                {$ currentQueueName $}\n                            </span>\n                            <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                        </a>\n                    </li>\n                    <li class=\"breadcrumb-item \" ng-if=\"parentfilename\">\n                           \n                                <span class=\"ext-title\">\n                                    {$ parentfilename $}\n                                </span>\n                                <span class=\"ext-title\" style=\"width: 10px;color:#555;\"> > </span>\n                           \n                        </li>\n                    <li class=\"breadcrumb-item active\">\n                        <span class=\"ext-title\">\n                            {$ recordData.properties.filename $}</span>\n                        <span class=\"breadcrumbhover\">\n                            <img ng-if=\"recordData.properties.filename\" src=\"./static/ref-app/app/images/breadcrumb-1.png\" class=\"breadcrumbimg\" />\n                            <div id=\"breadcrumbdiv\" class=\"hoverbreadcrumb\">\n                                <ol class=\"breadcrumb\">\n                                    <li>Queues</li>\n                                    <li class=\"breadcrumb-item \">\n                                        {$ currentQueueName $}\n                                    </li>\n                                    <li class=\"breadcrumb-item\" ng-if=\"parentfilename\">\n                                        {$ parentfilename $}\n                                    </li>\n                                    <li class=\"breadcrumb-item active\">\n                                        <span class=\"ext-title\">\n                                            {$ recordData.properties.filename $}</span>\n                                    </li>\n                                </ol>\n                            </div>\n                        </span>\n                    </li>\n                </ol>\n    </div>\n\n    <div class=\"col-lg-9 col-md-9 col-sm-9 text-right no-padding\">\n        <div class=\"row\" style=\"display:flex;align-items:center;margin-top: 3px;float:right\">\n            <div style=\"width: 140px;float: left;display: inline-block;\">\n                <span class=\"scoresHeading\">Confidence Score:</span>\n                <span class=\"label-style\">{$ extractedData.data.document_confidence_score | number:2 $}%</span>\n            </div>\n            <div style=\"width: 130px;float: left;display: inline-block;\">\n                <span class=\"scoresHeading\">Attributes Extracted:</span>\n                <span class=\"label-style\">{$extractedData.data.attributes_extracted $} </span>\n            </div>\n            <div style=\"width:50px;display: inline-block;float: left;text-align: center;color:#9e9e9e;\">\n                |\n            </div>\n            <div class=\"filter-cls\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"accepted\"></span>\n                    <label style=\"font-weight: 400;margin-bottom:0px;\">Accepted [{$extractedData.data.accept_count $}]</label>\n                  <input type=\"checkbox\" ng-model=\"checkObj.accept\" ng-change=\"el.changeIntaraction('accept',checkObj.accept)\">\n                  <span class=\"checkmark\"></span>\n                </label>\n            </div>\n\n            <div class=\"filter-cls\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"corrected\"></span>\n                   <label style=\"font-weight: 400;margin-bottom:0px;\">Corrected [{$extractedData.data.correct_count $}]</label>\n                  <input type=\"checkbox\" ng-model=\"checkObj.correct\" ng-change=\"el.changeIntaraction('correct',checkObj.correct)\"/>\n                  <span class=\"checkmark\"></span>\n                </label>\n\n            </div>\n            <div class=\"filter-cls\">\n                <label class=\"custom-checkbox\">\n                    <span class=\"reviewed\"></span>\n                    <label style=\"font-weight: 400;margin-bottom:0px;\">Needs Review\n                        <span class=\"reviewValue\">[{$extractedData.data.review_required $}]</span>\n                    </label>\n                  <input type=\"checkbox\" ng-model=\"checkObj.review\" ng-change=\"el.changeIntaraction('review',checkObj.review)\"/>\n                  <span class=\"checkmark\"></span>\n                </label>\n            </div>\n            <div style=\"width: 50px;float: left;display: inline-block;text-align:center;\" ng-click=\"el.completeFeedback()\">\n                <i class=\"fa fa-floppy-o\" style=\"font-size:24px;color: #42aae1;\"></i>\n            </div>\n            <div style=\"width: 90px;float: left;display: inline-block;padding-left: 15px;\">\n                <select class=\"form-control headerSelectBox\" ng-model=\"el.changedState\" ng-change=\"el.saveStateChange()\" style=\"border: 1px solid #50b6e7;\">\n                    <option value=\"\">Move To </option>\n                    <option ng-repeat=\"(key,value) in reviewStatesList\" value=\"{$ value.doc_state $}\" ng-disabled=\"!value.active\">{$ key $}</option>\n                </select>\n            </div>\n            <div style=\"width: 90px;float: left;display: inline-block;margin-left:15px;\">\n                <button class=\"btn btn-custom btn-subheader\" ng-click=\"el.completeReview()\">DONE</button>\n\n            </div>\n        </div>\n    </div>\n\n    <!--key-->\n</div>\n\n<!--<div class=\"row retrainDiv\">-->\n        <!--<div class=\"col-lg-6 col-sm-6 col-xs-12 col-md-6\">-->\n            <!--<div class=\"btn-group\" ng-show=\"displayZoom\">-->\n                <!--<button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"zoomOut()\"><i-->\n                        <!--class=\"fa fa-minus-circle\" aria-hidden=\"true\"></i></button>-->\n                <!--<button type=\"button\" class=\"btn btn-default btn-zoom btn-magnifier\" ng-disabled=\"true\"><img src=\"/static/ref-app/app/images/zoomIcon.png\"-->\n                                                                                          <!--style=\"width: 18px;\"/>-->\n                <!--</button>-->\n                <!--<button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"zoomIn()\"><i class=\"fa fa-plus-circle\"-->\n                                                                                              <!--aria-hidden=\"true\"></i>-->\n                <!--</button>-->\n            <!--</div>-->\n        <!--</div>-->\n        <!--<div class=\"col-lg-3 col-sm-3 col-xs-12 col-md-3\" style=\"padding-left:0px\">-->\n            <!--<label class=\"checkbox-inline\">-->\n                <!--<input type=\"checkbox\" ng-model=\"getDemo\">Demo Mode-->\n            <!--</label>-->\n            <!--<button class=\"btn btn-info\" ng-click=\"retrainData()\" ng-show=\"getDemo\"> Retrain</button>-->\n        <!--</div>-->\n        <!--<div class=\"col-lg-3 col-sm-3 col-xs-12 col-md-3\"ng-click=\"download()\" style=\"cursor:pointer;\">-->\n              <!--<div style=\"float:right\">-->\n\t\t\t\t\t\t\t<!--<img ng-src=\"/static/ref-app/app/images/download.png\" style=\"width:25px;\"/>-->\n\t\t\t\t\t\t\t<!--<span style=\"color:#1c7cb9;\">Download JSON</span>-->\n              <!--</div>-->\n        <!--</div>-->\n\n    <!--</div>-->\n            <div class=\"row row-eq-height linking\"\n                 ng-show=\"(el.documentType != 'digital' && el.documentType != 'email')\"  style=\"height:{$ height $}px;overflow-y:auto;\">\n\n                <div class=\"col-sm-6 col-md-6 col-xs-12 col-lg-6 custom-rightPanel no-padding\" id=\"actual\">\n                    <div class=\"row\"  ng-if=\"showUnknown && recordData.doc_type!='excel'\">\n                        <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 text-right\">\n                            <div class=\"btn-group text-center\" >\n                                <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"el.zoomOut()\"><i\n                                        class=\"fa fa-minus-circle\" aria-hidden=\"true\"></i></button>\n                                <button type=\"button\" class=\"btn btn-default btn-zoom btn-magnifier\" ng-click=\"el.zoomReset()\"><img src=\"/static/ref-app/app/images/zoomIcon.png\"\n                                                                                                          style=\"width: 18px;\"/>\n                                </button>\n                                <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"el.zoomIn()\"><i class=\"fa fa-plus-circle\"\n                                                                                                              aria-hidden=\"true\"></i>\n                                </button>\n\n\n                            </div>\n                            <button type=\"button\" class=\"btn btn-default btn-zoom\" ng-click=\"el.disableSelector()\">\n                                    Reset\n                                </button>\n                        </div>\n                        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 cst-padding text-right\">\n                            <div ng-if=\"showUnknown\" style=\"display: inline-block;\">\n                            <!--<div class=\"pagination\" ng-show=\"no_of_pages>1\">-->\n                              <!--<a ng-repeat=\"(key,value) in pagesInfo\" ng-click=\"el.changeDocumentInfo(value.page_no)\" ng-class=\"current_page==value.page_no?'active':''\">{$ value.page_no $}</a>-->\n                            <!--</div>-->\n                                <div ng-show=\"no_of_pages>1\">\n                                    <span>\n                                        <button class=\"btn pagination-button\" ng-disabled=\"current_page==1\" ng-click=\"el.changePageNumUnknown('prev')\"><i class=\"fa fa-chevron-left\" style=\"color:white;font-size:12px;\"></i></button>\n                                    </span>\n                                    <span class=\"pagination-textBox\">\n                                        <input type=\"number\" class=\"pagination-text\" ng-model=\"current_page\" ng-keyup=\"el.keyEnterUnknown($event)\"/>\n                                    </span>\n                                    <span>\n                                        <button class=\"btn pagination-button\" ng-disabled=\"current_page==no_of_pages\" ng-click=\"el.changePageNumUnknown('next')\"><i class=\"fa fa-chevron-right\" style=\"color:white;font-size:12px;\"></i></button>\n                                    </span>\n                                    <span> of {$ no_of_pages $}</span>\n                                </div>\n                            </div>\n                            <div ng-if=\"showImage\" style=\"display: inline-block;\">\n                                <!--<div class=\"pagination\" ng-show=\"no_of_pages>1\">-->\n                                  <!--<a ng-repeat=\"(key,value) in pagesInfo\" ng-click=\"el.changeDocumentInfo(value.page_no)\" ng-class=\"current_page==value.page_no?'active':''\">{$ value.page_no $}</a>-->\n                                <!--</div>-->\n                                <div ng-show=\"no_of_pages>1\">\n                                    <span>\n                                        <button class=\"btn pagination-button\" ng-disabled=\"current_page==1\" ng-click=\"el.changePageNum('prev')\"><i class=\"fa fa-chevron-left\" style=\"color:white;font-size:12px;\"></i></button>\n                                    </span>\n                                    <span class=\"pagination-textBox\">\n                                        <input type=\"number\" class=\"pagination-text\" ng-model=\"current_page\" ng-keyup=\"el.keyEnter($event)\"/>\n                                    </span>\n                                    <span>\n                                        <button class=\"btn pagination-button\" ng-disabled=\"current_page==no_of_pages\" ng-click=\"el.changePageNum('next')\"><i class=\"fa fa-chevron-right\" style=\"color:white;font-size:12px;\"></i></button>\n                                    </span>\n                                    <span> of {$ no_of_pages $}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row pdf-extraction-new\" id=\"scrollImage\">\n                        <div class=\"col-lg-12 col-md-12 col-sm-12 cst-padding\">\n                            <div class=\"toolbar\" style=\"display:none;\">\n                                <button class=\"cursor\" type=\"button\" title=\"Cursor\" data-tooltype=\"cursor\">➚</button>\n\n                                <div class=\"spacer\"></div>\n\n                                <button class=\"rectangle\" type=\"button\" title=\"Rectangle\" data-tooltype=\"area\">&nbsp;</button>\n                                <button class=\"highlight\" type=\"button\" title=\"Highlight\" data-tooltype=\"highlight\">&nbsp;</button>\n                                <button class=\"strikeout\" type=\"button\" title=\"Strikeout\" data-tooltype=\"strikeout\">&nbsp;</button>\n\n                                <div class=\"spacer\"></div>\n\n                                <button class=\"text\" type=\"button\" title=\"Text Tool\" data-tooltype=\"text\"></button>\n                                <select class=\"text-size\"></select>\n                                <div class=\"text-color\"></div>\n\n                                <div class=\"spacer\"></div>\n\n                                <button class=\"pen\" type=\"button\" title=\"Pen Tool\" data-tooltype=\"draw\">✎</button>\n                                <select class=\"pen-size\"></select>\n                                <div class=\"pen-color\"></div>\n\n                                <div class=\"spacer\"></div>\n\n                                <button class=\"comment\" type=\"button\" title=\"Comment\" data-tooltype=\"point\">🗨</button>\n\n                                <div class=\"spacer\"></div>\n\n                                <select class=\"scale\">\n                                    <option value=\".17\">17%</option>\n                                    <option value=\".25\">25%</option>\n                                    <option value=\".33\">33%</option>\n                                    <option value=\".5\">50%</option>\n                                    <option value=\"1\">100%</option>\n                                    <option value=\"1.33\">133%</option>\n                                    <option value=\"1.5\">150%</option>\n                                    <option value=\"2\">200%</option>\n                                </select>\n\n                                <a href=\"javascript://\" class=\"rotate-ccw\" title=\"Rotate Counter Clockwise\">⟲</a>\n                                <a href=\"javascript://\" class=\"rotate-cw\" title=\"Rotate Clockwise\">⟳</a>\n\n                                <div class=\"spacer\"></div>\n\n                                <a href=\"javascript://\" class=\"clear\" title=\"Clear\">×</a>\n                            </div>\n                            <div id=\"loadingpdf\" class=\"loadingdoc\">Please wait document is loading...\n                                <br/>\n                                <center><i class=\"fa fa-cog fa-spin fa-2x fa-fw margin-bottom\"></i></center>\n                            </div>\n                            <div id=\"content-wrapper\" style=\"height:{$ pdfHeight $}px;overflow-y:scroll;\">\n                                <div id=\"viewer\" class=\"pdfViewer\"></div>\n                            </div>\n                            <div id=\"comment-wrapper\" style=\"display:none;\">\n                                <h4>Comments</h4>\n                                <div class=\"comment-list\">\n                                    <div class=\"comment-list-container\">\n                                        <div class=\"comment-list-item\">No comments</div>\n                                    </div>\n                                    <form class=\"comment-list-form\" style=\"display:none;\">\n                                        <input type=\"text\" placeholder=\"Add a Comment\" />\n                                    </form>\n                                </div>\n                            </div>\n                            <div id=\"annotationdiv\" class=\"annotation-wrapper\">\n\n                            </div>\n                        </div>\n                        <div class=\"col-lg-12 col-md-12 col-sm-12\"  ng-if=\"recordData.doc_type=='excel'\">\n                            <div ng-bind-html=\"el.renderHTMLData()\"></div>\n\n                            <div class=\"row\" ng-if=\"recordData.doc_type=='excel'\">\n                                <div class=\"col-lg-12 col-sm-12 col-xs-12 col-md-12 excel-footer\" style=\"background-color:aliceblue;text-align:left;\">\n                                    <div class=\"btn-group\" role=\"group\" >\n                                      <button type=\"button\" class=\"btn btn-sheet excel-btn\" ng-class=\"excelBtnArr[$index]\"style=\"\n            border-right: 1px solid black;\" ng-repeat=\"data in  pagesInfo\" ng-click=\"getSheetData($index)\">Sheet {$ $index+1 $}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <div class=\"col-sm-6 col-md-6 col-xs-12 col-lg-6 no-padding\"  ng-if=\"showImage\">\n                    <ul class=\"nav nav-tabs nav-reviewTabs\">\n                        <li class=\"active\"><a data-toggle=\"tab\" href=\".elements\">Elements</a></li>\n                        <li><a data-toggle=\"tab\" href=\".outcomes\">Domain Objects</a></li>\n                    </ul>\n                    <div class=\"image-style1\" id=\"scrollDiv\"\n                         style=\"height:{$ elementHeight $}px;overflow-y:scroll;background-color:white;\">\n                        <div class=\"tab-content\">\n                            <div class=\"tab-pane in active elements\" style=\"position: relative;border:1px solid #eee;\">\n                                <div class=\"panel-group\" style=\"padding:10px;\" id=\"accordionGroupData\" role=\"tablist\"\n                                     aria-multiselectable=\"true\">\n                                    <div class=\"panel panel-default\" ng-repeat=\"(groupName,groupValue) in listOfData\">\n                                        <div class=\"panel-heading\" role=\"tab\">\n                                            <h4 class=\"panel-title\">\n                                                <a class=\"collapsed\" role=\"button\" data-toggle=\"collapse\"\n                                                   data-parent=\"#accordionGroupData\" href=\".group{$ groupName $}\"\n                                                   aria-expanded=\"false\" aria-controls=\"group{$ groupName $}\">\n                                                    {$ groupName $}\n                                                </a>\n                                            </h4>\n                                        </div>\n                                        <div class=\"panel-collapse collapse group{$ groupName $}\" role=\"tabpanel\"\n                                             aria-labelledby=\"group{$ groupName $}\" ng-class=\"$index==0?'in':''\">\n                                            <div ng-repeat=\"list in groupValue track by $index\">\n\n                                                <div ng-if=\"list.type=='field' ||  list.type=='paragraph' || list.type=='omr'\"\n                                                     ng-show=\"list.score<=$root.slider.value\"\n                                                     style=\"border-bottom:1px solid #e0e0e0;\" tabindex=\"0\"\n                                                     class=\"row {$ rowHighlight[list.groupName+''+$index] $} review-row \"\n                                                     id=\"inner{$ groupName $}{$ $index $}\"\n                                                     ng-click=\"rowClick($index,list.drawerIndex,groupName)\"\n                                                     ng-focus=\"rowClick($index,list.drawerIndex,groupName)\">\n                                                    <div class=\"col-lg-7 col-md-7 col-sm-7 sub-row\">\n                                                        <div class=\"head row-style\" ng-class=\"list.rule_status?'':'ruleValidation'\">\n                                                            <span>{$ getAttributeName(list.domain_mapping) $}</span>\n\n                                                        </div>\n                                                        <div class=\"small-font row-style\"\n                                                             ng-hide=\"list.is_accept || list.is_update\">Processed Result\n                                                            ({$list.score | number:2$}%)\n                                                        </div>\n                                                        <div class=\"small-font row-style\" ng-show=\"list.is_accept\">Final Value\n                                                            (Accepted)\n                                                        </div>\n                                                        <div class=\"small-font row-style\" ng-show=\"list.is_update\">Final Value\n                                                            (Corrected)\n                                                        </div>\n                                                        <div class=\"row-style valueStyle\" ng-show=\"!hideObj.isEdit[$index]\"\n                                                             ng-if=\"list.type=='field' ||  list.type=='paragraph' \">\n                                                            <span>{$ list.text $}</span>\n                                                            <i class=\"fa fa-exclamation-triangle\" style=\"color:red\" ng-show=\"!list.rule_status\" title =\"{$ list.rule_validate_msg $}\"></i>\n\n                                                        </div>\n                                                        <div ng-if=\"list.type=='omr'\">\n                                                            <ul>\n                                                                <li ng-repeat=\"options in list.groups[0].options\"\n                                                                    ng-if=\"options.ischecked\">{$ options.label $}\n                                                                </li>\n                                                            </ul>\n                                                        </div>\n\n                                                        <div ng-show=\"hideObj.isEdit[$index]\">\n\n                                                            <input type=\"text\" ng-model=\"editVal[$index]\" class=\"form-control\"\n                                                                   autofocus ng-show=\"parentVal[$index].length<=30\">\n                                                            <textarea ng-model=\"editVal[$index]\" class=\"form-control\" rows=\"4\"\n                                                                      cols=\"50\" autofocus\n                                                                      ng-show=\"parentVal[$index].length>30\"></textarea>\n                                                            <span class=\"error\"\n                                                                  ng-show=\"showEditText[$index]\">{$ showEditMsg $}</span>\n\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"col-lg-5 col-md-5 col-sm-5 sub-row\">\n                                                      <span ng-show=\"list.score<$root.slider.value\">\n                                                      <!--<span ng-init=\"val[$index] = cpc.displayIndex\"></span>-->\n                                                      </span>\n\n                                                        <div class=\"text-right row-style\"\n                                                             ng-class=\"getSomeValue($index,list.score,$root.slider.value)\"></div>\n                                                        <!--<span ng-init=\"cpc.displayIndex = cpc.displayIndex+1\">{$ cpc.displayIndex $}</span>-->\n                                                        <div class=\"custom-actions\" ng-show=\"!hideObj.isEdit[$index]\">\n                                                            <button class=\"btn btn-default btn-sm bnt-cst-process\" title=\"Edit\"\n                                                                    ng-show=\"list.is_changed\"\n                                                                    ng-click=\"hideObj.isEdit[$index]=true;editVal[$index]=list.text;parentVal[$index]=list.text;\">\n                                                                <i class=\"fa fa-pencil\"></i>\n                                                            </button>\n                                                            <button class=\"btn btn-default btn-sm bnt-cst-process\" title=\"Accept\"\n                                                                    ng-show=\"list.is_corrected\"\n                                                                    ng-click=\"isAccept($index,list.text,list);$event.stopPropagation()\">\n                                                                <i class=\"fa fa-check\"></i>\n                                                            </button>\n                                                        </div>\n                                                        <div class=\"custom-saveAction\" ng-show=\"hideObj.isEdit[$index]\">\n                                                            <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                    ng-click=\"isEditData($index,editVal[$index],list);$event.stopPropagation()\">\n                                                                Save\n                                                            </button>\n                                                            <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                    ng-click=\"hideObj.isEdit[$index]=false;editVal[$index]='';showEditMsg='';clearEdit();$event.stopPropagation()\">\n                                                                <i class=\"fa fa-times\"></i>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n\n                                                    <div ng-show=\"list.is_nlp\" class=\"row\">\n                                                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                                            <h5>Intent Recommendations</h5>\n                                                            <div data-ng-repeat=\"intent in list.nlp\" style=\"border: 1px solid #22a2d3;margin-bottom: 20px;\">\n                                                                <div class=\"row\" style=\"background-color:white;padding:10px 0px 10px 0px;    margin-bottom: 10px;\">\n                                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\">\n                                                                        <span class=\"valueStyle\">{$ intent.action $}</span>\n                                                                        <!--<span class=\"nlpSummary\"><i class=\"fa fa-pencil\"></i></span>-->\n                                                                    </div>\n                                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6\">\n                                                                        <span class=\"valueStyle\">{$ intent.entity $}</span>\n                                                                        <!--<span class=\"nlpSummary\"><i class=\"fa fa-pencil\"></i></span>-->\n                                                                    </div>\n                                                                </div>\n\n                                                                <table class=\"table table-responsive table-scroll table-font\" style=\"margin-bottom:0px !important;\">\n                                                                    <thead>\n                                                                      <th>Action</th>\n                                                                      <th>Attribute</th>\n                                                                      <th>Value</th>\n                                                                    </thead>\n                                                                    <tbody>\n                                                                        <tr ng-repeat=\"attributes in intent.attributes\">\n                                                                            <td>{$ attributes.action $}</td>\n                                                                            <td>{$ attributes.attribute $}</td>\n                                                                            <td>{$ attributes.value $}</td>\n                                                                        </tr>\n\n                                                                    </tbody>\n                                                                </table>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n\n                                                <div ng-if=\"list.type=='table'\">\n\n                                                    <div class=\"panel-group\" id=\"TableAccordion\" role=\"tablist\"\n                                                         aria-multiselectable=\"true\" style=\"padding:15px;\">\n                                                        <div class=\"panel panel-default\" ng-repeat=\"rowList in list.tables.table\">\n\n                                                            <div class=\"panel-heading table-panelHeading\" role=\"tab\"\n                                                                 id=\"showRow{$ $index $}\">\n                                                                <h4 class=\"panel-title\">\n                                                                    <a role=\"button\" data-toggle=\"collapse\"\n                                                                       data-parent=\"#TableAccordion\" href=\".showRow{$ $index $}\"\n                                                                       aria-expanded=\"true\" aria-controls=\"showRow{$ $index $}\">\n                                                                        Row {$ $index+1 $}\n                                                                    </a>\n                                                                </h4>\n                                                            </div>\n                                                            <div class=\"panel-collapse collapse showRow{$ $index $}\" role=\"tabpanel\"\n                                                                 aria-labelledby=\"showRow{$ $index $}\">\n                                                                <div class=\"panel-body\">\n\n                                                                    <div ng-repeat=\"(key,tableData) in rowList\"\n                                                                         ng-show=\"tableData.score<=$root.slider.value\" tabindex=\"0\"\n                                                                         class=\"row {$ rowHighlightTable[tableData.groupName+''+tableData.indexObj.parentIndex+''+tableData.indexObj.childIndex+''+tableData.indexObj.superChildIndex] $} review-row \"\n                                                                         id=\"innerData{$ tableData.groupName $}{$ tableData.indexObj.parentIndex $}{$ tableData.indexObj.childIndex $}{$ tableData.indexObj.superChildIndex $}\"\n                                                                         ng-click=\"rowTableClick(tableData,tableData.drawerIndex,tableData.groupName)\"\n                                                                         style=\"border-bottom:1px solid #e0e0e0;\">\n                                                                        <div class=\"col-lg-7 col-md-7 col-sm-7 sub-row\">\n                                                                            <div class=\"head row-style\" ng-class=\"tableData.rule_status?'':'ruleValidation'\">\n                                                                               <span> {$ getAttributeName(tableData.domain_mapping) $}</span>\n\n                                                                            </div>\n                                                                            <div class=\"small-font row-style\"\n                                                                                 ng-hide=\"tableData.is_accept || tableData.is_update\">\n                                                                                Processed Result ({$ tableData.score | number:2$}%)\n                                                                            </div>\n                                                                            <div class=\"small-font row-style\"\n                                                                                 ng-show=\"tableData.is_accept\">Final Value\n                                                                                (Accepted)\n                                                                            </div>\n                                                                            <div class=\"small-font row-style\"\n                                                                                 ng-show=\"tableData.is_update\">Final Value\n                                                                                (Corrected)\n                                                                            </div>\n                                                                            <div class=\"row-style valueStyle\"\n                                                                                 ng-class=\"checkVal(tableData.label,tableData.text)\"\n                                                                                 ng-show=\"!hideObj.isEdit[$index]\">\n                                                                                <span> {$ tableData.text $}</span>\n                                                                                <i class=\"fa fa-exclamation-triangle\" style=\"color:red\" title =\"{$ tableData.rule_validate_msg $}\" ng-show=\"!tableData.rule_status\"></i>\n\n                                                                            </div>\n                                                                            <div ng-show=\"hideObj.isEdit[$index]\">\n\n                                                                                <input type=\"text\" ng-model=\"editVal[$index]\"\n                                                                                       class=\"form-control\" autofocus\n                                                                                       ng-show=\"parentVal[$index].length<=30\">\n                                                                                <textarea ng-model=\"editVal[$index]\"\n                                                                                          class=\"form-control\" rows=\"4\" cols=\"50\"\n                                                                                          autofocus\n                                                                                          ng-show=\"parentVal[$index].length>30\"></textarea>\n                                                                                <span class=\"error\" ng-show=\"showEditText[$index]\">{$ showEditMsg $}</span>\n\n                                                                            </div>\n                                                                        </div>\n                                                                        <div class=\"col-lg-5 col-md-5 col-sm-5 sub-row\">\n                                                          <span ng-show=\"tableData.score<$root.slider.value\">\n                                                          <!--<span ng-init=\"val[$index] = cpc.displayIndex\"></span>-->\n                                                          </span>\n\n                                                                            <div class=\"text-right row-style\"\n                                                                                 ng-class=\"getSomeValue($index,tableData.score,$root.slider.value)\"></div>\n                                                                            <!--<span ng-init=\"cpc.displayIndex = cpc.displayIndex+1\">{$ cpc.displayIndex $}</span>-->\n                                                                            <div class=\"custom-actions\"\n                                                                                 ng-show=\"!hideObj.isEdit[$index]\">\n                                                                                <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                                        title=\"Edit\" ng-show=\"tableData.is_changed\"\n                                                                                        ng-click=\"hideObj.isEdit[$index]=true;editVal[$index]=tableData.text;parentVal[$index]=tableData.text;\">\n                                                                                    <i class=\"fa fa-pencil\"></i>\n                                                                                </button>\n                                                                                <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                                        title=\"Accept\"\n                                                                                        ng-show=\"tableData.is_corrected\"\n                                                                                        ng-click=\"isAccept($index,tableData.text,tableData);$event.stopPropagation()\">\n                                                                                    <i class=\"fa fa-check\"></i>\n                                                                                </button>\n                                                                            </div>\n                                                                            <div class=\"custom-saveAction\"\n                                                                                 ng-show=\"hideObj.isEdit[$index]\">\n                                                                                <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                                        ng-click=\"isEditData($index,editVal[$index],tableData);$event.stopPropagation()\">\n                                                                                    Save\n                                                                                </button>\n                                                                                <button class=\"btn btn-default btn-sm bnt-cst-process\"\n                                                                                        ng-click=\"hideObj.isEdit[$index]=false;editVal[$index]='';showEditMsg='';clearEdit();$event.stopPropagation()\">\n                                                                                    <i class=\"fa fa-times\"></i>\n                                                                                </button>\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row completeReview\">\n                                    <button class=\"btn btn-custom btn-block\" ng-click=\"completeReview()\">\n                                        Complete Review\n                                    </button>\n                                    <br>\n                                    <div class=\"row\">\n                                        <div class=\"col-lg-6 col-sm-6 col-md-6\">\n                                            <span class=\"head\">{$ fieldAccept $}</span>\n                                            <span>Fields Accepted</span>\n                                        </div>\n                                        <div class=\"col-lg-6 col-sm-6 col-md-6\">\n                                            <span class=\"head\">{$ fieldUpdate $}</span>\n                                            <span>Fields Corrected</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"tab-pane outcomes\">\n                                <div class=\"card\" style=\"min-height: 380px;padding: 18px;margin-bottom: 0;\" ng-if=\"showDomainTab\">\n                                    <json-formatter class=\"jsonformatter\" open=\"4\" json=\"entitiesData\"></json-formatter>\n                                </div>\n                                <div ng-if=\"!showDomainTab\">\n                                    <div class=\"alert alert-danger\">\n                                        <span>{$ entitiesData.message $}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <br>\n                    </div>\n                </div>\n                <div class=\"col-sm-6 col-md-6 col-lg-6 col-xs-12 image-style domainHierarchyDiv\" ng-if=\"showUnknown\" id=\"scrollDiv2\" style=\"position:relative;background: #f3f2f2;overflow-y:auto;\">\n                        <script type=\"text/ng-template\" id=\"nodes_renderer3.html\">\n\n                              <div ui-tree-handle class=\"tree-node tree-node-content mainNode\" data-nodrag  style=\"padding-left:0px;\" >\n                                    <div ng-if=\"node.type=='attribute'\" >\n\n\n                                            <div ng-repeat=\"nodeAttribute in node.attributes track by $index\"   class=\"tree-node tree-node-content \"\n                                                 style=\"margin-left: 5px;margin-right:5px;margin-bottom: 3px;box-shadow: 0px 0px 3px #b1b1b1fa;\" ng-hide=\"nodeAttribute.is_delete\">\n\n                                                 <div class=\"row row-eq-height actionView\">\n                                                      <div class=\"col-lg-3 col-sm-3 col-md-3 col-xs-3 no-padding\">\n                                                          <div class=\"dropdown\">\n                                                                <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                                data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"el.showAttributes(nodeAttribute);moreSearch=''\">\n                                                                    <span class=\"pull-left\" style=\"width: 80%;overflow: hidden;text-overflow: ellipsis;\">{$ nodeAttribute.name $}</span>\n                                                                    <span class=\"caret filter-caret\"></span>\n                                                                </button>\n                                                                <ul class=\"dropdown-menu width220\">\n                                                                     <li class=\"search-li\">\n                                                                        <input type=\"text\" class=\"more-input-search\" ng-model=\"moreSearch\" placeholder=\"Search\">\n                                                                         <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                     </li>\n\n                                                                    <li ng-repeat=\"attr in el.respectedAttributes | filter:moreSearch track by $index \" class=\"disableDropDown\" ng-disabled=\"attr===nodeAttribute.name\" ng-click=\"el.selectedAttribute(attr,nodeAttribute,node)\">\n                                                                      <span class=\"liItem\">{$ attr $}</span>\n                                                                    </li>\n\n                                                                </ul>\n                                                           </div>\n                                                      </div>\n                                                      <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-7 no-padding\" style=\"border-left:1px solid #d2d2d2;\">\n                                                          <div class=\"row\">\n                                                              <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding {$ value.temp_id $}\"  ng-repeat=\"value in nodeAttribute.values\" ng-class=\"nodeAttribute.values.length >2 ? 'bottomPadding':''\" ng-hide=\"el.hideElement(value)\">\n                                                                  <div class=\"show-image\" ng-click=\"el.getCurrentValue(value)\" >\n                                                                     <div class=\"hover-div\">\n                                                                         <div class=\"row\">\n                                                                             <div class=\"col-lg-4 col-md-4 col-sm-4 no-padding\">\n                                                                                    <span ng-click=\"el.getEXtractedValue(value);$event.stopPropagation();\">\n                                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>\n                                                                                    </span>\n                                                                             </div>\n                                                                         </div>\n                                                                     </div>\n                                                                    <input type=\"text\" class=\"form-control cst-textBox {$ rowHighlight[value.temp_id] $}\" placeholder=\"Value\" ng-model=\"value.value\" ng-blur=\"el.changedValue(node,nodeAttribute,value)\"/>\n                                                                   <span ng-class=\"fieldCriteria(value)\"  style=\"width:17%;\">\n                                                                       {$ value.score | number:0 $}%\n                                                                   </span>\n                                                                      <!--<i class=\"fa fa-plus-circle\" style=\"font-size: 14px;color: #4291de;margin-top:10px;cursor:pointer;\"></i>-->\n                                                                </div>\n                                                              </div>\n                                                          </div>\n                                                      </div>\n                                                      <div class=\"col-lg-2 col-sm-2 col-xs-2 col-md-2 no-padding text-right\">\n                                                          <div class=\"viewActions\">\n                                                              <!-- not implemented now -->\n                                                              <!-- <img class=\"imageWidth\" src=\"/static/ref-app/app/images/test.png\"/>\n                                                              <img class=\"imageWidth\" src=\"/static/ref-app/app/images/dictionarys.png\"/> -->\n                                                              <i class=\"fa fa-trash-o danger delete-entity\" aria-hidden=\"true\" ng-click=\"el.deleteAttribute(nodeAttribute,node);$event.stopPropagation();\"></i>\n                                                              <!-- <img class=\"imageWidth\" src=\"/static/ref-app/app/images/deleteFilled.png\" style=\"width:12px;\" /> -->\n                                                          </div>\n                                                      </div>\n                                                 </div>\n\n\n                                                <div class=\"row\" ng-if=\"node.nlp != undefined\" style=\"margin-top:10px;\">\n                                                      <div class=\"col-sm-12 col-md-12 col-xs-12 col-lg-12\">\n                                                          <div class=\"table-responsive\">\n                                                              <table class=\"table table-bordered\">\n                                                                  <thead>\n                                                                    <tr>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Action</span></td>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Attribute</span></td>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Value</span></td>\n                                                                    </tr>\n                                                                  </thead>\n                                                                  <tbody>\n                                                                    <tr ng-repeat=\"data in node.nlp[0].attributes\">\n                                                                        <td>{$ data.action $}</td>\n                                                                        <td>{$ data.attribute $}</td>\n                                                                        <td>{$ data.value $}</td>\n                                                                    </tr>\n                                                                  </tbody>\n                                                              </table>\n                                                          </div>\n                                                      </div>\n                                                  </div>\n                                            </div>\n                                            <div class=\"row row-eq-height ng-scope\" style=\"margin: 5px 0px 10px 5px;\" ng-show=\"listOfNewAttributes[node.insight_id]\">\n                                                        <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 no-padding\" style=\"border-right:1px solid #d2d2d2;\">\n                                                            <div class=\"dropdown\">\n                                                                    <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                                    data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"el.showAttributesForNew(listOfNewAttributesObjs[node.insight_id]);listOfNewAttributesObjs[node.insight_id].search=''\">\n                                                                        <span class=\"pull-left\" style=\"width: 80%;\">{$ listOfNewAttributesObjs[node.insight_id].attributeName $}</span>\n                                                                        <span class=\"caret filter-caret\"></span>\n                                                                    </button>\n                                                                    <ul class=\"dropdown-menu width220\">\n                                                                         <li class=\"search-li\">\n                                                                            <input type=\"text\" class=\"more-input-search\" placeholder=\"Search\" ng-model=\"listOfNewAttributesObjs[node.insight_id].search\">\n                                                                             <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                         </li>\n\n                                                                        <li ng-repeat=\"attr in el.respectedAttributes | filter:listOfNewAttributesObjs[node.insight_id].search track by $index \" class=\"disableDropDown\" ng-disabled=\"attr===nodeAttribute.name\" ng-click=\"el.selectedAttributeForNew(attr,node)\">\n                                                                          <span class=\"liItem\">{$ attr $}</span>\n                                                                        </li>\n\n                                                                    </ul>\n                                                           </div>\n                                                        </div>\n                                                        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                                             <input class=\"form-control cst-textBox\" type=\"text\" placeholder=\"Type the Value\" ng-model=\"listOfNewAttributesObjs[node.insight_id].attributeValue\">\n                                                        </div>\n                                                        <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                                    <button class=\"btn btn-custom select-button\" title=\"Click on the highlighted portion of the image where this new text for the attribute belongs\" ng-click=\"el.selectedElement()\">Select Element</button>\n                                                                </div>\n                                                        <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 text-right\">\n                                                            <div class=\"img-edit cancel\" title=\"Cancel\" ng-click=\"el.cancelNewAttribute(node)\"></div>\n                                                                <div class=\"customSave ng-scope\" title=\"Save\" ng-click=\"el.saveNewNodeAttribute(node,this)\">\n                                                                    <i class=\"fa fa-floppy-o\" style=\"font-size:18px;\"></i>\n                                                                </div>\n                                                        </div>\n                                                     <span ng-show=\"croppingError\" style=\"color:red\" class=\"ng-binding ng-hide\"></span>\n                                            </div>\n\n                                    </div>\n                                    <div ng-if=\"node.type=='grouped_entity' || node.type=='entity'\" style=\"padding-left:5px;\">\n                                        <div ui-tree-handle class=\"tree-node tree-node-content\"\n                                        data-nodrag ng-include=\"'nodes_renderer1.html'\" style=\"padding:0px;\">\n\n                                        </div>\n                                    </div>\n                                 </div>\n                              </div>\n                        </script>\n                        <script type=\"text/ng-template\" id=\"nodes_renderer2.html\">\n\n                              <div ui-tree-handle class=\"tree-node tree-node-content mainNode\" data-nodrag  style=\"padding-left:0px;\" >\n                                    <div ng-if=\"node.type=='attribute'\" class=\"customTree\">\n\n                                            <div class=\"row\">\n                                                <div class=\"col-lg-6 col-sm-6 co-md-6 col-xs-6\">\n                                                    <span>Group {$ $index+1 $}</span>\n                                                </div>\n                                                <div class=\"col-lg-6 col-sm-6 co-md-6 col-xs-6 text-right customAttribute\">\n                                                    <span ng-click=\"el.addNewAttribute(node,this)\" style=\"color:#4a90e2;\">\n                                                        <i class=\"fa fa-plus\"></i>\n                                                        Add Attribute\n                                                    </span>\n                                                    <span style=\"margin-left:10px;color:#4a90e2;\" ng-click=\"el.deleteGroup(node,this,$index)\">\n                                                        <i class=\"fa fa-trash\"></i>\n                                                         Delete Group\n                                                    </span>\n                                                </div>\n                                            </div>\n                                            <div ng-repeat=\"nodeAttribute in node.attributes track by $index\"   class=\"tree-node tree-node-content \"\n                                                 style=\"margin-left: 5px;margin-right:5px;margin-bottom: 3px;box-shadow: 0px 0px 3px #b1b1b1fa;\" ng-hide=\"nodeAttribute.is_delete\">\n\n                                                 <div class=\"row row-eq-height actionView\">\n                                                      <div class=\"col-lg-3 col-sm-3 col-md-3 col-xs-3 no-padding\">\n                                                          <div class=\"dropdown\">\n                                                                <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                                data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"el.showAttributes(nodeAttribute);moreSearch=''\">\n                                                                    <span class=\"pull-left\" style=\"width: 80%;overflow: hidden;text-overflow: ellipsis;\">{$ nodeAttribute.name $}</span>\n                                                                    <span class=\"caret filter-caret\"></span>\n                                                                </button>\n                                                                <ul class=\"dropdown-menu width220\">\n                                                                     <li class=\"search-li\">\n                                                                        <input type=\"text\" class=\"more-input-search\" ng-model=\"moreSearch\" placeholder=\"Search\">\n                                                                         <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                     </li>\n\n                                                                    <li ng-repeat=\"attr in el.respectedAttributes | filter:moreSearch track by $index \" class=\"disableDropDown\" ng-disabled=\"attr===nodeAttribute.name\" ng-click=\"el.selectedAttribute(attr,nodeAttribute,node)\">\n                                                                      <span class=\"liItem\">{$ attr $}</span>\n                                                                    </li>\n\n                                                                </ul>\n                                                           </div>\n                                                      </div>\n                                                      <div class=\"col-lg-7 col-md-7 col-sm-7 col-xs-7 no-padding\" style=\"border-left:1px solid #d2d2d2;\">\n                                                          <div class=\"row\">\n                                                              <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding {$ value.temp_id $}\"  ng-repeat=\"value in nodeAttribute.values\" ng-class=\"nodeAttribute.values.length >2 ? 'bottomPadding':''\" ng-hide=\"el.hideElement(value)\">\n                                                                  <div class=\"show-image\" ng-click=\"el.getCurrentValue(value)\" >\n                                                                     <div class=\"hover-div\">\n                                                                         <div class=\"row\">\n                                                                             <div class=\"col-lg-4 col-md-4 col-sm-4 no-padding\">\n                                                                                    <span ng-click=\"el.getEXtractedValue(value);$event.stopPropagation();\">\n                                                                                        <img src=\"/static/ref-app/app/images/rotateLeft.png\"  class=\"editImagesWidth\"/>\n                                                                                    </span>\n                                                                             </div>\n                                                                         </div>\n                                                                     </div>\n                                                                    <input type=\"text\" class=\"form-control cst-textBox {$ rowHighlight[value.temp_id] $}\" placeholder=\"Value\" ng-model=\"value.value\" ng-blur=\"el.changedValue(node,nodeAttribute,value)\"/>\n                                                                   <span ng-class=\"fieldCriteria(value)\"  style=\"width:17%;\">\n                                                                       {$ value.score | number:0 $}%\n                                                                   </span>\n                                                                      <!--<i class=\"fa fa-plus-circle\" style=\"font-size: 14px;color: #4291de;margin-top:10px;cursor:pointer;\"></i>-->\n                                                                </div>\n                                                              </div>\n                                                          </div>\n                                                      </div>\n                                                      <div class=\"col-lg-2 col-sm-2 col-xs-2 col-md-2 no-padding text-right\">\n                                                          <div class=\"viewActions\">\n                                                              <!-- not implemented now -->\n                                                              <!-- <img class=\"imageWidth\" src=\"/static/ref-app/app/images/test.png\"/>\n                                                              <img class=\"imageWidth\" src=\"/static/ref-app/app/images/dictionarys.png\"/> -->\n                                                              <i class=\"fa fa-trash-o danger delete-entity\" aria-hidden=\"true\" ng-click=\"el.deleteAttribute(nodeAttribute,node);$event.stopPropagation();\"></i>\n                                                              <!-- <img class=\"imageWidth\" src=\"/static/ref-app/app/images/deleteFilled.png\" style=\"width:12px;\" /> -->\n                                                          </div>\n                                                      </div>\n                                                 </div>\n\n\n                                                <div class=\"row\" ng-if=\"node.nlp != undefined\" style=\"margin-top:10px;\">\n                                                      <div class=\"col-sm-12 col-md-12 col-xs-12 col-lg-12\">\n                                                          <div class=\"table-responsive\">\n                                                              <table class=\"table table-bordered\">\n                                                                  <thead>\n                                                                    <tr>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Action</span></td>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Attribute</span></td>\n                                                                        <td><span class=\"fontStyleForAttrHead\">Value</span></td>\n                                                                    </tr>\n                                                                  </thead>\n                                                                  <tbody>\n                                                                    <tr ng-repeat=\"data in node.nlp[0].attributes\">\n                                                                        <td>{$ data.action $}</td>\n                                                                        <td>{$ data.attribute $}</td>\n                                                                        <td>{$ data.value $}</td>\n                                                                    </tr>\n                                                                  </tbody>\n                                                              </table>\n                                                          </div>\n                                                      </div>\n                                                  </div>\n                                            </div>\n                                            <div class=\"row row-eq-height ng-scope\" style=\"margin: 5px 0px 10px 5px;\" ng-show=\"listOfNewAttributes[node.insight_id]\">\n                                                        <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 no-padding\" style=\"border-right:1px solid #d2d2d2;\">\n                                                            <div class=\"dropdown\">\n                                                                    <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                                    data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"el.showAttributesForNew(listOfNewAttributesObjs[node.insight_id])\">\n                                                                        <span class=\"pull-left\" style=\"width: 80%;\">{$ listOfNewAttributesObjs[node.insight_id].attributeName $}</span>\n                                                                        <span class=\"caret filter-caret\"></span>\n                                                                    </button>\n                                                                    <ul class=\"dropdown-menu width220\">\n                                                                         <li class=\"search-li\">\n                                                                            <input type=\"text\" class=\"more-input-search\" placeholder=\"Search\" ng-model=\"listOfNewAttributesObjs[node.insight_id].search\">\n                                                                             <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                         </li>\n\n                                                                        <li ng-repeat=\"attr in el.respectedAttributes | filter:listOfNewAttributesObjs[node.insight_id].search track by $index \" class=\"disableDropDown\" ng-disabled=\"attr===nodeAttribute.name\" ng-click=\"el.selectedAttributeForNew(attr,node)\">\n                                                                          <span class=\"liItem\">{$ attr $}</span>\n                                                                        </li>\n\n                                                                    </ul>\n                                                           </div>\n                                                        </div>\n                                                        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                                             <input class=\"form-control cst-textBox\" type=\"text\" placeholder=\"Type the Value\" ng-model=\"listOfNewAttributesObjs[node.insight_id].attributeValue\">\n                                                        </div>\n                                                        <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                                    <button class=\"btn btn-custom select-button\" title=\"Click on the highlighted portion of the image where this new text for the attribute belongs\" ng-click=\"el.selectedElement()\">Select Element</button>\n                                                                </div>\n                                                        <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 text-right\">\n                                                            <div class=\"img-edit cancel\" title=\"Cancel\" ng-click=\"el.cancelNewAttribute(node)\"></div>\n                                                                <div class=\"customSave ng-scope\" title=\"Save\" ng-click=\"el.saveNewNodeAttribute(node,this)\">\n                                                                    <i class=\"fa fa-floppy-o\" style=\"font-size:18px;\"></i>\n                                                                </div>\n                                                        </div>\n                                                     <span ng-show=\"croppingError\" style=\"color:red\" class=\"ng-binding ng-hide\"></span>\n                                            </div>\n                                    </div>\n\n                                    <div ng-if=\"node.type=='grouped_entity' || node.type=='entity'\" style=\"padding-left:5px;\">\n                                        <div ui-tree-handle class=\"tree-node tree-node-content\"\n                                        data-nodrag ng-include=\"'nodes_renderer1.html'\" style=\"padding:0px;\">\n\n                                        </div>\n                                    </div>\n                                 </div>\n                              </div>\n                        </script>\n                        <script type=\"text/ng-template\" id=\"nodes_renderer1.html\">\n                              <div ui-tree-handle class=\"tree-node tree-node-content childNode\"\n                                   data-nodrag ng-class=\"node.type=='domain' ? 'domainBg' : ''\">\n                                    <a  data-nodrag data-toggle=\"collapse\" class=\"nodetoggle\" ng-click=\"chnageIcon(el.collapsed,node.temp_id)\" data-target=\".{$ node.temp_id $}\">\n                                        <i  ng-class=\"{'fa fa-minus-circle': !el.collapsed[node.temp_id],'fa fa-plus-circle': el.collapsed[node.temp_id]}\" style=\"padding-right:5px;\"></i>\n\n                                        <label ng-if=\"node.type=='grouped_entity' || node.type=='entity'\" style=\"padding-top:5px;margin-bottom:5px;\" class=\"treeFont\">\n                                            {$ node.name   $}\n                                        </label>\n                                        <label ng-if=\"node.type=='domain'\" style=\"padding-top:5px;margin-bottom:5px;color:white;\">\n                                            {$ node.name $}\n                                        </label>\n                                    </a>\n                                    <a class=\"pull-right treeFont\"  ng-click=\"el.deleteEntity(node)\" style=\"padding:4px;margin-right: 8px;\" ng-hide=\"node.type=='domain'\" ng-class=\"node.type=='domain' ? '' : 'smallAdd'\">\n                                        <span class=\"fa fa-trash\" style=\"font-size: 10px;\"></span> Delete Entity\n                                    </a>\n                                    <a class=\"pull-right treeFont\"  ng-click=\"el.addNewAttributeInEntity(node,this)\" style=\"padding:4px;\" ng-hide=\"node.type=='domain' || node.type=='grouped_entity'\" ng-class=\"node.type=='domain' ? '' : 'smallAdd'\">\n                                        <span class=\"fa fa-plus\" style=\"font-size: 10px;\"></span> Add Attribute\n                                    </a>\n                                    <a class=\"pull-right treeFont\"  ng-click=\"el.addNewGroupInEntity(node,this)\" style=\"padding:4px;\" ng-hide=\"node.type=='domain' || node.type=='entity'\" ng-class=\"node.type=='domain' ? '' : 'smallAdd'\">\n                                        <span class=\"fa fa-plus\" style=\"font-size: 10px;\"></span> Add Group\n                                    </a>\n                                    <a class=\"pull-right treeFont\"  ng-click=\"el.addNewEntity(node)\" style=\"padding:4px;color:White;margin-right:8px;\" ng-show=\"node.type=='domain'\" ng-class=\"node.type=='domain' ? '' : 'smallAdd'\">\n                                        <span class=\"fa fa-plus\"  style=\"font-size: 10px;color:White;\"></span> Add Entity\n                                    </a>\n\n\n                                        <!--<i class=\"fa fa-trash pull-right\" style=\"font-size: 16px;padding: 10px;\"></i>-->\n                                        <!--<i class=\"fa fa-pencil pull-right\" style=\"font-size: 16px;padding: 10px;\"></i>-->\n                              </div>\n\n                              <ol ng-if=\"node.type=='domain'\" ui-tree-nodes=\"\" ng-model=\"node.attributes\" class=\"listedStyle collapse in olStyle1 {$ node.temp_id $}\" >\n                                    <li style=\"margin-bottom:10px;background-color:white;padding-bottom:5px;\" ng-show=\"displayNewEntity\">\n                                      <div class=\"childNode\" style=\"padding: 5px 0px 5px 10px;\">Entity</div>\n                                      <div class=\"row row-eq-height ng-scope\" style=\"margin: 5px 0px 10px 0px;\">\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                <div class=\"dropdown\">\n                                                        <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                        data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"el.showNewEntities(node);moreSearch=''\">\n                                                            <span class=\"pull-left\" style=\"width: 80%;\">{$ newEntityObj.name $}</span>\n                                                            <span class=\"caret filter-caret\"></span>\n                                                        </button>\n                                                        <ul class=\"dropdown-menu width220\">\n                                                                     <li class=\"search-li\">\n                                                                        <input type=\"text\" class=\"more-input-search\" ng-model=\"moreSearch\" placeholder=\"Search\">\n                                                                         <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                     </li>\n\n                                                                    <li ng-repeat=\"attr in el.respectedEntities | filter:moreSearch track by $index \" class=\"disableDropDown\" ng-disabled=\"attr===node.name\" ng-click=\"el.selectedNewEntityAttribute(attr,node)\">\n                                                                      <span class=\"liItem\">{$ attr $}</span>\n                                                                    </li>\n\n                                                        </ul>\n                                               </div>\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3 text-right\">\n                                                <div class=\"img-edit cancel\" title=\"Cancel\" ng-click=\"el.cancelNewEntity()\"></div>\n                                                <div class=\"customSave\" title=\"Next\" ng-click=\"el.saveNewEntity()\">\n                                                    <i class=\"fa fa-chevron-circle-right\" aria-hidden=\"true\" style=\"font-size: 18px;\"></i>\n                                                </div>\n                                            </div><!-- end ngIf: !attrEditShow -->\n                                     </div>\n                                      <div class=\"row row-eq-height ng-scope\" style=\"margin: 5px 0px 10px 0px;\" ng-show=\"displayNewAttribute\">\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                <div class=\"dropdown\">\n                                                        <button class=\"form-control dropdown-toggle main-dropdown-btn\" type=\"button\"\n                                                        data-toggle=\"dropdown\" style=\"display: flex;align-items: center;\" ng-click=\"el.showAttributes(newEntityObj);moreSearch=''\">\n                                                            <span class=\"pull-left\" style=\"width: 80%;\">{$ el.attributeKey $}</span>\n                                                            <span class=\"caret filter-caret\"></span>\n                                                        </button>\n                                                        <ul class=\"dropdown-menu width220\">\n                                                                     <li class=\"search-li\">\n                                                                        <input type=\"text\" class=\"more-input-search\" ng-model=\"moreSearch\" placeholder=\"Search\">\n                                                                         <i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\n                                                                     </li>\n\n                                                                    <li ng-repeat=\"attr in el.respectedAttributes | filter:moreSearch track by $index \" class=\"disableDropDown\"  ng-click=\"el.selectedNewEntityAttributeValue(attr)\">\n                                                                      <span class=\"liItem\">{$ attr $}</span>\n                                                                    </li>\n\n                                                        </ul>\n                                               </div>\n                                            </div>\n                                            <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4\">\n                                                  <input class=\"form-control cst-textBox\" type=\"text\" placeholder=\"Type the Value\" ng-model=\"el.attributeValue\">\n                                            </div>\n                                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                                        <button class=\"btn btn-custom select-button\" title=\"Click on the highlighted portion of the image where this new text for the attribute belongs\" ng-click=\"el.selectedElement()\">Select Element</button>\n                                                    </div>\n                                            <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 text-right\">\n                                                <!--<div class=\"img-edit cancel\" title=\"Cancel\"></div>-->\n                                                <div class=\"customSave ng-scope\" title=\"Save\" ng-click=\"el.saveNewEntityWithAttribute(node)\">\n                                                    <i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i>\n                                                </div>\n                                            </div>\n                                         <span ng-show=\"croppingError\" style=\"color:red\" class=\"ng-binding ng-hide\"></span>\n                                     </div>\n                                  </li>\n                                  <li ng-repeat=\"node in node.attributes track by $index\"  ui-tree-node ng-include=\"'nodes_renderer2.html'\" style=\"margin-bottom:5px;margin-top:5px;\" ng-hide=\"node.is_delete\"></li>\n                              </ol>\n                              <ol ng-if=\"node.type=='grouped_entity'\" ui-tree-nodes=\"\" ng-model=\"node.groups\" class=\"listedStyle collapse in olStyle1 {$ node.temp_id $}\" >\n\n                                  <li ng-repeat=\"node in node.groups track by $index\"  ui-tree-node ng-include=\"'nodes_renderer2.html'\" style=\"margin-bottom:5px;background-color:white;\" ng-hide=\"node.is_delete\" ></li>\n                              </ol>\n                              <ol ng-if=\"node.type=='entity'\" ui-tree-nodes=\"\" ng-model=\"node.attributes\" class=\"listedStyle collapse in olStyle1 {$ node.temp_id $}\" >\n                                  <li ng-repeat=\"node in node.attributes track by $index\"  ui-tree-node ng-include=\"'nodes_renderer3.html'\" style=\"margin-bottom:10px;margin-top:10px;\" ng-hide=\"node.is_delete\"></li>\n                              </ol>\n\n                        </script>\n                        <div class=\"domainObjectBody\">\n\n                            <div class=\"row row-eq-height\">\n                                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 no-padding\">\n                                    <div ui-tree id=\"tree-root1\" data-empty-placeholder-enabled=\"false\">\n                                        <ol ui-tree-nodes class=\"olStyle\" ng-model=\"extractOutput\">\n                                            <li ng-repeat=\"node in extractOutput track by $index\"\n                                                class=\"treeDomainObject\" collapsed=\"true\"\n                                                ng-class=\"{disabledStyle: isDisabled}\" ui-tree-node ng-include=\"'nodes_renderer1.html'\"></li>\n                                        </ol>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <!---->\n\n                    </div>\n                </div>\n\n<div class=\"row borderEmail\" ng-if=\"el.documentType == 'digital'\">\n    <div class=\"col-sm-7 col-md-7 col-xs-7 col-lg-7 dashboard-row\">\n        <div class=\"row image-style\" style=\"height:{$ height $}px\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12\" style=\"padding:5px;\" >\n                <div id=\"ImageLocation1\">\n                    <ul class=\"nav nav-tabs custom-navTab\">\n                        <li class=\"active\"><a data-toggle=\"tab\" href=\".processed\">Processed</a></li>\n                        <li><a data-toggle=\"tab\" href=\".original\">Original</a></li>\n                    </ul>\n\n                    <div class=\"tab-content\" style=\"background:white\">\n                        <div class=\"tab-pane fade in active processed\">\n                            <!--<table class=\"table table-striped\">-->\n                            <!--<tbody class=\"emailTable\">-->\n                            <!--<tr>-->\n                            <!--<td>From</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ el.emailDocumentData.attributes.header.from $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Sent</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ el.emailDocumentData.attributes.header.sent $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>To</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ el.emailDocumentData.attributes.header.to $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Subject</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>{$ el.emailDocumentData.attributes.header.subject $}</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>Email Body</td>-->\n                            <!--</tr>-->\n                            <!--<tr>-->\n                            <!--<td>-->\n                            <!--<div ng-bind-html=\"emailBodyHtml()\">-->\n\n                            <!--</div>-->\n                            <!--</td>-->\n                            <!--</tr>-->\n                            <!--</tbody>-->\n                            <!--</table>-->\n                            <div ng-repeat=\"att in el.digitalDocumentData\" ng-show=\"el.digitalDocumentData.length!=0\">\n                                <div>\n                                    <!--<div class=\"attachmentClass\">-->\n                                    <!--<span>Attachment {$ $parent.$index+1 $} : </span><span style=\"color:black\">{$ key $}.{$ value.extn $}</span>-->\n                                    <!--</div>-->\n                                    <div style=\"padding: 13px 7px 25px 7px;\">\n                                        <div ng-bind-html=\"emailAttachments(att.html_data)\"></div>\n                                    </div>\n                                    <!--<div style=\"padding: 13px 7px 25px 7px;\" ng-show=\"value.extn=='pdf'\">-->\n                                    <!--<object data=\"static{$ value.pdf_path $}\" type=\"application/pdf\" width=\"100%\" height=\"300px\">-->\n                                    <!--</object>-->\n                                    <!--</div>-->\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"tab-pane fade original\" style=\"padding:10px\">\n                            <!--<div ng-bind-html=\"emailOriginalHtml()\" style=\"padding-top:10px;\">-->\n                            <!--</div>-->\n                            <div>\n                                <span></span><span style=\"#a4a4a4;\">click below to download</span>\n                            </div>\n                            <div ng-repeat=\"att in el.digitalDocumentData\">\n                                <div>\n                                    <div style=\"padding-top:10px;\">\n                                        <span ng-click=\"downloadAttachment(att.file_path)\"\n                                              style=\"color: #00a3e0;cursor:pointer\">{$ att.data[0].name $}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-margin \" style=\"background-color:white;\">\n        <ul class=\"nav nav-tabs nav-reviewTabs\">\n            <li class=\"active\"><a data-toggle=\"tab\" href=\".elements\">Elements</a></li>\n            <li><a data-toggle=\"tab\" href=\".outcomes\">Domain Objects</a></li>\n        </ul>\n        <div class=\"image-style1\" style=\"height:{$ height $}px;overflow-y:scroll;background-color:white;\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane in active elements\" style=\"position: relative;border:1px solid #eee;\">\n                </div>\n                <div class=\"tab-pane outcomes\" style=\"position: relative;border:1px solid #eee;\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n<div ng-if=\"el.documentType == 'email'\">\n    <div class=\"row\" id=\"markerForm-tabs\">\n        <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n            <ul class=\"nav nav-tabs custom-navTab\">\n                <li class=\"active\"><a data-toggle=\"tab\" href=\".review\">Review Extraction</a></li>\n                <li><a data-toggle=\"tab\" href=\".recommend\">Review Recommendations</a></li>\n            </ul>\n        </div>\n    </div>\n    <div class=\"row row-eq-height\" style=\"background-color: #ebf2f5;\">\n        <div class=\"col-sm-7 col-md-7 col-xs-7 col-lg-7 no-padding\" style=\"height:{$ height $}px;background:white\">\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade in active review emailTable\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-12\" style=\"overflow-y: scroll;max-height: 350px;\">\n                            <table class=\"table table-striped\">\n                               <tbody class=\"emailTable\">\n                               <tr>\n                               <td>From</td>\n                               </tr>\n                               <tr>\n                               <td>{$ el.docAttributes.from $}</td>\n                               </tr>\n                               <tr>\n                               <td>Sent</td>\n                               </tr>\n                               <tr>\n                               <td>{$ el.docAttributes.sent $}</td>\n                               </tr>\n                               <tr>\n                               <td>To</td>\n                               </tr>\n                               <tr>\n                               <td>{$ el.docAttributes.to $}</td>\n                               </tr>\n                               <tr>\n                               <td>Subject</td>\n                               </tr>\n                               <tr>\n                               <td>{$ el.docAttributes.subject $}</td>\n                               </tr>\n                               <tr>\n                               <td>Email Body</td>\n                               </tr>\n                               <tr>\n                               <td>\n                               <div ng-bind-html=\"el.renderEmailHTMLData(el.docAttributes.body)\">\n\n                               </div>\n                               </td>\n                               </tr>\n                               </tbody>\n                               </table>\n                        </div>\n                    </div>\n\n                    <div class=\"attachments\" style=\"padding-bottom: 15px;\">\n\n                        <div class=\"row\">\n                            <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\" style=\"top: -10px;\">\n                                <div>\n                                      <span style=\"font-size: 14px; background-color: #8399a5; padding: 0 10px;color:#fff;\">\n                                        Attachments\n                                      </span>\n                                </div>\n                            </div>\n                        </div>\n                        <br>\n                        <div class=\"row\">\n                            <div class=\"col-lg-2 col-sm-2 col-md-2 col-xs-12 text-center\" style=\"cursor:pointer;\"\n                                 ng-repeat=\"attachment in el.emailAttachmentsArray\"\n                                 ng-click=\"el.showEmailAttachment(attachment)\">\n\n                                <img ng-if=\"attachment.mime_type == 'pdf'\" src=\"./static/ref-app/app/images/pdf.png\" style=\"width:60px;\"/>\n                                <img ng-if=\"attachment.mime_type == 'excel-xlsx' || attachment.mime_type == 'excel-xls' || attachment.mime_type == 'xlsx'\" src=\"./static/ref-app/app/images/excel.png\" style=\"width:60px;\"/>\n                                <span style=\"color: #696161;font-size:12px;\">\n                                      {$  attachment.file_name $}\n                                </span>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-padding\" >\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade in active review emailTable\">\n                    <div class=\"row borderEmail\">\n                        <div class=\"col-sm-5 col-md-5 col-xs-5 col-lg-5 no-margin \" style=\"background-color:white;\">\n\n                        </div>\n                    </div>\n                </div>\n                <div class=\"tab-pane fade recommend emailTable\">\n                    <div class=\"row borderEmail\">\n                        <div style=\"height:{$ height $}px;overflow-y:scroll;\">\n                            <fieldset class=\"right_content\">\n                                <legend>Email Body</legend>\n                                <div class=\"row\">\n                                    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding\">\n                                        <div class=\"email_body\">\n                                            <span ng-bind-html=\"el.renderEmailHTMLData(el.docAttributes.body)\" style=\"font-size: 15px;\">Email Body here</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                                <div class=\"row\">\n                                    <div class=\"col-lg-12 col-sm-12 col-md-12 col-xs-12 no-padding emailPanel\">\n                                        <span style=\"color: #373939;font-size:14px;\">Intent recommendations</span>\n                                        <div class=\"panel panel-default\" ng-repeat=\"emailEntitie in el.emailEntities.fields[0].nlp\">\n                                            <div class=\"panel-heading\">\n                                                <div class=\"row\">\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-12\">\n                                                        <span data-ng-bind=\"emailEntitie.action\" ng-show=\"!showActionInput\">Action</span>\n                                                        <input type=\"text\" class=\"form-control\" ng-model=\"emailEntitie.action\" ng-show=\"showActionInput\"/>\n                                                        <i class=\"fa fa-pencil\" ng-click=\"showActionInput=true\" ng-show=\"!showActionInput\"></i>\n                                                        <i class=\"fa fa-check\" ng-show=\"showActionInput\" ng-click=\"el.updateNlp(el.emailEntities,'action');showActionInput=false\"></i>\n                                                        <i class=\"fa fa-times\" ng-click=\"showActionInput=false\" ng-show=\"showActionInput\"></i>\n                                                    </div>\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-12\">\n                                                        <span data-ng-bind=\"emailEntitie.entity\" ng-show=\"!showEntityInput\">Provider</span>\n                                                        <select class=\"form-control\" ng-model=\"emailEntitie.entity\" ng-show=\"showEntityInput\">\n                                                            <option ng-repeat=\"(key,value) in entitiesList\" value=\"{$ key $}\">{$ key $}</option>\n                                                        </select>\n                                                        <i class=\"fa fa-pencil\" ng-click=\"showEntityInput=true\" ng-show=\"!showEntityInput\"></i>\n                                                        <i class=\"fa fa-check\" ng-show=\"showEntityInput\" ng-click=\"el.updateNlp(el.emailEntities,'entity');showEntityInput=false\"></i>\n                                                        <i class=\"fa fa-times\" ng-click=\"showEntityInput=false\" ng-show=\"showEntityInput\"></i>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"panel-body\">\n                                                <div class=\"row\" style=\"padding:10px;\">\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding\">\n                                                        <span>Set</span>\n                                                    </div>\n                                                    <div class=\"col-lg-6 col-sm-6 col-md-6 col-xs-6 no-padding text-right\">\n                                                        <span style=\"color:#26aae2;cursor:pointer;\" ng-click=\"el.newAttribute(emailEntitie.attributes,emailEntitie.action);\">\n                                                            <i class=\"fa fa-plus\"></i>\n                                                            New Attribute\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                                <table class=\"table table-responsive\" style=\"background-color: #fafafa;margin-bottom:0px;\">\n                                                    <thead>\n                                                        <th>Attribute</th>\n                                                        <th>Value </th>\n                                                    </thead>\n                                                    <tbody>\n                                                        <tr ng-show=\"el.newAttributeShow\">\n                                                            <td>\n                                                                <input type=\"text\" class=\"form-control\" placeholder=\"Enter attribute\" ng-model=\"el.newAttributeObj.attribute\" />\n                                                            </td>\n                                                            <td>\n                                                                <input type=\"text\" class=\"form-control\" placeholder=\"Enter value\" ng-model=\"el.newAttributeObj.value\" />\n                                                                <span style=\"color:red\">{$ el.newAttrErr $}</span>\n                                                                <span><i class=\"fa fa-check\" ng-click=\"el.saveNewAttribute()\"></i></span>\n                                                                <span><i class=\"fa fa-times\" ng-click=\"el.newAttributeShow=false;el.newAttrErr = ''\"></i></span>\n                                                            </td>\n                                                        </tr>\n                                                         <tr data-ng-repeat=\"attr in emailEntitie.attributes\">\n                                                            <td>\n                                                                <span data-ng-bind=\"attr.attribute\">Phone Number</span>\n                                                            <span><i class=\"fa fa-pencil\" style=\"color:#F3F5F6;\"></i> </span>\n                                                            </td>\n                                                            <td>\n                                                                <span data-ng-bind=\"attr.value\" ng-show=\"!showValueInput\">Value Here</span>\n                                                                <input type=\"text\" class=\"form-control\" ng-model=\"attr.value\" ng-show=\"showValueInput\"/>\n                                                                <span><i class=\"fa fa-pencil\" ng-click=\"showValueInput=true\" ng-show=\"!showValueInput\"></i></span>\n                                                                <i class=\"fa fa-check\" ng-show=\"showValueInput\" ng-click=\"el.updateNlp(el.emailEntities,'value');showValueInput=false\"></i>\n                                                                <i class=\"fa fa-times\" ng-click=\"showValueInput=false\" ng-show=\"showValueInput\"></i>\n                                                            </td>\n                                                        </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </fieldset>\n                            <div class=\"btn btn-customReview btn-custom btn-block \">\n                                Complete review\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 137 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	    angular.module('console.entityLinkingServices', [])
			.service('entityLinkingService', function($state,$q, $http, httpPayload) {
	
	          var _getData = function(data) {
	            var req = httpPayload.fetchGetHeader('api/getReview/'+data.status+"/"+data.docType+"/"+data.id+'/'+data.page+'/'+data.search);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _reviewsList = function(data) {
	            var req = httpPayload.fetchGetHeader('api/getReviewList/'+data.default+'/'+data.documentType+'/'+data.searchKey);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _postData = function(data) {
	            var req = httpPayload.fetchPostHeader('api/feedback/',data.data);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _review = function(data) {
	            var req = httpPayload.fetchPostHeader('api/review/',data.data);
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _getDocumentTypesList = function(data) {
	             var req = httpPayload.fetchGetHeader('api/documentTypes/');
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _retrain = function(data) {
	            var req = httpPayload.fetchGetHeader('api/retrain/');
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	
	
	           var _resendNLP = function(data) {
	             var req = httpPayload.fetchGetHeader('api/intent/'+data.id+'/');
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _sendEmailNlp = function(data) {
	            var req = httpPayload.fetchPostHeader('api/intentreview/',data.data);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	//          var _downloadFile = function(data) {
	//            var req = {
	//                  method: 'POST',
	//                  url: 'api/download/efs/',
	//                  headers: {'sess_token': data.sess_id},
	//                  data:{"path":data.file_path}
	//            };
	//            var deferred = $q.defer();
	//
	//            $http(req).success(function(data) {
	//              deferred.resolve({
	//                data: data
	//              });
	//            }).error(function(data) {
	//              deferred.reject({
	//                error: data
	//              });
	//            });
	//
	//            return deferred.promise;
	//          };
	
	            var _getDomainObjects = function(data) {
	                 var req = httpPayload.fetchGetHeader('api/solnConfig/domainmapping/');
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                    deferred.resolve({
	                        data: data
	                    });
	                }).error(function(data) {
	                    deferred.reject({
	                        error: data
	                    });
	                });
	
	                return deferred.promise;
	            };
	
	            var _getDomainObjectsEntities = function(data) {
	                var req = httpPayload.fetchGetHeader('api/entitylist/');
	                var deferred = $q.defer();
	
	
	                $http(req).success(function(data) {
	                    deferred.resolve({
	                        data: data
	                    });
	                }).error(function(data) {
	                    deferred.reject({
	                        error: data
	                    });
	                });
	
	                return deferred.promise;
	            };
	
	            var _getEntityLinks = function(id,sessId) {
	               var req = httpPayload.fetchGetHeader('api/entitylink/'+id+'/');
	
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	            };
	
	            var _getPostProcessData = function(id,sessId) {
	               var req = httpPayload.fetchGetHeader('api/getInsights/'+id+'/');
	
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	            };
	          var _saveEntityLinkingFeedback = function(data) {
	            var req = httpPayload.fetchPostHeader('api/feedback/entity/',data.data);
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _acceptEntityLinking = function(data) {
	            var req = httpPayload.fetchPostHeader('api/feedback/entity/',data.data);
	
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _saveCompleteReviewEntLink = function(data) {
	            var req = httpPayload.fetchPostHeader('api/completeReview/entity/',data.data);
	            var deferred = $q.defer();
	
	            $http(req).success(function(data) {
	              deferred.resolve({
	                data: data
	              });
	            }).error(function(data) {
	              deferred.reject({
	                error: data
	              });
	            });
	
	            return deferred.promise;
	          };
	
	          var _saveChangedState = function(data) {
	                var req = httpPayload.fetchPostHeader('api/completeReview/entity/',data.data);
	                var deferred = $q.defer();
	
	                $http(req).success(function(data) {
	                  deferred.resolve({
	                    data: data
	                  });
	                }).error(function(data) {
	                  deferred.reject({
	                    error: data
	                  });
	                });
	
	                return deferred.promise;
	          };
	
	
	          var entityLinkingService = {
	            getData:_getData,
	            postData:_postData,
	            reviewsList:_reviewsList,
	            resendNLP:_resendNLP,
	            getDocumentTypesList:_getDocumentTypesList,
	            retrain:_retrain,
	            review:_review,
	            sendEmailNlp:_sendEmailNlp,
	            getDomainObjects:_getDomainObjects,
	            getEntityLinks:_getEntityLinks,
	            saveEntityLinkingFeedback:_saveEntityLinkingFeedback,
	            acceptEntityLinking:_acceptEntityLinking,
	            saveCompleteReviewEntLink:_saveCompleteReviewEntLink,
	            getPostProcessData:_getPostProcessData,
	            saveChangedState: _saveChangedState,
	            getDomainObjectsEntities: _getDomainObjectsEntities
	//            downloadFile:_downloadFile
	
	          };
	
	          return entityLinkingService;
			});
	})();

/***/ }),
/* 138 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	    angular.module('console.httpPayload', [])
	        .service('httpPayload', function ($state, $q, $http,jwtHelper) {
	            var sess_info = JSON.parse(localStorage.getItem('userInfo'));
	            var accessToken = "";
	            if(sess_info && sess_info.accesstoken)
	                accessToken = sess_info.accesstoken;
	            function validateToken(){
	                if(accessToken==""){
	                    localStorage.clear();
	                    window.location.href = "http://"+ location.host+"/logout";
	                }
	                var token_date = jwtHelper.getTokenExpirationDate(accessToken);
	                var current_date = new Date();
	                if(token_date > current_date){
	                   return true;
	                }else{
	                    localStorage.clear();
	                    window.location.href = "http://"+ location.host+"/logout";
	                }
	            }
	
	            validateToken();
	
	            var headerGet = {
	
	                  method: 'GET',
	                  url: '',
	                  headers: {'Authorization': accessToken}
	            };
	
	            var headerPost = {
	                  method: 'POST',
	                  url: '',
	                  headers: {'Authorization': accessToken},
	                  data:""
	            };
	
	            var headerDelete = {
	                  method: 'DELETE',
	                  url: '',
	                  headers: {'Authorization': accessToken},
	                  data:""
	            };
	
	            var _fetchGetHeader = function(url){
	
	                if(validateToken()){
	                     headerGet.url = url;
	                     return headerGet;
	                }
	                else{
	                     localStorage.clear();
	                     window.location.href = "http://"+ location.host+"/logout";
	                }
	
	            }
	
	            var _fetchPostHeader = function(url,obj){
	                if(validateToken()){
	                        headerPost.url = url;
	                        headerPost.data = obj;
	                        return headerPost;
	                }
	                else{
	                     localStorage.clear();
	                     window.location.href = "http://"+ location.host+"/logout";
	                }
	
	            }
	
	            var _fetchDeleteHeader = function(){
	                   if(validateToken()){
	                      return headerDelete;
	                   }
	                   else{
	                     localStorage.clear();
	                     window.location.href = "http://"+ location.host+"/logout";
	                   }
	
	
	            }
	
	            var _getHeader = function(){
	                   if(validateToken())
	                     return {'Authorization': accessToken};
	                   else{
	                     localStorage.clear();
	                     window.location.href = "http://"+ location.host+"/logout";
	                   }
	
	
	
	            }
	
	            var httpPayload = {
	                fetchGetHeader: _fetchGetHeader,
	                fetchPostHeader: _fetchPostHeader,
	                fetchDeleteHeader: _fetchDeleteHeader,
	                getHeader:_getHeader
	            };
	
	            return httpPayload;
	        });
	})();

/***/ }),
/* 139 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = ['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
	
			//$urlRouterProvider.otherwise('/app/product/list');
			if(JSON.parse(localStorage.getItem('userInfo'))!=null){
	            if(JSON.parse(localStorage.getItem('userInfo')).role == "sv")
	                $urlRouterProvider.otherwise('/app/solution');
	            else
	                $urlRouterProvider.otherwise('/app/solution');
	        }
	        else{
	            window.location.href = "http://"+ location.host+"/logout";
	        }
	
			$stateProvider.state('/', {
				url: '/',
				abstract: true
			});
		}];
	})();

/***/ })
]);
//# sourceMappingURL=app.js.map